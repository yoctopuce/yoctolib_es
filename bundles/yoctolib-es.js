System.register('yoctolib-es/yocto_accelerometer.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_GRAVITYCANCELLATION_OFF, Y_GRAVITYCANCELLATION_ON, Y_GRAVITYCANCELLATION_INVALID, Y_XVALUE_INVALID, Y_YVALUE_INVALID, Y_ZVALUE_INVALID, YAccelerometer;

    function yFindAccelerometer(func) {
        return YAccelerometer.FindAccelerometer(func);
    }

    function yFirstAccelerometer() {
        return YAccelerometer.FirstAccelerometer();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindAccelerometer', yFindAccelerometer);

            _export('yFirstAccelerometer', yFirstAccelerometer);

            Y_GRAVITYCANCELLATION_OFF = 0;

            _export('Y_GRAVITYCANCELLATION_OFF', Y_GRAVITYCANCELLATION_OFF);

            Y_GRAVITYCANCELLATION_ON = 1;

            _export('Y_GRAVITYCANCELLATION_ON', Y_GRAVITYCANCELLATION_ON);

            Y_GRAVITYCANCELLATION_INVALID = -1;

            _export('Y_GRAVITYCANCELLATION_INVALID', Y_GRAVITYCANCELLATION_INVALID);

            Y_XVALUE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_XVALUE_INVALID', Y_XVALUE_INVALID);

            Y_YVALUE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_YVALUE_INVALID', Y_YVALUE_INVALID);

            Y_ZVALUE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_ZVALUE_INVALID', Y_ZVALUE_INVALID);

            YAccelerometer = (function (_YSensor) {
                _inherits(YAccelerometer, _YSensor);

                function YAccelerometer(obj_yapi, str_func) {
                    _classCallCheck(this, YAccelerometer);

                    _get(Object.getPrototypeOf(YAccelerometer.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Accelerometer';

                    this._xValue = Y_XVALUE_INVALID;

                    this._yValue = Y_YVALUE_INVALID;

                    this._zValue = Y_ZVALUE_INVALID;

                    this._gravityCancellation = Y_GRAVITYCANCELLATION_INVALID;
                    this.imm_setConst({
                        XVALUE_INVALID: YAPI.INVALID_DOUBLE,
                        YVALUE_INVALID: YAPI.INVALID_DOUBLE,
                        ZVALUE_INVALID: YAPI.INVALID_DOUBLE,
                        GRAVITYCANCELLATION_OFF: 0,
                        GRAVITYCANCELLATION_ON: 1,
                        GRAVITYCANCELLATION_INVALID: -1
                    });
                }

                _createClass(YAccelerometer, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'xValue':
                                this._xValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'yValue':
                                this._yValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'zValue':
                                this._zValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'gravityCancellation':
                                this._gravityCancellation = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YAccelerometer.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_xValue',
                    value: function get_xValue() {
                        return _regeneratorRuntime.async(function get_xValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_XVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._xValue);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_yValue',
                    value: function get_yValue() {
                        return _regeneratorRuntime.async(function get_yValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_YVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._yValue);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_zValue',
                    value: function get_zValue() {
                        return _regeneratorRuntime.async(function get_zValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ZVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._zValue);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_gravityCancellation',
                    value: function get_gravityCancellation() {
                        return _regeneratorRuntime.async(function get_gravityCancellation$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_GRAVITYCANCELLATION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._gravityCancellation);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_gravityCancellation',
                    value: function set_gravityCancellation(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_gravityCancellation$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('gravityCancellation', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextAccelerometer',
                    value: function nextAccelerometer() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YAccelerometer.FindAccelerometerInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindAccelerometer',
                    value: function FindAccelerometer(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Accelerometer', func);
                        if (obj == null) {
                            obj = new YAccelerometer(YAPI, func);
                            YFunction._AddToCache('Accelerometer', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindAccelerometerInContext',
                    value: function FindAccelerometerInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Accelerometer', func);
                        if (obj == null) {
                            obj = new YAccelerometer(yctx, func);
                            YFunction._AddToCache('Accelerometer', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstAccelerometer',
                    value: function FirstAccelerometer() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Accelerometer');
                        if (next_hwid == null) return null;
                        return YAccelerometer.FindAccelerometer(next_hwid);
                    }
                }, {
                    key: 'FirstAccelerometerInContext',
                    value: function FirstAccelerometerInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Accelerometer');
                        if (next_hwid == null) return null;
                        return YAccelerometer.FindAccelerometerInContext(yctx, next_hwid);
                    }
                }]);

                return YAccelerometer;
            })(YSensor);

            _export('YAccelerometer', YAccelerometer);
        }
    };
});
System.register('yoctolib-es/yocto_altitude.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_QNH_INVALID, Y_TECHNOLOGY_INVALID, YAltitude;

    function yFindAltitude(func) {
        return YAltitude.FindAltitude(func);
    }

    function yFirstAltitude() {
        return YAltitude.FirstAltitude();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindAltitude', yFindAltitude);

            _export('yFirstAltitude', yFirstAltitude);

            Y_QNH_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_QNH_INVALID', Y_QNH_INVALID);

            Y_TECHNOLOGY_INVALID = YAPI.INVALID_STRING;

            _export('Y_TECHNOLOGY_INVALID', Y_TECHNOLOGY_INVALID);

            YAltitude = (function (_YSensor) {
                _inherits(YAltitude, _YSensor);

                function YAltitude(obj_yapi, str_func) {
                    _classCallCheck(this, YAltitude);

                    _get(Object.getPrototypeOf(YAltitude.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Altitude';

                    this._qnh = Y_QNH_INVALID;

                    this._technology = Y_TECHNOLOGY_INVALID;
                    this.imm_setConst({
                        QNH_INVALID: YAPI.INVALID_DOUBLE,
                        TECHNOLOGY_INVALID: YAPI.INVALID_STRING
                    });
                }

                _createClass(YAltitude, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'qnh':
                                this._qnh = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'technology':
                                this._technology = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YAltitude.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'set_currentValue',
                    value: function set_currentValue(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_currentValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('currentValue', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_qnh',
                    value: function set_qnh(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_qnh$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('qnh', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_qnh',
                    value: function get_qnh() {
                        return _regeneratorRuntime.async(function get_qnh$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_QNH_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._qnh);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_technology',
                    value: function get_technology() {
                        return _regeneratorRuntime.async(function get_technology$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_TECHNOLOGY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._technology);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextAltitude',
                    value: function nextAltitude() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YAltitude.FindAltitudeInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindAltitude',
                    value: function FindAltitude(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Altitude', func);
                        if (obj == null) {
                            obj = new YAltitude(YAPI, func);
                            YFunction._AddToCache('Altitude', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindAltitudeInContext',
                    value: function FindAltitudeInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Altitude', func);
                        if (obj == null) {
                            obj = new YAltitude(yctx, func);
                            YFunction._AddToCache('Altitude', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstAltitude',
                    value: function FirstAltitude() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Altitude');
                        if (next_hwid == null) return null;
                        return YAltitude.FindAltitude(next_hwid);
                    }
                }, {
                    key: 'FirstAltitudeInContext',
                    value: function FirstAltitudeInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Altitude');
                        if (next_hwid == null) return null;
                        return YAltitude.FindAltitudeInContext(yctx, next_hwid);
                    }
                }]);

                return YAltitude;
            })(YSensor);

            _export('YAltitude', YAltitude);
        }
    };
});
System.register('yoctolib-es/yocto_anbutton.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_ANALOGCALIBRATION_OFF, Y_ANALOGCALIBRATION_ON, Y_ANALOGCALIBRATION_INVALID, Y_ISPRESSED_FALSE, Y_ISPRESSED_TRUE, Y_ISPRESSED_INVALID, Y_CALIBRATEDVALUE_INVALID, Y_RAWVALUE_INVALID, Y_CALIBRATIONMAX_INVALID, Y_CALIBRATIONMIN_INVALID, Y_SENSITIVITY_INVALID, Y_LASTTIMEPRESSED_INVALID, Y_LASTTIMERELEASED_INVALID, Y_PULSECOUNTER_INVALID, Y_PULSETIMER_INVALID, YAnButton;

    function yFindAnButton(func) {
        return YAnButton.FindAnButton(func);
    }

    function yFirstAnButton() {
        return YAnButton.FirstAnButton();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindAnButton', yFindAnButton);

            _export('yFirstAnButton', yFirstAnButton);

            Y_ANALOGCALIBRATION_OFF = 0;

            _export('Y_ANALOGCALIBRATION_OFF', Y_ANALOGCALIBRATION_OFF);

            Y_ANALOGCALIBRATION_ON = 1;

            _export('Y_ANALOGCALIBRATION_ON', Y_ANALOGCALIBRATION_ON);

            Y_ANALOGCALIBRATION_INVALID = -1;

            _export('Y_ANALOGCALIBRATION_INVALID', Y_ANALOGCALIBRATION_INVALID);

            Y_ISPRESSED_FALSE = 0;

            _export('Y_ISPRESSED_FALSE', Y_ISPRESSED_FALSE);

            Y_ISPRESSED_TRUE = 1;

            _export('Y_ISPRESSED_TRUE', Y_ISPRESSED_TRUE);

            Y_ISPRESSED_INVALID = -1;

            _export('Y_ISPRESSED_INVALID', Y_ISPRESSED_INVALID);

            Y_CALIBRATEDVALUE_INVALID = YAPI.INVALID_UINT;

            _export('Y_CALIBRATEDVALUE_INVALID', Y_CALIBRATEDVALUE_INVALID);

            Y_RAWVALUE_INVALID = YAPI.INVALID_UINT;

            _export('Y_RAWVALUE_INVALID', Y_RAWVALUE_INVALID);

            Y_CALIBRATIONMAX_INVALID = YAPI.INVALID_UINT;

            _export('Y_CALIBRATIONMAX_INVALID', Y_CALIBRATIONMAX_INVALID);

            Y_CALIBRATIONMIN_INVALID = YAPI.INVALID_UINT;

            _export('Y_CALIBRATIONMIN_INVALID', Y_CALIBRATIONMIN_INVALID);

            Y_SENSITIVITY_INVALID = YAPI.INVALID_UINT;

            _export('Y_SENSITIVITY_INVALID', Y_SENSITIVITY_INVALID);

            Y_LASTTIMEPRESSED_INVALID = YAPI.INVALID_LONG;

            _export('Y_LASTTIMEPRESSED_INVALID', Y_LASTTIMEPRESSED_INVALID);

            Y_LASTTIMERELEASED_INVALID = YAPI.INVALID_LONG;

            _export('Y_LASTTIMERELEASED_INVALID', Y_LASTTIMERELEASED_INVALID);

            Y_PULSECOUNTER_INVALID = YAPI.INVALID_LONG;

            _export('Y_PULSECOUNTER_INVALID', Y_PULSECOUNTER_INVALID);

            Y_PULSETIMER_INVALID = YAPI.INVALID_LONG;

            _export('Y_PULSETIMER_INVALID', Y_PULSETIMER_INVALID);

            YAnButton = (function (_YFunction) {
                _inherits(YAnButton, _YFunction);

                function YAnButton(obj_yapi, str_func) {
                    _classCallCheck(this, YAnButton);

                    _get(Object.getPrototypeOf(YAnButton.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'AnButton';

                    this._calibratedValue = Y_CALIBRATEDVALUE_INVALID;

                    this._rawValue = Y_RAWVALUE_INVALID;

                    this._analogCalibration = Y_ANALOGCALIBRATION_INVALID;

                    this._calibrationMax = Y_CALIBRATIONMAX_INVALID;

                    this._calibrationMin = Y_CALIBRATIONMIN_INVALID;

                    this._sensitivity = Y_SENSITIVITY_INVALID;

                    this._isPressed = Y_ISPRESSED_INVALID;

                    this._lastTimePressed = Y_LASTTIMEPRESSED_INVALID;

                    this._lastTimeReleased = Y_LASTTIMERELEASED_INVALID;

                    this._pulseCounter = Y_PULSECOUNTER_INVALID;

                    this._pulseTimer = Y_PULSETIMER_INVALID;
                    this.imm_setConst({
                        CALIBRATEDVALUE_INVALID: YAPI.INVALID_UINT,
                        RAWVALUE_INVALID: YAPI.INVALID_UINT,
                        ANALOGCALIBRATION_OFF: 0,
                        ANALOGCALIBRATION_ON: 1,
                        ANALOGCALIBRATION_INVALID: -1,
                        CALIBRATIONMAX_INVALID: YAPI.INVALID_UINT,
                        CALIBRATIONMIN_INVALID: YAPI.INVALID_UINT,
                        SENSITIVITY_INVALID: YAPI.INVALID_UINT,
                        ISPRESSED_FALSE: 0,
                        ISPRESSED_TRUE: 1,
                        ISPRESSED_INVALID: -1,
                        LASTTIMEPRESSED_INVALID: YAPI.INVALID_LONG,
                        LASTTIMERELEASED_INVALID: YAPI.INVALID_LONG,
                        PULSECOUNTER_INVALID: YAPI.INVALID_LONG,
                        PULSETIMER_INVALID: YAPI.INVALID_LONG
                    });
                }

                _createClass(YAnButton, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'calibratedValue':
                                this._calibratedValue = parseInt(val);
                                return 1;
                            case 'rawValue':
                                this._rawValue = parseInt(val);
                                return 1;
                            case 'analogCalibration':
                                this._analogCalibration = parseInt(val);
                                return 1;
                            case 'calibrationMax':
                                this._calibrationMax = parseInt(val);
                                return 1;
                            case 'calibrationMin':
                                this._calibrationMin = parseInt(val);
                                return 1;
                            case 'sensitivity':
                                this._sensitivity = parseInt(val);
                                return 1;
                            case 'isPressed':
                                this._isPressed = parseInt(val);
                                return 1;
                            case 'lastTimePressed':
                                this._lastTimePressed = parseInt(val);
                                return 1;
                            case 'lastTimeReleased':
                                this._lastTimeReleased = parseInt(val);
                                return 1;
                            case 'pulseCounter':
                                this._pulseCounter = parseInt(val);
                                return 1;
                            case 'pulseTimer':
                                this._pulseTimer = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YAnButton.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_calibratedValue',
                    value: function get_calibratedValue() {
                        return _regeneratorRuntime.async(function get_calibratedValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CALIBRATEDVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._calibratedValue);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_rawValue',
                    value: function get_rawValue() {
                        return _regeneratorRuntime.async(function get_rawValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_RAWVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._rawValue);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_analogCalibration',
                    value: function get_analogCalibration() {
                        return _regeneratorRuntime.async(function get_analogCalibration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ANALOGCALIBRATION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._analogCalibration);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_analogCalibration',
                    value: function set_analogCalibration(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_analogCalibration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('analogCalibration', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_calibrationMax',
                    value: function get_calibrationMax() {
                        return _regeneratorRuntime.async(function get_calibrationMax$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CALIBRATIONMAX_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._calibrationMax);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_calibrationMax',
                    value: function set_calibrationMax(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_calibrationMax$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('calibrationMax', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_calibrationMin',
                    value: function get_calibrationMin() {
                        return _regeneratorRuntime.async(function get_calibrationMin$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CALIBRATIONMIN_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._calibrationMin);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_calibrationMin',
                    value: function set_calibrationMin(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_calibrationMin$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('calibrationMin', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_sensitivity',
                    value: function get_sensitivity() {
                        return _regeneratorRuntime.async(function get_sensitivity$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SENSITIVITY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._sensitivity);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_sensitivity',
                    value: function set_sensitivity(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_sensitivity$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('sensitivity', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_isPressed',
                    value: function get_isPressed() {
                        return _regeneratorRuntime.async(function get_isPressed$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ISPRESSED_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._isPressed);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_lastTimePressed',
                    value: function get_lastTimePressed() {
                        return _regeneratorRuntime.async(function get_lastTimePressed$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LASTTIMEPRESSED_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._lastTimePressed);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_lastTimeReleased',
                    value: function get_lastTimeReleased() {
                        return _regeneratorRuntime.async(function get_lastTimeReleased$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LASTTIMERELEASED_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._lastTimeReleased);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_pulseCounter',
                    value: function get_pulseCounter() {
                        return _regeneratorRuntime.async(function get_pulseCounter$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PULSECOUNTER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._pulseCounter);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_pulseCounter',
                    value: function set_pulseCounter(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_pulseCounter$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('pulseCounter', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_pulseTimer',
                    value: function get_pulseTimer() {
                        return _regeneratorRuntime.async(function get_pulseTimer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PULSETIMER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._pulseTimer);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'resetCounter',
                    value: function resetCounter() {
                        return _regeneratorRuntime.async(function resetCounter$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_pulseCounter(0));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextAnButton',
                    value: function nextAnButton() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YAnButton.FindAnButtonInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindAnButton',
                    value: function FindAnButton(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('AnButton', func);
                        if (obj == null) {
                            obj = new YAnButton(YAPI, func);
                            YFunction._AddToCache('AnButton', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindAnButtonInContext',
                    value: function FindAnButtonInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'AnButton', func);
                        if (obj == null) {
                            obj = new YAnButton(yctx, func);
                            YFunction._AddToCache('AnButton', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstAnButton',
                    value: function FirstAnButton() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('AnButton');
                        if (next_hwid == null) return null;
                        return YAnButton.FindAnButton(next_hwid);
                    }
                }, {
                    key: 'FirstAnButtonInContext',
                    value: function FirstAnButtonInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('AnButton');
                        if (next_hwid == null) return null;
                        return YAnButton.FindAnButtonInContext(yctx, next_hwid);
                    }
                }]);

                return YAnButton;
            })(YFunction);

            _export('YAnButton', YAnButton);
        }
    };
});
System.register('yoctolib-es/yocto_audioin.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_MUTE_FALSE, Y_MUTE_TRUE, Y_MUTE_INVALID, Y_VOLUME_INVALID, Y_VOLUMERANGE_INVALID, Y_SIGNAL_INVALID, Y_NOSIGNALFOR_INVALID, YAudioIn;

    function yFindAudioIn(func) {
        return YAudioIn.FindAudioIn(func);
    }

    function yFirstAudioIn() {
        return YAudioIn.FirstAudioIn();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindAudioIn', yFindAudioIn);

            _export('yFirstAudioIn', yFirstAudioIn);

            Y_MUTE_FALSE = 0;

            _export('Y_MUTE_FALSE', Y_MUTE_FALSE);

            Y_MUTE_TRUE = 1;

            _export('Y_MUTE_TRUE', Y_MUTE_TRUE);

            Y_MUTE_INVALID = -1;

            _export('Y_MUTE_INVALID', Y_MUTE_INVALID);

            Y_VOLUME_INVALID = YAPI.INVALID_UINT;

            _export('Y_VOLUME_INVALID', Y_VOLUME_INVALID);

            Y_VOLUMERANGE_INVALID = YAPI.INVALID_STRING;

            _export('Y_VOLUMERANGE_INVALID', Y_VOLUMERANGE_INVALID);

            Y_SIGNAL_INVALID = YAPI.INVALID_INT;

            _export('Y_SIGNAL_INVALID', Y_SIGNAL_INVALID);

            Y_NOSIGNALFOR_INVALID = YAPI.INVALID_INT;

            _export('Y_NOSIGNALFOR_INVALID', Y_NOSIGNALFOR_INVALID);

            YAudioIn = (function (_YFunction) {
                _inherits(YAudioIn, _YFunction);

                function YAudioIn(obj_yapi, str_func) {
                    _classCallCheck(this, YAudioIn);

                    _get(Object.getPrototypeOf(YAudioIn.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'AudioIn';

                    this._volume = Y_VOLUME_INVALID;

                    this._mute = Y_MUTE_INVALID;

                    this._volumeRange = Y_VOLUMERANGE_INVALID;

                    this._signal = Y_SIGNAL_INVALID;

                    this._noSignalFor = Y_NOSIGNALFOR_INVALID;
                    this.imm_setConst({
                        VOLUME_INVALID: YAPI.INVALID_UINT,
                        MUTE_FALSE: 0,
                        MUTE_TRUE: 1,
                        MUTE_INVALID: -1,
                        VOLUMERANGE_INVALID: YAPI.INVALID_STRING,
                        SIGNAL_INVALID: YAPI.INVALID_INT,
                        NOSIGNALFOR_INVALID: YAPI.INVALID_INT
                    });
                }

                _createClass(YAudioIn, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'volume':
                                this._volume = parseInt(val);
                                return 1;
                            case 'mute':
                                this._mute = parseInt(val);
                                return 1;
                            case 'volumeRange':
                                this._volumeRange = val;
                                return 1;
                            case 'signal':
                                this._signal = parseInt(val);
                                return 1;
                            case 'noSignalFor':
                                this._noSignalFor = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YAudioIn.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_volume',
                    value: function get_volume() {
                        return _regeneratorRuntime.async(function get_volume$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_VOLUME_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._volume);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_volume',
                    value: function set_volume(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_volume$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('volume', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_mute',
                    value: function get_mute() {
                        return _regeneratorRuntime.async(function get_mute$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MUTE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._mute);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_mute',
                    value: function set_mute(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_mute$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('mute', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_volumeRange',
                    value: function get_volumeRange() {
                        return _regeneratorRuntime.async(function get_volumeRange$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_VOLUMERANGE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._volumeRange);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_signal',
                    value: function get_signal() {
                        return _regeneratorRuntime.async(function get_signal$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SIGNAL_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._signal);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_noSignalFor',
                    value: function get_noSignalFor() {
                        return _regeneratorRuntime.async(function get_noSignalFor$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_NOSIGNALFOR_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._noSignalFor);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextAudioIn',
                    value: function nextAudioIn() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YAudioIn.FindAudioInInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindAudioIn',
                    value: function FindAudioIn(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('AudioIn', func);
                        if (obj == null) {
                            obj = new YAudioIn(YAPI, func);
                            YFunction._AddToCache('AudioIn', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindAudioInInContext',
                    value: function FindAudioInInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'AudioIn', func);
                        if (obj == null) {
                            obj = new YAudioIn(yctx, func);
                            YFunction._AddToCache('AudioIn', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstAudioIn',
                    value: function FirstAudioIn() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('AudioIn');
                        if (next_hwid == null) return null;
                        return YAudioIn.FindAudioIn(next_hwid);
                    }
                }, {
                    key: 'FirstAudioInInContext',
                    value: function FirstAudioInInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('AudioIn');
                        if (next_hwid == null) return null;
                        return YAudioIn.FindAudioInInContext(yctx, next_hwid);
                    }
                }]);

                return YAudioIn;
            })(YFunction);

            _export('YAudioIn', YAudioIn);
        }
    };
});
System.register('yoctolib-es/yocto_audioout.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_MUTE_FALSE, Y_MUTE_TRUE, Y_MUTE_INVALID, Y_VOLUME_INVALID, Y_VOLUMERANGE_INVALID, Y_SIGNAL_INVALID, Y_NOSIGNALFOR_INVALID, YAudioOut;

    function yFindAudioOut(func) {
        return YAudioOut.FindAudioOut(func);
    }

    function yFirstAudioOut() {
        return YAudioOut.FirstAudioOut();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindAudioOut', yFindAudioOut);

            _export('yFirstAudioOut', yFirstAudioOut);

            Y_MUTE_FALSE = 0;

            _export('Y_MUTE_FALSE', Y_MUTE_FALSE);

            Y_MUTE_TRUE = 1;

            _export('Y_MUTE_TRUE', Y_MUTE_TRUE);

            Y_MUTE_INVALID = -1;

            _export('Y_MUTE_INVALID', Y_MUTE_INVALID);

            Y_VOLUME_INVALID = YAPI.INVALID_UINT;

            _export('Y_VOLUME_INVALID', Y_VOLUME_INVALID);

            Y_VOLUMERANGE_INVALID = YAPI.INVALID_STRING;

            _export('Y_VOLUMERANGE_INVALID', Y_VOLUMERANGE_INVALID);

            Y_SIGNAL_INVALID = YAPI.INVALID_INT;

            _export('Y_SIGNAL_INVALID', Y_SIGNAL_INVALID);

            Y_NOSIGNALFOR_INVALID = YAPI.INVALID_INT;

            _export('Y_NOSIGNALFOR_INVALID', Y_NOSIGNALFOR_INVALID);

            YAudioOut = (function (_YFunction) {
                _inherits(YAudioOut, _YFunction);

                function YAudioOut(obj_yapi, str_func) {
                    _classCallCheck(this, YAudioOut);

                    _get(Object.getPrototypeOf(YAudioOut.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'AudioOut';

                    this._volume = Y_VOLUME_INVALID;

                    this._mute = Y_MUTE_INVALID;

                    this._volumeRange = Y_VOLUMERANGE_INVALID;

                    this._signal = Y_SIGNAL_INVALID;

                    this._noSignalFor = Y_NOSIGNALFOR_INVALID;
                    this.imm_setConst({
                        VOLUME_INVALID: YAPI.INVALID_UINT,
                        MUTE_FALSE: 0,
                        MUTE_TRUE: 1,
                        MUTE_INVALID: -1,
                        VOLUMERANGE_INVALID: YAPI.INVALID_STRING,
                        SIGNAL_INVALID: YAPI.INVALID_INT,
                        NOSIGNALFOR_INVALID: YAPI.INVALID_INT
                    });
                }

                _createClass(YAudioOut, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'volume':
                                this._volume = parseInt(val);
                                return 1;
                            case 'mute':
                                this._mute = parseInt(val);
                                return 1;
                            case 'volumeRange':
                                this._volumeRange = val;
                                return 1;
                            case 'signal':
                                this._signal = parseInt(val);
                                return 1;
                            case 'noSignalFor':
                                this._noSignalFor = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YAudioOut.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_volume',
                    value: function get_volume() {
                        return _regeneratorRuntime.async(function get_volume$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_VOLUME_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._volume);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_volume',
                    value: function set_volume(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_volume$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('volume', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_mute',
                    value: function get_mute() {
                        return _regeneratorRuntime.async(function get_mute$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MUTE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._mute);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_mute',
                    value: function set_mute(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_mute$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('mute', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_volumeRange',
                    value: function get_volumeRange() {
                        return _regeneratorRuntime.async(function get_volumeRange$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_VOLUMERANGE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._volumeRange);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_signal',
                    value: function get_signal() {
                        return _regeneratorRuntime.async(function get_signal$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SIGNAL_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._signal);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_noSignalFor',
                    value: function get_noSignalFor() {
                        return _regeneratorRuntime.async(function get_noSignalFor$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_NOSIGNALFOR_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._noSignalFor);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextAudioOut',
                    value: function nextAudioOut() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YAudioOut.FindAudioOutInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindAudioOut',
                    value: function FindAudioOut(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('AudioOut', func);
                        if (obj == null) {
                            obj = new YAudioOut(YAPI, func);
                            YFunction._AddToCache('AudioOut', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindAudioOutInContext',
                    value: function FindAudioOutInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'AudioOut', func);
                        if (obj == null) {
                            obj = new YAudioOut(yctx, func);
                            YFunction._AddToCache('AudioOut', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstAudioOut',
                    value: function FirstAudioOut() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('AudioOut');
                        if (next_hwid == null) return null;
                        return YAudioOut.FindAudioOut(next_hwid);
                    }
                }, {
                    key: 'FirstAudioOutInContext',
                    value: function FirstAudioOutInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('AudioOut');
                        if (next_hwid == null) return null;
                        return YAudioOut.FindAudioOutInContext(yctx, next_hwid);
                    }
                }]);

                return YAudioOut;
            })(YFunction);

            _export('YAudioOut', YAudioOut);
        }
    };
});
System.register('yoctolib-es/yocto_bluetoothlink.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_MUTE_FALSE, Y_MUTE_TRUE, Y_MUTE_INVALID, Y_LINKSTATE_DOWN, Y_LINKSTATE_FREE, Y_LINKSTATE_SEARCH, Y_LINKSTATE_EXISTS, Y_LINKSTATE_LINKED, Y_LINKSTATE_PLAY, Y_LINKSTATE_INVALID, Y_OWNADDRESS_INVALID, Y_PAIRINGPIN_INVALID, Y_REMOTEADDRESS_INVALID, Y_REMOTENAME_INVALID, Y_PREAMPLIFIER_INVALID, Y_VOLUME_INVALID, Y_LINKQUALITY_INVALID, Y_COMMAND_INVALID, YBluetoothLink;

    function yFindBluetoothLink(func) {
        return YBluetoothLink.FindBluetoothLink(func);
    }

    function yFirstBluetoothLink() {
        return YBluetoothLink.FirstBluetoothLink();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindBluetoothLink', yFindBluetoothLink);

            _export('yFirstBluetoothLink', yFirstBluetoothLink);

            Y_MUTE_FALSE = 0;

            _export('Y_MUTE_FALSE', Y_MUTE_FALSE);

            Y_MUTE_TRUE = 1;

            _export('Y_MUTE_TRUE', Y_MUTE_TRUE);

            Y_MUTE_INVALID = -1;

            _export('Y_MUTE_INVALID', Y_MUTE_INVALID);

            Y_LINKSTATE_DOWN = 0;

            _export('Y_LINKSTATE_DOWN', Y_LINKSTATE_DOWN);

            Y_LINKSTATE_FREE = 1;

            _export('Y_LINKSTATE_FREE', Y_LINKSTATE_FREE);

            Y_LINKSTATE_SEARCH = 2;

            _export('Y_LINKSTATE_SEARCH', Y_LINKSTATE_SEARCH);

            Y_LINKSTATE_EXISTS = 3;

            _export('Y_LINKSTATE_EXISTS', Y_LINKSTATE_EXISTS);

            Y_LINKSTATE_LINKED = 4;

            _export('Y_LINKSTATE_LINKED', Y_LINKSTATE_LINKED);

            Y_LINKSTATE_PLAY = 5;

            _export('Y_LINKSTATE_PLAY', Y_LINKSTATE_PLAY);

            Y_LINKSTATE_INVALID = -1;

            _export('Y_LINKSTATE_INVALID', Y_LINKSTATE_INVALID);

            Y_OWNADDRESS_INVALID = YAPI.INVALID_STRING;

            _export('Y_OWNADDRESS_INVALID', Y_OWNADDRESS_INVALID);

            Y_PAIRINGPIN_INVALID = YAPI.INVALID_STRING;

            _export('Y_PAIRINGPIN_INVALID', Y_PAIRINGPIN_INVALID);

            Y_REMOTEADDRESS_INVALID = YAPI.INVALID_STRING;

            _export('Y_REMOTEADDRESS_INVALID', Y_REMOTEADDRESS_INVALID);

            Y_REMOTENAME_INVALID = YAPI.INVALID_STRING;

            _export('Y_REMOTENAME_INVALID', Y_REMOTENAME_INVALID);

            Y_PREAMPLIFIER_INVALID = YAPI.INVALID_UINT;

            _export('Y_PREAMPLIFIER_INVALID', Y_PREAMPLIFIER_INVALID);

            Y_VOLUME_INVALID = YAPI.INVALID_UINT;

            _export('Y_VOLUME_INVALID', Y_VOLUME_INVALID);

            Y_LINKQUALITY_INVALID = YAPI.INVALID_UINT;

            _export('Y_LINKQUALITY_INVALID', Y_LINKQUALITY_INVALID);

            Y_COMMAND_INVALID = YAPI.INVALID_STRING;

            _export('Y_COMMAND_INVALID', Y_COMMAND_INVALID);

            YBluetoothLink = (function (_YFunction) {
                _inherits(YBluetoothLink, _YFunction);

                function YBluetoothLink(obj_yapi, str_func) {
                    _classCallCheck(this, YBluetoothLink);

                    _get(Object.getPrototypeOf(YBluetoothLink.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'BluetoothLink';

                    this._ownAddress = Y_OWNADDRESS_INVALID;

                    this._pairingPin = Y_PAIRINGPIN_INVALID;

                    this._remoteAddress = Y_REMOTEADDRESS_INVALID;

                    this._remoteName = Y_REMOTENAME_INVALID;

                    this._mute = Y_MUTE_INVALID;

                    this._preAmplifier = Y_PREAMPLIFIER_INVALID;

                    this._volume = Y_VOLUME_INVALID;

                    this._linkState = Y_LINKSTATE_INVALID;

                    this._linkQuality = Y_LINKQUALITY_INVALID;

                    this._command = Y_COMMAND_INVALID;
                    this.imm_setConst({
                        OWNADDRESS_INVALID: YAPI.INVALID_STRING,
                        PAIRINGPIN_INVALID: YAPI.INVALID_STRING,
                        REMOTEADDRESS_INVALID: YAPI.INVALID_STRING,
                        REMOTENAME_INVALID: YAPI.INVALID_STRING,
                        MUTE_FALSE: 0,
                        MUTE_TRUE: 1,
                        MUTE_INVALID: -1,
                        PREAMPLIFIER_INVALID: YAPI.INVALID_UINT,
                        VOLUME_INVALID: YAPI.INVALID_UINT,
                        LINKSTATE_DOWN: 0,
                        LINKSTATE_FREE: 1,
                        LINKSTATE_SEARCH: 2,
                        LINKSTATE_EXISTS: 3,
                        LINKSTATE_LINKED: 4,
                        LINKSTATE_PLAY: 5,
                        LINKSTATE_INVALID: -1,
                        LINKQUALITY_INVALID: YAPI.INVALID_UINT,
                        COMMAND_INVALID: YAPI.INVALID_STRING
                    });
                }

                _createClass(YBluetoothLink, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'ownAddress':
                                this._ownAddress = val;
                                return 1;
                            case 'pairingPin':
                                this._pairingPin = val;
                                return 1;
                            case 'remoteAddress':
                                this._remoteAddress = val;
                                return 1;
                            case 'remoteName':
                                this._remoteName = val;
                                return 1;
                            case 'mute':
                                this._mute = parseInt(val);
                                return 1;
                            case 'preAmplifier':
                                this._preAmplifier = parseInt(val);
                                return 1;
                            case 'volume':
                                this._volume = parseInt(val);
                                return 1;
                            case 'linkState':
                                this._linkState = parseInt(val);
                                return 1;
                            case 'linkQuality':
                                this._linkQuality = parseInt(val);
                                return 1;
                            case 'command':
                                this._command = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YBluetoothLink.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_ownAddress',
                    value: function get_ownAddress() {
                        return _regeneratorRuntime.async(function get_ownAddress$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_OWNADDRESS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._ownAddress);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_pairingPin',
                    value: function get_pairingPin() {
                        return _regeneratorRuntime.async(function get_pairingPin$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PAIRINGPIN_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._pairingPin);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_pairingPin',
                    value: function set_pairingPin(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_pairingPin$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('pairingPin', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_remoteAddress',
                    value: function get_remoteAddress() {
                        return _regeneratorRuntime.async(function get_remoteAddress$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_REMOTEADDRESS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._remoteAddress);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_remoteAddress',
                    value: function set_remoteAddress(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_remoteAddress$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('remoteAddress', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_remoteName',
                    value: function get_remoteName() {
                        return _regeneratorRuntime.async(function get_remoteName$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_REMOTENAME_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._remoteName);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_mute',
                    value: function get_mute() {
                        return _regeneratorRuntime.async(function get_mute$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MUTE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._mute);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_mute',
                    value: function set_mute(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_mute$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('mute', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_preAmplifier',
                    value: function get_preAmplifier() {
                        return _regeneratorRuntime.async(function get_preAmplifier$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PREAMPLIFIER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._preAmplifier);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_preAmplifier',
                    value: function set_preAmplifier(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_preAmplifier$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('preAmplifier', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_volume',
                    value: function get_volume() {
                        return _regeneratorRuntime.async(function get_volume$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_VOLUME_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._volume);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_volume',
                    value: function set_volume(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_volume$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('volume', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_linkState',
                    value: function get_linkState() {
                        return _regeneratorRuntime.async(function get_linkState$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LINKSTATE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._linkState);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_linkQuality',
                    value: function get_linkQuality() {
                        return _regeneratorRuntime.async(function get_linkQuality$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LINKQUALITY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._linkQuality);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_command',
                    value: function get_command() {
                        return _regeneratorRuntime.async(function get_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COMMAND_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._command);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_command',
                    value: function set_command(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('command', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'connect',
                    value: function connect() {
                        return _regeneratorRuntime.async(function connect$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command('C'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'disconnect',
                    value: function disconnect() {
                        return _regeneratorRuntime.async(function disconnect$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command('D'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextBluetoothLink',
                    value: function nextBluetoothLink() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YBluetoothLink.FindBluetoothLinkInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindBluetoothLink',
                    value: function FindBluetoothLink(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('BluetoothLink', func);
                        if (obj == null) {
                            obj = new YBluetoothLink(YAPI, func);
                            YFunction._AddToCache('BluetoothLink', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindBluetoothLinkInContext',
                    value: function FindBluetoothLinkInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'BluetoothLink', func);
                        if (obj == null) {
                            obj = new YBluetoothLink(yctx, func);
                            YFunction._AddToCache('BluetoothLink', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstBluetoothLink',
                    value: function FirstBluetoothLink() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('BluetoothLink');
                        if (next_hwid == null) return null;
                        return YBluetoothLink.FindBluetoothLink(next_hwid);
                    }
                }, {
                    key: 'FirstBluetoothLinkInContext',
                    value: function FirstBluetoothLinkInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('BluetoothLink');
                        if (next_hwid == null) return null;
                        return YBluetoothLink.FindBluetoothLinkInContext(yctx, next_hwid);
                    }
                }]);

                return YBluetoothLink;
            })(YFunction);

            _export('YBluetoothLink', YBluetoothLink);
        }
    };
});
System.register('yoctolib-es/yocto_buzzer.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_FREQUENCY_INVALID, Y_VOLUME_INVALID, Y_PLAYSEQSIZE_INVALID, Y_PLAYSEQMAXSIZE_INVALID, Y_PLAYSEQSIGNATURE_INVALID, Y_COMMAND_INVALID, YBuzzer;

    function yFindBuzzer(func) {
        return YBuzzer.FindBuzzer(func);
    }

    function yFirstBuzzer() {
        return YBuzzer.FirstBuzzer();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindBuzzer', yFindBuzzer);

            _export('yFirstBuzzer', yFirstBuzzer);

            Y_FREQUENCY_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_FREQUENCY_INVALID', Y_FREQUENCY_INVALID);

            Y_VOLUME_INVALID = YAPI.INVALID_UINT;

            _export('Y_VOLUME_INVALID', Y_VOLUME_INVALID);

            Y_PLAYSEQSIZE_INVALID = YAPI.INVALID_UINT;

            _export('Y_PLAYSEQSIZE_INVALID', Y_PLAYSEQSIZE_INVALID);

            Y_PLAYSEQMAXSIZE_INVALID = YAPI.INVALID_UINT;

            _export('Y_PLAYSEQMAXSIZE_INVALID', Y_PLAYSEQMAXSIZE_INVALID);

            Y_PLAYSEQSIGNATURE_INVALID = YAPI.INVALID_UINT;

            _export('Y_PLAYSEQSIGNATURE_INVALID', Y_PLAYSEQSIGNATURE_INVALID);

            Y_COMMAND_INVALID = YAPI.INVALID_STRING;

            _export('Y_COMMAND_INVALID', Y_COMMAND_INVALID);

            YBuzzer = (function (_YFunction) {
                _inherits(YBuzzer, _YFunction);

                function YBuzzer(obj_yapi, str_func) {
                    _classCallCheck(this, YBuzzer);

                    _get(Object.getPrototypeOf(YBuzzer.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Buzzer';

                    this._frequency = Y_FREQUENCY_INVALID;

                    this._volume = Y_VOLUME_INVALID;

                    this._playSeqSize = Y_PLAYSEQSIZE_INVALID;

                    this._playSeqMaxSize = Y_PLAYSEQMAXSIZE_INVALID;

                    this._playSeqSignature = Y_PLAYSEQSIGNATURE_INVALID;

                    this._command = Y_COMMAND_INVALID;
                    this.imm_setConst({
                        FREQUENCY_INVALID: YAPI.INVALID_DOUBLE,
                        VOLUME_INVALID: YAPI.INVALID_UINT,
                        PLAYSEQSIZE_INVALID: YAPI.INVALID_UINT,
                        PLAYSEQMAXSIZE_INVALID: YAPI.INVALID_UINT,
                        PLAYSEQSIGNATURE_INVALID: YAPI.INVALID_UINT,
                        COMMAND_INVALID: YAPI.INVALID_STRING
                    });
                }

                _createClass(YBuzzer, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'frequency':
                                this._frequency = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'volume':
                                this._volume = parseInt(val);
                                return 1;
                            case 'playSeqSize':
                                this._playSeqSize = parseInt(val);
                                return 1;
                            case 'playSeqMaxSize':
                                this._playSeqMaxSize = parseInt(val);
                                return 1;
                            case 'playSeqSignature':
                                this._playSeqSignature = parseInt(val);
                                return 1;
                            case 'command':
                                this._command = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YBuzzer.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'set_frequency',
                    value: function set_frequency(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_frequency$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('frequency', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_frequency',
                    value: function get_frequency() {
                        return _regeneratorRuntime.async(function get_frequency$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_FREQUENCY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._frequency);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_volume',
                    value: function get_volume() {
                        return _regeneratorRuntime.async(function get_volume$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_VOLUME_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._volume);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_volume',
                    value: function set_volume(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_volume$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('volume', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_playSeqSize',
                    value: function get_playSeqSize() {
                        return _regeneratorRuntime.async(function get_playSeqSize$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PLAYSEQSIZE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._playSeqSize);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_playSeqMaxSize',
                    value: function get_playSeqMaxSize() {
                        return _regeneratorRuntime.async(function get_playSeqMaxSize$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration == 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PLAYSEQMAXSIZE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._playSeqMaxSize);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_playSeqSignature',
                    value: function get_playSeqSignature() {
                        return _regeneratorRuntime.async(function get_playSeqSignature$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PLAYSEQSIGNATURE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._playSeqSignature);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_command',
                    value: function get_command() {
                        return _regeneratorRuntime.async(function get_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COMMAND_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._command);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_command',
                    value: function set_command(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('command', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'sendCommand',
                    value: function sendCommand(command) {
                        return _regeneratorRuntime.async(function sendCommand$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command(command));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'addFreqMoveToPlaySeq',
                    value: function addFreqMoveToPlaySeq(freq, msDelay) {
                        return _regeneratorRuntime.async(function addFreqMoveToPlaySeq$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand('A' + String(Math.round(freq)) + ',' + String(Math.round(msDelay))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'addPulseToPlaySeq',
                    value: function addPulseToPlaySeq(freq, msDuration) {
                        return _regeneratorRuntime.async(function addPulseToPlaySeq$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand('B' + String(Math.round(freq)) + ',' + String(Math.round(msDuration))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'addVolMoveToPlaySeq',
                    value: function addVolMoveToPlaySeq(volume, msDuration) {
                        return _regeneratorRuntime.async(function addVolMoveToPlaySeq$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand('C' + String(Math.round(volume)) + ',' + String(Math.round(msDuration))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'startPlaySeq',
                    value: function startPlaySeq() {
                        return _regeneratorRuntime.async(function startPlaySeq$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand('S'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'stopPlaySeq',
                    value: function stopPlaySeq() {
                        return _regeneratorRuntime.async(function stopPlaySeq$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand('X'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'resetPlaySeq',
                    value: function resetPlaySeq() {
                        return _regeneratorRuntime.async(function resetPlaySeq$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand('Z'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'pulse',
                    value: function pulse(frequency, duration) {
                        return _regeneratorRuntime.async(function pulse$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command('P' + String(Math.round(frequency)) + ',' + String(Math.round(duration))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'freqMove',
                    value: function freqMove(frequency, duration) {
                        return _regeneratorRuntime.async(function freqMove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command('F' + String(Math.round(frequency)) + ',' + String(Math.round(duration))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'volumeMove',
                    value: function volumeMove(volume, duration) {
                        return _regeneratorRuntime.async(function volumeMove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command('V' + String(Math.round(volume)) + ',' + String(Math.round(duration))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextBuzzer',
                    value: function nextBuzzer() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YBuzzer.FindBuzzerInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindBuzzer',
                    value: function FindBuzzer(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Buzzer', func);
                        if (obj == null) {
                            obj = new YBuzzer(YAPI, func);
                            YFunction._AddToCache('Buzzer', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindBuzzerInContext',
                    value: function FindBuzzerInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Buzzer', func);
                        if (obj == null) {
                            obj = new YBuzzer(yctx, func);
                            YFunction._AddToCache('Buzzer', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstBuzzer',
                    value: function FirstBuzzer() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Buzzer');
                        if (next_hwid == null) return null;
                        return YBuzzer.FindBuzzer(next_hwid);
                    }
                }, {
                    key: 'FirstBuzzerInContext',
                    value: function FirstBuzzerInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Buzzer');
                        if (next_hwid == null) return null;
                        return YBuzzer.FindBuzzerInContext(yctx, next_hwid);
                    }
                }]);

                return YBuzzer;
            })(YFunction);

            _export('YBuzzer', YBuzzer);
        }
    };
});
System.register('yoctolib-es/yocto_carbondioxide.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_ABCPERIOD_INVALID, Y_COMMAND_INVALID, YCarbonDioxide;

    function yFindCarbonDioxide(func) {
        return YCarbonDioxide.FindCarbonDioxide(func);
    }

    function yFirstCarbonDioxide() {
        return YCarbonDioxide.FirstCarbonDioxide();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindCarbonDioxide', yFindCarbonDioxide);

            _export('yFirstCarbonDioxide', yFirstCarbonDioxide);

            Y_ABCPERIOD_INVALID = YAPI.INVALID_INT;

            _export('Y_ABCPERIOD_INVALID', Y_ABCPERIOD_INVALID);

            Y_COMMAND_INVALID = YAPI.INVALID_STRING;

            _export('Y_COMMAND_INVALID', Y_COMMAND_INVALID);

            YCarbonDioxide = (function (_YSensor) {
                _inherits(YCarbonDioxide, _YSensor);

                function YCarbonDioxide(obj_yapi, str_func) {
                    _classCallCheck(this, YCarbonDioxide);

                    _get(Object.getPrototypeOf(YCarbonDioxide.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'CarbonDioxide';

                    this._abcPeriod = Y_ABCPERIOD_INVALID;

                    this._command = Y_COMMAND_INVALID;
                    this.imm_setConst({
                        ABCPERIOD_INVALID: YAPI.INVALID_INT,
                        COMMAND_INVALID: YAPI.INVALID_STRING
                    });
                }

                _createClass(YCarbonDioxide, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'abcPeriod':
                                this._abcPeriod = parseInt(val);
                                return 1;
                            case 'command':
                                this._command = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YCarbonDioxide.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_abcPeriod',
                    value: function get_abcPeriod() {
                        return _regeneratorRuntime.async(function get_abcPeriod$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ABCPERIOD_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._abcPeriod);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_abcPeriod',
                    value: function set_abcPeriod(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_abcPeriod$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('abcPeriod', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_command',
                    value: function get_command() {
                        return _regeneratorRuntime.async(function get_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COMMAND_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._command);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_command',
                    value: function set_command(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('command', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'triggetBaselineCalibration',
                    value: function triggetBaselineCalibration() {
                        return _regeneratorRuntime.async(function triggetBaselineCalibration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command('BC'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'triggetZeroCalibration',
                    value: function triggetZeroCalibration() {
                        return _regeneratorRuntime.async(function triggetZeroCalibration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command('ZC'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextCarbonDioxide',
                    value: function nextCarbonDioxide() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YCarbonDioxide.FindCarbonDioxideInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindCarbonDioxide',
                    value: function FindCarbonDioxide(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('CarbonDioxide', func);
                        if (obj == null) {
                            obj = new YCarbonDioxide(YAPI, func);
                            YFunction._AddToCache('CarbonDioxide', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindCarbonDioxideInContext',
                    value: function FindCarbonDioxideInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'CarbonDioxide', func);
                        if (obj == null) {
                            obj = new YCarbonDioxide(yctx, func);
                            YFunction._AddToCache('CarbonDioxide', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstCarbonDioxide',
                    value: function FirstCarbonDioxide() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('CarbonDioxide');
                        if (next_hwid == null) return null;
                        return YCarbonDioxide.FindCarbonDioxide(next_hwid);
                    }
                }, {
                    key: 'FirstCarbonDioxideInContext',
                    value: function FirstCarbonDioxideInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('CarbonDioxide');
                        if (next_hwid == null) return null;
                        return YCarbonDioxide.FindCarbonDioxideInContext(yctx, next_hwid);
                    }
                }]);

                return YCarbonDioxide;
            })(YSensor);

            _export('YCarbonDioxide', YCarbonDioxide);
        }
    };
});
System.register('yoctolib-es/yocto_cellular.js', ['npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _createClass, _classCallCheck, _get, _inherits, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, YCellRecord, Y_ENABLEDATA_HOMENETWORK, Y_ENABLEDATA_ROAMING, Y_ENABLEDATA_NEVER, Y_ENABLEDATA_INVALID, Y_LINKQUALITY_INVALID, Y_CELLOPERATOR_INVALID, Y_CELLIDENTIFIER_INVALID, Y_IMSI_INVALID, Y_MESSAGE_INVALID, Y_PIN_INVALID, Y_LOCKEDOPERATOR_INVALID, Y_APN_INVALID, Y_APNSECRET_INVALID, Y_COMMAND_INVALID, YCellular;

    function yFindCellular(func) {
        return YCellular.FindCellular(func);
    }

    function yFirstCellular() {
        return YCellular.FirstCellular();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {
            'use strict';

            _export('yFindCellular', yFindCellular);

            _export('yFirstCellular', yFirstCellular);

            YCellRecord = (function () {
                function YCellRecord(int_mcc, int_mnc, int_lac, int_cellId, int_dbm, int_tad, str_oper) {
                    _classCallCheck(this, YCellRecord);

                    this._oper = '';

                    this._mcc = 0;

                    this._mnc = 0;

                    this._lac = 0;

                    this._cid = 0;

                    this._dbm = 0;

                    this._tad = 0;

                    this._oper = str_oper;
                    this._mcc = int_mcc;
                    this._mnc = int_mnc;
                    this._lac = int_lac;
                    this._cid = int_cellId;
                    this._dbm = int_dbm;
                    this._tad = int_tad;
                }

                _createClass(YCellRecord, [{
                    key: 'get_cellOperator',
                    value: function get_cellOperator() {
                        return this._oper;
                    }
                }, {
                    key: 'get_mobileCountryCode',
                    value: function get_mobileCountryCode() {
                        return this._mcc;
                    }
                }, {
                    key: 'get_mobileNetworkCode',
                    value: function get_mobileNetworkCode() {
                        return this._mnc;
                    }
                }, {
                    key: 'get_locationAreaCode',
                    value: function get_locationAreaCode() {
                        return this._lac;
                    }
                }, {
                    key: 'get_cellId',
                    value: function get_cellId() {
                        return this._cid;
                    }
                }, {
                    key: 'get_signalStrength',
                    value: function get_signalStrength() {
                        return this._dbm;
                    }
                }, {
                    key: 'get_timingAdvance',
                    value: function get_timingAdvance() {
                        return this._tad;
                    }
                }]);

                return YCellRecord;
            })();

            _export('YCellRecord', YCellRecord);

            Y_ENABLEDATA_HOMENETWORK = 0;

            _export('Y_ENABLEDATA_HOMENETWORK', Y_ENABLEDATA_HOMENETWORK);

            Y_ENABLEDATA_ROAMING = 1;

            _export('Y_ENABLEDATA_ROAMING', Y_ENABLEDATA_ROAMING);

            Y_ENABLEDATA_NEVER = 2;

            _export('Y_ENABLEDATA_NEVER', Y_ENABLEDATA_NEVER);

            Y_ENABLEDATA_INVALID = -1;

            _export('Y_ENABLEDATA_INVALID', Y_ENABLEDATA_INVALID);

            Y_LINKQUALITY_INVALID = YAPI.INVALID_UINT;

            _export('Y_LINKQUALITY_INVALID', Y_LINKQUALITY_INVALID);

            Y_CELLOPERATOR_INVALID = YAPI.INVALID_STRING;

            _export('Y_CELLOPERATOR_INVALID', Y_CELLOPERATOR_INVALID);

            Y_CELLIDENTIFIER_INVALID = YAPI.INVALID_STRING;

            _export('Y_CELLIDENTIFIER_INVALID', Y_CELLIDENTIFIER_INVALID);

            Y_IMSI_INVALID = YAPI.INVALID_STRING;

            _export('Y_IMSI_INVALID', Y_IMSI_INVALID);

            Y_MESSAGE_INVALID = YAPI.INVALID_STRING;

            _export('Y_MESSAGE_INVALID', Y_MESSAGE_INVALID);

            Y_PIN_INVALID = YAPI.INVALID_STRING;

            _export('Y_PIN_INVALID', Y_PIN_INVALID);

            Y_LOCKEDOPERATOR_INVALID = YAPI.INVALID_STRING;

            _export('Y_LOCKEDOPERATOR_INVALID', Y_LOCKEDOPERATOR_INVALID);

            Y_APN_INVALID = YAPI.INVALID_STRING;

            _export('Y_APN_INVALID', Y_APN_INVALID);

            Y_APNSECRET_INVALID = YAPI.INVALID_STRING;

            _export('Y_APNSECRET_INVALID', Y_APNSECRET_INVALID);

            Y_COMMAND_INVALID = YAPI.INVALID_STRING;

            _export('Y_COMMAND_INVALID', Y_COMMAND_INVALID);

            YCellular = (function (_YFunction) {
                _inherits(YCellular, _YFunction);

                function YCellular(str_func) {
                    _classCallCheck(this, YCellular);

                    _get(Object.getPrototypeOf(YCellular.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Cellular';

                    this._linkQuality = Y_LINKQUALITY_INVALID;

                    this._cellOperator = Y_CELLOPERATOR_INVALID;

                    this._cellIdentifier = Y_CELLIDENTIFIER_INVALID;

                    this._imsi = Y_IMSI_INVALID;

                    this._message = Y_MESSAGE_INVALID;

                    this._pin = Y_PIN_INVALID;

                    this._lockedOperator = Y_LOCKEDOPERATOR_INVALID;

                    this._enableData = Y_ENABLEDATA_INVALID;

                    this._apn = Y_APN_INVALID;

                    this._apnSecret = Y_APNSECRET_INVALID;

                    this._command = Y_COMMAND_INVALID;
                    this.imm_setConst({
                        LINKQUALITY_INVALID: YAPI.INVALID_UINT,
                        CELLOPERATOR_INVALID: YAPI.INVALID_STRING,
                        CELLIDENTIFIER_INVALID: YAPI.INVALID_STRING,
                        IMSI_INVALID: YAPI.INVALID_STRING,
                        MESSAGE_INVALID: YAPI.INVALID_STRING,
                        PIN_INVALID: YAPI.INVALID_STRING,
                        LOCKEDOPERATOR_INVALID: YAPI.INVALID_STRING,
                        ENABLEDATA_HOMENETWORK: 0,
                        ENABLEDATA_ROAMING: 1,
                        ENABLEDATA_NEVER: 2,
                        ENABLEDATA_INVALID: -1,
                        APN_INVALID: YAPI.INVALID_STRING,
                        APNSECRET_INVALID: YAPI.INVALID_STRING,
                        COMMAND_INVALID: YAPI.INVALID_STRING
                    });
                }

                _createClass(YCellular, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'linkQuality':
                                this._linkQuality = parseInt(val);
                                return 1;
                            case 'cellOperator':
                                this._cellOperator = val;
                                return 1;
                            case 'cellIdentifier':
                                this._cellIdentifier = val;
                                return 1;
                            case 'imsi':
                                this._imsi = val;
                                return 1;
                            case 'message':
                                this._message = val;
                                return 1;
                            case 'pin':
                                this._pin = val;
                                return 1;
                            case 'lockedOperator':
                                this._lockedOperator = val;
                                return 1;
                            case 'enableData':
                                this._enableData = parseInt(val);
                                return 1;
                            case 'apn':
                                this._apn = val;
                                return 1;
                            case 'apnSecret':
                                this._apnSecret = val;
                                return 1;
                            case 'command':
                                this._command = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YCellular.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_linkQuality',
                    value: function get_linkQuality() {
                        return _regeneratorRuntime.async(function get_linkQuality$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LINKQUALITY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._linkQuality);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_cellOperator',
                    value: function get_cellOperator() {
                        return _regeneratorRuntime.async(function get_cellOperator$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CELLOPERATOR_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._cellOperator);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_cellIdentifier',
                    value: function get_cellIdentifier() {
                        return _regeneratorRuntime.async(function get_cellIdentifier$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CELLIDENTIFIER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._cellIdentifier);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_imsi',
                    value: function get_imsi() {
                        return _regeneratorRuntime.async(function get_imsi$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_IMSI_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._imsi);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_message',
                    value: function get_message() {
                        return _regeneratorRuntime.async(function get_message$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MESSAGE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._message);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_pin',
                    value: function get_pin() {
                        return _regeneratorRuntime.async(function get_pin$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PIN_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._pin);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_pin',
                    value: function set_pin(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_pin$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('pin', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_lockedOperator',
                    value: function get_lockedOperator() {
                        return _regeneratorRuntime.async(function get_lockedOperator$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LOCKEDOPERATOR_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._lockedOperator);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_lockedOperator',
                    value: function set_lockedOperator(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_lockedOperator$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('lockedOperator', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_enableData',
                    value: function get_enableData() {
                        return _regeneratorRuntime.async(function get_enableData$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ENABLEDATA_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._enableData);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_enableData',
                    value: function set_enableData(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_enableData$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('enableData', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_apn',
                    value: function get_apn() {
                        return _regeneratorRuntime.async(function get_apn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_APN_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._apn);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_apn',
                    value: function set_apn(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_apn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('apn', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_apnSecret',
                    value: function get_apnSecret() {
                        return _regeneratorRuntime.async(function get_apnSecret$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_APNSECRET_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._apnSecret);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_apnSecret',
                    value: function set_apnSecret(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_apnSecret$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('apnSecret', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_command',
                    value: function get_command() {
                        return _regeneratorRuntime.async(function get_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COMMAND_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._command);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_command',
                    value: function set_command(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('command', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'sendPUK',
                    value: function sendPUK(puk, newPin) {
                        var gsmMsg;
                        return _regeneratorRuntime.async(function sendPUK$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    gsmMsg = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.get_message());

                                case 3:
                                    gsmMsg = context$2$0.sent;

                                    if (gsmMsg == 'Enter SIM PUK') {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'PUK not expected at this time', YAPI_INVALID_ARGUMENT));

                                case 6:
                                    if (!(newPin == '')) {
                                        context$2$0.next = 10;
                                        break;
                                    }

                                    context$2$0.next = 9;
                                    return _regeneratorRuntime.awrap(this.set_command('AT+CPIN=' + puk + ',0000;+CLCK=SC,0,0000'));

                                case 9:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 10:
                                    context$2$0.next = 12;
                                    return _regeneratorRuntime.awrap(this.set_command('AT+CPIN=' + puk + ',' + newPin));

                                case 12:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 13:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_apnAuth',
                    value: function set_apnAuth(username, password) {
                        return _regeneratorRuntime.async(function set_apnAuth$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_apnSecret(username + ',' + password));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_AT',
                    value: function _AT(cmd) {
                        var chrPos, cmdLen, waitMore, res, buff, bufflen, buffstr, buffstrlen, idx, suffixlen;
                        return _regeneratorRuntime.async(function _AT$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    chrPos = undefined;
                                    cmdLen = undefined;
                                    waitMore = undefined;
                                    res = undefined;
                                    buff = undefined;
                                    bufflen = undefined;
                                    buffstr = undefined;
                                    buffstrlen = undefined;
                                    idx = undefined;
                                    suffixlen = undefined;

                                    cmdLen = cmd.length;
                                    chrPos = cmd.indexOf('#');
                                    while (chrPos >= 0) {
                                        cmd = cmd.substr(0, chrPos) + '' + String.fromCharCode(37) + '23' + cmd.substr(chrPos + 1, cmdLen - chrPos - 1);
                                        cmdLen = cmdLen + 2;
                                        chrPos = cmd.indexOf('#');
                                    }
                                    chrPos = cmd.indexOf('+');
                                    while (chrPos >= 0) {
                                        cmd = cmd.substr(0, chrPos) + '' + String.fromCharCode(37) + '2B' + cmd.substr(chrPos + 1, cmdLen - chrPos - 1);
                                        cmdLen = cmdLen + 2;
                                        chrPos = cmd.indexOf('+');
                                    }
                                    chrPos = cmd.indexOf('=');
                                    while (chrPos >= 0) {
                                        cmd = cmd.substr(0, chrPos) + '' + String.fromCharCode(37) + '3D' + cmd.substr(chrPos + 1, cmdLen - chrPos - 1);
                                        cmdLen = cmdLen + 2;
                                        chrPos = cmd.indexOf('=');
                                    }
                                    cmd = 'at.txt?cmd=' + cmd;
                                    res = '';

                                    waitMore = 24;

                                case 20:
                                    if (!(waitMore > 0)) {
                                        context$2$0.next = 33;
                                        break;
                                    }

                                    context$2$0.next = 23;
                                    return _regeneratorRuntime.awrap(this._download(cmd));

                                case 23:
                                    buff = context$2$0.sent;

                                    bufflen = buff.length;
                                    buffstr = this._yapi.imm_bin2str(buff);
                                    buffstrlen = buffstr.length;
                                    idx = bufflen - 1;
                                    while (idx > 0 && buff[idx] != 64 && buff[idx] != 10 && buff[idx] != 13) {
                                        idx = idx - 1;
                                    }
                                    if (buff[idx] == 64) {
                                        suffixlen = bufflen - idx;
                                        cmd = 'at.txt?cmd=' + buffstr.substr(buffstrlen - suffixlen, suffixlen);
                                        buffstr = buffstr.substr(0, buffstrlen - suffixlen);
                                        waitMore = waitMore - 1;
                                    } else {
                                        waitMore = 0;
                                    }
                                    res = res + '' + buffstr;
                                    context$2$0.next = 20;
                                    break;

                                case 33:
                                    return context$2$0.abrupt('return', res);

                                case 34:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_availableOperators',
                    value: function get_availableOperators() {
                        var cops, idx, slen, res;
                        return _regeneratorRuntime.async(function get_availableOperators$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    cops = undefined;
                                    idx = undefined;
                                    slen = undefined;
                                    res = [];
                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this._AT('+COPS=?'));

                                case 6:
                                    cops = context$2$0.sent;

                                    slen = cops.length;
                                    res.length = 0;
                                    idx = cops.indexOf('(');
                                    while (idx >= 0) {
                                        slen = slen - (idx + 1);
                                        cops = cops.substr(idx + 1, slen);
                                        idx = cops.indexOf('"');
                                        if (idx > 0) {
                                            slen = slen - (idx + 1);
                                            cops = cops.substr(idx + 1, slen);
                                            idx = cops.indexOf('"');
                                            if (idx > 0) {
                                                res.push(cops.substr(0, idx));
                                            }
                                        }
                                        idx = cops.indexOf('(');
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 12:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'quickCellSurvey',
                    value: function quickCellSurvey() {
                        var moni, recs, llen, mccs, mcc, mncs, mnc, lac, cellId, dbms, dbm, tads, tad, oper, res, ii;
                        return _regeneratorRuntime.async(function quickCellSurvey$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    moni = undefined;
                                    recs = [];
                                    llen = undefined;
                                    mccs = undefined;
                                    mcc = undefined;
                                    mncs = undefined;
                                    mnc = undefined;
                                    lac = undefined;
                                    cellId = undefined;
                                    dbms = undefined;
                                    dbm = undefined;
                                    tads = undefined;
                                    tad = undefined;
                                    oper = undefined;
                                    res = [];
                                    context$2$0.next = 17;
                                    return _regeneratorRuntime.awrap(this._AT('+CCED=0;#MONI=7;#MONI'));

                                case 17:
                                    moni = context$2$0.sent;

                                    mccs = moni.substr(7, 3);
                                    if (mccs.substr(0, 1) == '0') {
                                        mccs = mccs.substr(1, 2);
                                    }
                                    if (mccs.substr(0, 1) == '0') {
                                        mccs = mccs.substr(1, 1);
                                    }
                                    mcc = this._yapi.imm_atoi(mccs);
                                    mncs = moni.substr(11, 3);
                                    if (mncs.substr(2, 1) == ',') {
                                        mncs = mncs.substr(0, 2);
                                    }
                                    if (mncs.substr(0, 1) == '0') {
                                        mncs = mncs.substr(1, mncs.length - 1);
                                    }
                                    mnc = this._yapi.imm_atoi(mncs);
                                    recs = moni.split('#');

                                    res.length = 0;
                                    for (ii in recs) {
                                        llen = recs[ii].length - 2;
                                        if (llen >= 44) {
                                            if (recs[ii].substr(41, 3) == 'dbm') {
                                                lac = parseInt(recs[ii].substr(16, 4), 16);
                                                cellId = parseInt(recs[ii].substr(23, 4), 16);
                                                dbms = recs[ii].substr(37, 4);
                                                if (dbms.substr(0, 1) == ' ') {
                                                    dbms = dbms.substr(1, 3);
                                                }
                                                dbm = this._yapi.imm_atoi(dbms);
                                                if (llen > 66) {
                                                    tads = recs[ii].substr(54, 2);
                                                    if (tads.substr(0, 1) == ' ') {
                                                        tads = tads.substr(1, 3);
                                                    }
                                                    tad = this._yapi.imm_atoi(tads);
                                                    oper = recs[ii].substr(66, llen - 66);
                                                } else {
                                                    tad = -1;
                                                    oper = '';
                                                }
                                                if (lac < 65535) {
                                                    res.push(new YCellRecord(mcc, mnc, lac, cellId, dbm, tad, oper));
                                                }
                                            }
                                        }
                                        ;;
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 30:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextCellular',
                    value: function nextCellular() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YCellular.FindCellularInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindCellular',
                    value: function FindCellular(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Cellular', func);
                        if (obj == null) {
                            obj = new YCellular(YAPI, func);
                            YFunction._AddToCache('Cellular', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindCellularInContext',
                    value: function FindCellularInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Cellular', func);
                        if (obj == null) {
                            obj = new YCellular(yctx, func);
                            YFunction._AddToCache('Cellular', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstCellular',
                    value: function FirstCellular() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Cellular');
                        if (next_hwid == null) return null;
                        return YCellular.FindCellular(next_hwid);
                    }
                }, {
                    key: 'FirstCellularInContext',
                    value: function FirstCellularInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Cellular');
                        if (next_hwid == null) return null;
                        return YCellular.FindCellularInContext(yctx, next_hwid);
                    }
                }]);

                return YCellular;
            })(YFunction);

            _export('YCellular', YCellular);
        }
    };
});
System.register('yoctolib-es/yocto_colorled.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_RGBCOLOR_INVALID, Y_HSLCOLOR_INVALID, Y_RGBMOVE_INVALID, Y_HSLMOVE_INVALID, Y_RGBCOLORATPOWERON_INVALID, Y_BLINKSEQSIZE_INVALID, Y_BLINKSEQMAXSIZE_INVALID, Y_BLINKSEQSIGNATURE_INVALID, Y_COMMAND_INVALID, YColorLed;

    function yFindColorLed(func) {
        return YColorLed.FindColorLed(func);
    }

    function yFirstColorLed() {
        return YColorLed.FirstColorLed();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindColorLed', yFindColorLed);

            _export('yFirstColorLed', yFirstColorLed);

            Y_RGBCOLOR_INVALID = YAPI.INVALID_UINT;

            _export('Y_RGBCOLOR_INVALID', Y_RGBCOLOR_INVALID);

            Y_HSLCOLOR_INVALID = YAPI.INVALID_UINT;

            _export('Y_HSLCOLOR_INVALID', Y_HSLCOLOR_INVALID);

            Y_RGBMOVE_INVALID = null;

            _export('Y_RGBMOVE_INVALID', Y_RGBMOVE_INVALID);

            Y_HSLMOVE_INVALID = null;

            _export('Y_HSLMOVE_INVALID', Y_HSLMOVE_INVALID);

            Y_RGBCOLORATPOWERON_INVALID = YAPI.INVALID_UINT;

            _export('Y_RGBCOLORATPOWERON_INVALID', Y_RGBCOLORATPOWERON_INVALID);

            Y_BLINKSEQSIZE_INVALID = YAPI.INVALID_UINT;

            _export('Y_BLINKSEQSIZE_INVALID', Y_BLINKSEQSIZE_INVALID);

            Y_BLINKSEQMAXSIZE_INVALID = YAPI.INVALID_UINT;

            _export('Y_BLINKSEQMAXSIZE_INVALID', Y_BLINKSEQMAXSIZE_INVALID);

            Y_BLINKSEQSIGNATURE_INVALID = YAPI.INVALID_UINT;

            _export('Y_BLINKSEQSIGNATURE_INVALID', Y_BLINKSEQSIGNATURE_INVALID);

            Y_COMMAND_INVALID = YAPI.INVALID_STRING;

            _export('Y_COMMAND_INVALID', Y_COMMAND_INVALID);

            YColorLed = (function (_YFunction) {
                _inherits(YColorLed, _YFunction);

                function YColorLed(obj_yapi, str_func) {
                    _classCallCheck(this, YColorLed);

                    _get(Object.getPrototypeOf(YColorLed.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'ColorLed';

                    this._rgbColor = Y_RGBCOLOR_INVALID;

                    this._hslColor = Y_HSLCOLOR_INVALID;

                    this._rgbMove = Y_RGBMOVE_INVALID;

                    this._hslMove = Y_HSLMOVE_INVALID;

                    this._rgbColorAtPowerOn = Y_RGBCOLORATPOWERON_INVALID;

                    this._blinkSeqSize = Y_BLINKSEQSIZE_INVALID;

                    this._blinkSeqMaxSize = Y_BLINKSEQMAXSIZE_INVALID;

                    this._blinkSeqSignature = Y_BLINKSEQSIGNATURE_INVALID;

                    this._command = Y_COMMAND_INVALID;
                    this.imm_setConst({
                        RGBCOLOR_INVALID: YAPI.INVALID_UINT,
                        HSLCOLOR_INVALID: YAPI.INVALID_UINT,
                        RGBCOLORATPOWERON_INVALID: YAPI.INVALID_UINT,
                        BLINKSEQSIZE_INVALID: YAPI.INVALID_UINT,
                        BLINKSEQMAXSIZE_INVALID: YAPI.INVALID_UINT,
                        BLINKSEQSIGNATURE_INVALID: YAPI.INVALID_UINT,
                        COMMAND_INVALID: YAPI.INVALID_STRING
                    });
                }

                _createClass(YColorLed, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'rgbColor':
                                this._rgbColor = parseInt(val);
                                return 1;
                            case 'hslColor':
                                this._hslColor = parseInt(val);
                                return 1;
                            case 'rgbMove':
                                this._rgbMove = val;
                                return 1;
                            case 'hslMove':
                                this._hslMove = val;
                                return 1;
                            case 'rgbColorAtPowerOn':
                                this._rgbColorAtPowerOn = parseInt(val);
                                return 1;
                            case 'blinkSeqSize':
                                this._blinkSeqSize = parseInt(val);
                                return 1;
                            case 'blinkSeqMaxSize':
                                this._blinkSeqMaxSize = parseInt(val);
                                return 1;
                            case 'blinkSeqSignature':
                                this._blinkSeqSignature = parseInt(val);
                                return 1;
                            case 'command':
                                this._command = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YColorLed.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_rgbColor',
                    value: function get_rgbColor() {
                        return _regeneratorRuntime.async(function get_rgbColor$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_RGBCOLOR_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._rgbColor);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_rgbColor',
                    value: function set_rgbColor(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_rgbColor$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = '0x' + newval.toString(16);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('rgbColor', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_hslColor',
                    value: function get_hslColor() {
                        return _regeneratorRuntime.async(function get_hslColor$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_HSLCOLOR_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._hslColor);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_hslColor',
                    value: function set_hslColor(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_hslColor$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = '0x' + newval.toString(16);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('hslColor', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_rgbMove',
                    value: function get_rgbMove() {
                        return _regeneratorRuntime.async(function get_rgbMove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_RGBMOVE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._rgbMove);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_rgbMove',
                    value: function set_rgbMove(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_rgbMove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval.target) + ':' + String(newval.ms);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('rgbMove', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'rgbMove',
                    value: function rgbMove(rgb_target, ms_duration) {
                        var rest_val;
                        return _regeneratorRuntime.async(function rgbMove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(rgb_target) + ':' + String(ms_duration);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('rgbMove', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_hslMove',
                    value: function get_hslMove() {
                        return _regeneratorRuntime.async(function get_hslMove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_HSLMOVE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._hslMove);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_hslMove',
                    value: function set_hslMove(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_hslMove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval.target) + ':' + String(newval.ms);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('hslMove', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'hslMove',
                    value: function hslMove(hsl_target, ms_duration) {
                        var rest_val;
                        return _regeneratorRuntime.async(function hslMove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(hsl_target) + ':' + String(ms_duration);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('hslMove', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_rgbColorAtPowerOn',
                    value: function get_rgbColorAtPowerOn() {
                        return _regeneratorRuntime.async(function get_rgbColorAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_RGBCOLORATPOWERON_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._rgbColorAtPowerOn);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_rgbColorAtPowerOn',
                    value: function set_rgbColorAtPowerOn(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_rgbColorAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = '0x' + newval.toString(16);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('rgbColorAtPowerOn', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_blinkSeqSize',
                    value: function get_blinkSeqSize() {
                        return _regeneratorRuntime.async(function get_blinkSeqSize$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_BLINKSEQSIZE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._blinkSeqSize);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_blinkSeqMaxSize',
                    value: function get_blinkSeqMaxSize() {
                        return _regeneratorRuntime.async(function get_blinkSeqMaxSize$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration == 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_BLINKSEQMAXSIZE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._blinkSeqMaxSize);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_blinkSeqSignature',
                    value: function get_blinkSeqSignature() {
                        return _regeneratorRuntime.async(function get_blinkSeqSignature$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_BLINKSEQSIGNATURE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._blinkSeqSignature);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_command',
                    value: function get_command() {
                        return _regeneratorRuntime.async(function get_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COMMAND_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._command);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_command',
                    value: function set_command(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('command', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'sendCommand',
                    value: function sendCommand(command) {
                        return _regeneratorRuntime.async(function sendCommand$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command(command));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'addHslMoveToBlinkSeq',
                    value: function addHslMoveToBlinkSeq(HSLcolor, msDelay) {
                        return _regeneratorRuntime.async(function addHslMoveToBlinkSeq$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand('H' + String(Math.round(HSLcolor)) + ',' + String(Math.round(msDelay))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'addRgbMoveToBlinkSeq',
                    value: function addRgbMoveToBlinkSeq(RGBcolor, msDelay) {
                        return _regeneratorRuntime.async(function addRgbMoveToBlinkSeq$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand('R' + String(Math.round(RGBcolor)) + ',' + String(Math.round(msDelay))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'startBlinkSeq',
                    value: function startBlinkSeq() {
                        return _regeneratorRuntime.async(function startBlinkSeq$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand('S'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'stopBlinkSeq',
                    value: function stopBlinkSeq() {
                        return _regeneratorRuntime.async(function stopBlinkSeq$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand('X'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'resetBlinkSeq',
                    value: function resetBlinkSeq() {
                        return _regeneratorRuntime.async(function resetBlinkSeq$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand('Z'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextColorLed',
                    value: function nextColorLed() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YColorLed.FindColorLedInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindColorLed',
                    value: function FindColorLed(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('ColorLed', func);
                        if (obj == null) {
                            obj = new YColorLed(YAPI, func);
                            YFunction._AddToCache('ColorLed', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindColorLedInContext',
                    value: function FindColorLedInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'ColorLed', func);
                        if (obj == null) {
                            obj = new YColorLed(yctx, func);
                            YFunction._AddToCache('ColorLed', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstColorLed',
                    value: function FirstColorLed() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('ColorLed');
                        if (next_hwid == null) return null;
                        return YColorLed.FindColorLed(next_hwid);
                    }
                }, {
                    key: 'FirstColorLedInContext',
                    value: function FirstColorLedInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('ColorLed');
                        if (next_hwid == null) return null;
                        return YColorLed.FindColorLedInContext(yctx, next_hwid);
                    }
                }]);

                return YColorLed;
            })(YFunction);

            _export('YColorLed', YColorLed);
        }
    };
});
System.register('yoctolib-es/yocto_compass.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_AXIS_X, Y_AXIS_Y, Y_AXIS_Z, Y_AXIS_INVALID, Y_MAGNETICHEADING_INVALID, YCompass;

    function yFindCompass(func) {
        return YCompass.FindCompass(func);
    }

    function yFirstCompass() {
        return YCompass.FirstCompass();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindCompass', yFindCompass);

            _export('yFirstCompass', yFirstCompass);

            Y_AXIS_X = 0;

            _export('Y_AXIS_X', Y_AXIS_X);

            Y_AXIS_Y = 1;

            _export('Y_AXIS_Y', Y_AXIS_Y);

            Y_AXIS_Z = 2;

            _export('Y_AXIS_Z', Y_AXIS_Z);

            Y_AXIS_INVALID = -1;

            _export('Y_AXIS_INVALID', Y_AXIS_INVALID);

            Y_MAGNETICHEADING_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_MAGNETICHEADING_INVALID', Y_MAGNETICHEADING_INVALID);

            YCompass = (function (_YSensor) {
                _inherits(YCompass, _YSensor);

                function YCompass(obj_yapi, str_func) {
                    _classCallCheck(this, YCompass);

                    _get(Object.getPrototypeOf(YCompass.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Compass';

                    this._axis = Y_AXIS_INVALID;

                    this._magneticHeading = Y_MAGNETICHEADING_INVALID;
                    this.imm_setConst({
                        AXIS_X: 0,
                        AXIS_Y: 1,
                        AXIS_Z: 2,
                        AXIS_INVALID: -1,
                        MAGNETICHEADING_INVALID: YAPI.INVALID_DOUBLE
                    });
                }

                _createClass(YCompass, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'axis':
                                this._axis = parseInt(val);
                                return 1;
                            case 'magneticHeading':
                                this._magneticHeading = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YCompass.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_axis',
                    value: function get_axis() {
                        return _regeneratorRuntime.async(function get_axis$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_AXIS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._axis);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_magneticHeading',
                    value: function get_magneticHeading() {
                        return _regeneratorRuntime.async(function get_magneticHeading$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MAGNETICHEADING_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._magneticHeading);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextCompass',
                    value: function nextCompass() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YCompass.FindCompassInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindCompass',
                    value: function FindCompass(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Compass', func);
                        if (obj == null) {
                            obj = new YCompass(YAPI, func);
                            YFunction._AddToCache('Compass', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindCompassInContext',
                    value: function FindCompassInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Compass', func);
                        if (obj == null) {
                            obj = new YCompass(yctx, func);
                            YFunction._AddToCache('Compass', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstCompass',
                    value: function FirstCompass() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Compass');
                        if (next_hwid == null) return null;
                        return YCompass.FindCompass(next_hwid);
                    }
                }, {
                    key: 'FirstCompassInContext',
                    value: function FirstCompassInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Compass');
                        if (next_hwid == null) return null;
                        return YCompass.FindCompassInContext(yctx, next_hwid);
                    }
                }]);

                return YCompass;
            })(YSensor);

            _export('YCompass', YCompass);
        }
    };
});
System.register('yoctolib-es/yocto_current.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, YCurrent;

    function yFindCurrent(func) {
        return YCurrent.FindCurrent(func);
    }

    function yFirstCurrent() {
        return YCurrent.FirstCurrent();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindCurrent', yFindCurrent);

            _export('yFirstCurrent', yFirstCurrent);

            YCurrent = (function (_YSensor) {
                _inherits(YCurrent, _YSensor);

                function YCurrent(obj_yapi, str_func) {
                    _classCallCheck(this, YCurrent);

                    _get(Object.getPrototypeOf(YCurrent.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Current';
                }

                _createClass(YCurrent, [{
                    key: 'nextCurrent',
                    value: function nextCurrent() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YCurrent.FindCurrentInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindCurrent',
                    value: function FindCurrent(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Current', func);
                        if (obj == null) {
                            obj = new YCurrent(YAPI, func);
                            YFunction._AddToCache('Current', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindCurrentInContext',
                    value: function FindCurrentInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Current', func);
                        if (obj == null) {
                            obj = new YCurrent(yctx, func);
                            YFunction._AddToCache('Current', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstCurrent',
                    value: function FirstCurrent() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Current');
                        if (next_hwid == null) return null;
                        return YCurrent.FindCurrent(next_hwid);
                    }
                }, {
                    key: 'FirstCurrentInContext',
                    value: function FirstCurrentInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Current');
                        if (next_hwid == null) return null;
                        return YCurrent.FindCurrentInContext(yctx, next_hwid);
                    }
                }]);

                return YCurrent;
            })(YSensor);

            _export('YCurrent', YCurrent);
        }
    };
});
System.register('yoctolib-es/yocto_currentloopoutput.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_LOOPPOWER_NOPWR, Y_LOOPPOWER_LOWPWR, Y_LOOPPOWER_POWEROK, Y_LOOPPOWER_INVALID, Y_CURRENT_INVALID, Y_CURRENTTRANSITION_INVALID, Y_CURRENTATSTARTUP_INVALID, YCurrentLoopOutput;

    function yFindCurrentLoopOutput(func) {
        return YCurrentLoopOutput.FindCurrentLoopOutput(func);
    }

    function yFirstCurrentLoopOutput() {
        return YCurrentLoopOutput.FirstCurrentLoopOutput();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindCurrentLoopOutput', yFindCurrentLoopOutput);

            _export('yFirstCurrentLoopOutput', yFirstCurrentLoopOutput);

            Y_LOOPPOWER_NOPWR = 0;

            _export('Y_LOOPPOWER_NOPWR', Y_LOOPPOWER_NOPWR);

            Y_LOOPPOWER_LOWPWR = 1;

            _export('Y_LOOPPOWER_LOWPWR', Y_LOOPPOWER_LOWPWR);

            Y_LOOPPOWER_POWEROK = 2;

            _export('Y_LOOPPOWER_POWEROK', Y_LOOPPOWER_POWEROK);

            Y_LOOPPOWER_INVALID = -1;

            _export('Y_LOOPPOWER_INVALID', Y_LOOPPOWER_INVALID);

            Y_CURRENT_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_CURRENT_INVALID', Y_CURRENT_INVALID);

            Y_CURRENTTRANSITION_INVALID = YAPI.INVALID_STRING;

            _export('Y_CURRENTTRANSITION_INVALID', Y_CURRENTTRANSITION_INVALID);

            Y_CURRENTATSTARTUP_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_CURRENTATSTARTUP_INVALID', Y_CURRENTATSTARTUP_INVALID);

            YCurrentLoopOutput = (function (_YFunction) {
                _inherits(YCurrentLoopOutput, _YFunction);

                function YCurrentLoopOutput(obj_yapi, str_func) {
                    _classCallCheck(this, YCurrentLoopOutput);

                    _get(Object.getPrototypeOf(YCurrentLoopOutput.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'CurrentLoopOutput';

                    this._current = Y_CURRENT_INVALID;

                    this._currentTransition = Y_CURRENTTRANSITION_INVALID;

                    this._currentAtStartUp = Y_CURRENTATSTARTUP_INVALID;

                    this._loopPower = Y_LOOPPOWER_INVALID;
                    this.imm_setConst({
                        CURRENT_INVALID: YAPI.INVALID_DOUBLE,
                        CURRENTTRANSITION_INVALID: YAPI.INVALID_STRING,
                        CURRENTATSTARTUP_INVALID: YAPI.INVALID_DOUBLE,
                        LOOPPOWER_NOPWR: 0,
                        LOOPPOWER_LOWPWR: 1,
                        LOOPPOWER_POWEROK: 2,
                        LOOPPOWER_INVALID: -1
                    });
                }

                _createClass(YCurrentLoopOutput, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'current':
                                this._current = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'currentTransition':
                                this._currentTransition = val;
                                return 1;
                            case 'currentAtStartUp':
                                this._currentAtStartUp = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'loopPower':
                                this._loopPower = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YCurrentLoopOutput.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'set_current',
                    value: function set_current(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_current$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('current', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_current',
                    value: function get_current() {
                        return _regeneratorRuntime.async(function get_current$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CURRENT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._current);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_currentTransition',
                    value: function get_currentTransition() {
                        return _regeneratorRuntime.async(function get_currentTransition$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CURRENTTRANSITION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._currentTransition);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_currentTransition',
                    value: function set_currentTransition(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_currentTransition$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('currentTransition', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_currentAtStartUp',
                    value: function set_currentAtStartUp(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_currentAtStartUp$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('currentAtStartUp', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_currentAtStartUp',
                    value: function get_currentAtStartUp() {
                        return _regeneratorRuntime.async(function get_currentAtStartUp$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CURRENTATSTARTUP_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._currentAtStartUp);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_loopPower',
                    value: function get_loopPower() {
                        return _regeneratorRuntime.async(function get_loopPower$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LOOPPOWER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._loopPower);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'currentMove',
                    value: function currentMove(mA_target, ms_duration) {
                        var newval;
                        return _regeneratorRuntime.async(function currentMove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    newval = undefined;

                                    if (mA_target < 3.0) {
                                        mA_target = 3.0;
                                    }
                                    if (mA_target > 21.0) {
                                        mA_target = 21.0;
                                    }
                                    newval = String(Math.round(Math.round(mA_target * 1000))) + ':' + String(Math.round(ms_duration));
                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this.set_currentTransition(newval));

                                case 6:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextCurrentLoopOutput',
                    value: function nextCurrentLoopOutput() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YCurrentLoopOutput.FindCurrentLoopOutputInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindCurrentLoopOutput',
                    value: function FindCurrentLoopOutput(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('CurrentLoopOutput', func);
                        if (obj == null) {
                            obj = new YCurrentLoopOutput(YAPI, func);
                            YFunction._AddToCache('CurrentLoopOutput', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindCurrentLoopOutputInContext',
                    value: function FindCurrentLoopOutputInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'CurrentLoopOutput', func);
                        if (obj == null) {
                            obj = new YCurrentLoopOutput(yctx, func);
                            YFunction._AddToCache('CurrentLoopOutput', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstCurrentLoopOutput',
                    value: function FirstCurrentLoopOutput() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('CurrentLoopOutput');
                        if (next_hwid == null) return null;
                        return YCurrentLoopOutput.FindCurrentLoopOutput(next_hwid);
                    }
                }, {
                    key: 'FirstCurrentLoopOutputInContext',
                    value: function FirstCurrentLoopOutputInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('CurrentLoopOutput');
                        if (next_hwid == null) return null;
                        return YCurrentLoopOutput.FindCurrentLoopOutputInContext(yctx, next_hwid);
                    }
                }]);

                return YCurrentLoopOutput;
            })(YFunction);

            _export('YCurrentLoopOutput', YCurrentLoopOutput);
        }
    };
});
System.register('yoctolib-es/yocto_datalogger.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_RECORDING_OFF, Y_RECORDING_ON, Y_RECORDING_PENDING, Y_RECORDING_INVALID, Y_AUTOSTART_OFF, Y_AUTOSTART_ON, Y_AUTOSTART_INVALID, Y_BEACONDRIVEN_OFF, Y_BEACONDRIVEN_ON, Y_BEACONDRIVEN_INVALID, Y_CLEARHISTORY_FALSE, Y_CLEARHISTORY_TRUE, Y_CLEARHISTORY_INVALID, Y_CURRENTRUNINDEX_INVALID, Y_TIMEUTC_INVALID, Y_DATA_INVALID, Y_MINVALUE_INVALID, Y_AVERAGEVALUE_INVALID, Y_MAXVALUE_INVALID, YOldDataStream, YDataLogger;

    function yFindDataLogger(func) {
        return YDataLogger.FindDataLogger(func);
    }

    function yFirstDataLogger() {
        return YDataLogger.FirstDataLogger();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {
            'use strict';

            _export('yFindDataLogger', yFindDataLogger);

            _export('yFirstDataLogger', yFirstDataLogger);

            Y_RECORDING_OFF = 0;

            _export('Y_RECORDING_OFF', Y_RECORDING_OFF);

            Y_RECORDING_ON = 1;

            _export('Y_RECORDING_ON', Y_RECORDING_ON);

            Y_RECORDING_PENDING = 2;

            _export('Y_RECORDING_PENDING', Y_RECORDING_PENDING);

            Y_RECORDING_INVALID = -1;

            _export('Y_RECORDING_INVALID', Y_RECORDING_INVALID);

            Y_AUTOSTART_OFF = 0;

            _export('Y_AUTOSTART_OFF', Y_AUTOSTART_OFF);

            Y_AUTOSTART_ON = 1;

            _export('Y_AUTOSTART_ON', Y_AUTOSTART_ON);

            Y_AUTOSTART_INVALID = -1;

            _export('Y_AUTOSTART_INVALID', Y_AUTOSTART_INVALID);

            Y_BEACONDRIVEN_OFF = 0;

            _export('Y_BEACONDRIVEN_OFF', Y_BEACONDRIVEN_OFF);

            Y_BEACONDRIVEN_ON = 1;

            _export('Y_BEACONDRIVEN_ON', Y_BEACONDRIVEN_ON);

            Y_BEACONDRIVEN_INVALID = -1;

            _export('Y_BEACONDRIVEN_INVALID', Y_BEACONDRIVEN_INVALID);

            Y_CLEARHISTORY_FALSE = 0;

            _export('Y_CLEARHISTORY_FALSE', Y_CLEARHISTORY_FALSE);

            Y_CLEARHISTORY_TRUE = 1;

            _export('Y_CLEARHISTORY_TRUE', Y_CLEARHISTORY_TRUE);

            Y_CLEARHISTORY_INVALID = -1;

            _export('Y_CLEARHISTORY_INVALID', Y_CLEARHISTORY_INVALID);

            Y_CURRENTRUNINDEX_INVALID = YAPI.INVALID_UINT;

            _export('Y_CURRENTRUNINDEX_INVALID', Y_CURRENTRUNINDEX_INVALID);

            Y_TIMEUTC_INVALID = YAPI.INVALID_LONG;

            _export('Y_TIMEUTC_INVALID', Y_TIMEUTC_INVALID);

            Y_DATA_INVALID = YAPI_INVALID_DOUBLE;

            _export('Y_DATA_INVALID', Y_DATA_INVALID);

            Y_MINVALUE_INVALID = YAPI_INVALID_DOUBLE;

            _export('Y_MINVALUE_INVALID', Y_MINVALUE_INVALID);

            Y_AVERAGEVALUE_INVALID = YAPI_INVALID_DOUBLE;

            _export('Y_AVERAGEVALUE_INVALID', Y_AVERAGEVALUE_INVALID);

            Y_MAXVALUE_INVALID = YAPI_INVALID_DOUBLE;

            _export('Y_MAXVALUE_INVALID', Y_MAXVALUE_INVALID);

            YOldDataStream = (function (_YDataStream) {
                _inherits(YOldDataStream, _YDataStream);

                function YOldDataStream(obj_parent, int_run, int_stamp, int_utc, int_itv) {
                    _classCallCheck(this, YOldDataStream);

                    _get(Object.getPrototypeOf(YOldDataStream.prototype), 'constructor', this).call(this, obj_parent);
                    this._dataLogger = obj_parent;
                    this._runNo = int_run;
                    this._timeStamp = int_stamp;
                    this._utcStamp = int_utc == null ? -1 : int_utc;
                    this._interval = int_itv == null ? 0 : int_itv;
                    this._samplesPerHour = this._interval == 0 ? 3600 : 3600 / this._interval;
                    this._isClosed = 1;
                    this._minVal = this.DATA_INVALID;
                    this._avgVal = this.DATA_INVALID;
                    this._maxVal = this.DATA_INVALID;
                }

                _createClass(YOldDataStream, [{
                    key: 'loadStream',
                    value: function loadStream() {
                        var coldiv, coltyp, colscl, colofs, calhdl, caltyp, calpar, calraw, calref, c, i, loadval, params, data, dat, idx, val;
                        return _regeneratorRuntime.async(function loadStream$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    coldiv = null;
                                    coltyp = null;
                                    colscl = null;
                                    colofs = null;
                                    calhdl = null;
                                    caltyp = null;
                                    calpar = null;
                                    calraw = null;
                                    calref = null;
                                    loadval = this._dataLogger.getData(this._runNo, this._timeStamp);

                                    if (!(loadval == null)) {
                                        context$2$0.next = 12;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._dataLogger.get_errorType());

                                case 12:
                                    if (loadval['time'] != null) this._timeStamp = loadval['time'];
                                    if (loadval['UTC'] != null) this._utcStamp = loadval['UTC'];
                                    if (loadval['interval'] != null) this._interval = loadval['interval'];
                                    if (loadval['nRows'] != null) this._nRows = loadval['nRows'];

                                    if (!(loadval['keys'] != null)) {
                                        context$2$0.next = 25;
                                        break;
                                    }

                                    this._columnNames = loadval['keys'];

                                    if (!(this._nCols == 0)) {
                                        context$2$0.next = 22;
                                        break;
                                    }

                                    this._nCols = this._columnNames.length;
                                    context$2$0.next = 25;
                                    break;

                                case 22:
                                    if (!(this._nCols != this._columnNames.length)) {
                                        context$2$0.next = 25;
                                        break;
                                    }

                                    this._nCols = 0;
                                    return context$2$0.abrupt('return', YAPI_IO_ERROR);

                                case 25:
                                    if (!(loadval['div'] != null)) {
                                        context$2$0.next = 34;
                                        break;
                                    }

                                    coldiv = loadval['div'];

                                    if (!(this._nCols == 0)) {
                                        context$2$0.next = 31;
                                        break;
                                    }

                                    this._nCols = coldiv.length;
                                    context$2$0.next = 34;
                                    break;

                                case 31:
                                    if (!(this._nCols != coldiv.length)) {
                                        context$2$0.next = 34;
                                        break;
                                    }

                                    this._nCols = 0;
                                    return context$2$0.abrupt('return', YAPI_IO_ERROR);

                                case 34:
                                    if (!(loadval['type'] != null)) {
                                        context$2$0.next = 43;
                                        break;
                                    }

                                    coltyp = loadval['type'];

                                    if (!(this._nCols == 0)) {
                                        context$2$0.next = 40;
                                        break;
                                    }

                                    this._nCols = coltyp.length;
                                    context$2$0.next = 43;
                                    break;

                                case 40:
                                    if (!(this._nCols != coltyp.length)) {
                                        context$2$0.next = 43;
                                        break;
                                    }

                                    this._nCols = 0;
                                    return context$2$0.abrupt('return', YAPI_IO_ERROR);

                                case 43:
                                    if (!(loadval['scal'] != null)) {
                                        context$2$0.next = 52;
                                        break;
                                    }

                                    colscl = loadval['scal'];
                                    colofs = [];

                                    if (!(this._nCols != colscl.length)) {
                                        context$2$0.next = 49;
                                        break;
                                    }

                                    this._nCols = 0;
                                    return context$2$0.abrupt('return', YAPI_IO_ERROR);

                                case 49:
                                    for (i = 0; i < colscl.length; i++) {
                                        colscl[i] /= 65536.0;
                                        colofs[i] = coltyp[i] != 0 ? -32767 : 0;
                                    }
                                    context$2$0.next = 55;
                                    break;

                                case 52:
                                    colscl = [];
                                    colofs = [];
                                    for (i = 0; i < coldiv.length; i++) {
                                        colscl[i] = 1.0 / coldiv[i];
                                        colofs[i] = coltyp[i] != 0 ? -32767 : 0;
                                    }

                                case 55:
                                    if (!(loadval['cal'] != null)) {
                                        context$2$0.next = 80;
                                        break;
                                    }

                                    calhdl = new Array(this._nCols);
                                    caltyp = new Array(this._nCols);
                                    calpar = new Array(this._nCols);
                                    calraw = new Array(this._nCols);
                                    calref = new Array(this._nCols);
                                    c = 0;

                                case 62:
                                    if (!(c < this._nCols)) {
                                        context$2$0.next = 80;
                                        break;
                                    }

                                    params = loadval['cal'][c];

                                    if (params) {
                                        context$2$0.next = 66;
                                        break;
                                    }

                                    return context$2$0.abrupt('continue', 77);

                                case 66:
                                    params = params.split(',');

                                    if (!(params.length < 11)) {
                                        context$2$0.next = 69;
                                        break;
                                    }

                                    return context$2$0.abrupt('continue', 77);

                                case 69:
                                    calhdl[c] = YAPI._getCalibrationHandler(params[0]);

                                    if (calhdl[c]) {
                                        context$2$0.next = 72;
                                        break;
                                    }

                                    return context$2$0.abrupt('continue', 77);

                                case 72:
                                    caltyp[c] = parseInt(params[0]);
                                    calpar[c] = new Array(params.length - 1);
                                    calraw[c] = new Array(params.length >> 1);
                                    calref[c] = new Array(params.length >> 1);
                                    for (i = 1; i < params.length; i += 2) {
                                        calpar[c][i - 1] = parseInt(params[i]);
                                        calpar[c][i] = parseInt(params[i + 1]);
                                        if (caltyp[c] <= 10) {
                                            calraw[c][i >> 1] = (calpar[c][i - 1] + colofs[c]) / coldiv[c];
                                            calref[c][i >> 1] = (calpar[c][i] + colofs[c]) / coldiv[c];
                                        } else {
                                            calraw[c][i >> 1] = YAPI._decimalToDouble(calpar[c][i - 1]);
                                            calref[c][i >> 1] = YAPI._decimalToDouble(calpar[c][i]);
                                        }
                                    }

                                case 77:
                                    c++;
                                    context$2$0.next = 62;
                                    break;

                                case 80:
                                    if (!(loadval['data'] != null)) {
                                        context$2$0.next = 89;
                                        break;
                                    }

                                    if (!(this._nCols == 0 || coldiv == null || coltyp == null)) {
                                        context$2$0.next = 83;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_IO_ERROR);

                                case 83:
                                    this._values = [];
                                    data = loadval['data'];

                                    if (typeof data == 'string') {
                                        data = YAPI._decodeWords(data);
                                    }
                                    dat = [];

                                    c = 0;
                                    for (idx in data) {
                                        if (coltyp[c] < 2) {
                                            val = (data[idx] + colofs[c]) * colscl[c];
                                        } else {
                                            val = YAPI._decimalToDouble(data[idx] - 32767);
                                        }
                                        if (calhdl && calhdl[c]) {
                                            if (caltyp[c] <= 10) {
                                                val = calhdl[c]((data[idx] + colofs[c]) / coldiv[c], caltyp[c], calpar[c], calraw[c], calref[c]);
                                            } else if (caltyp[c] > 20) {
                                                val = calhdl[c](val, caltyp[c], calpar[c], calraw[c], calref[c]);
                                            }
                                        }
                                        dat.push(val);
                                        if (++c == this._nCols) {
                                            this._values.push(dat);
                                            dat = [];
                                            c = 0;
                                        }
                                    }

                                case 89:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 90:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_startTime',
                    value: function get_startTime() {
                        return _regeneratorRuntime.async(function get_startTime$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._timeStamp);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_dataSamplesInterval',
                    value: function get_dataSamplesInterval() {
                        return _regeneratorRuntime.async(function get_dataSamplesInterval$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._interval == 0)) {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.loadStream());

                                case 3:
                                    return context$2$0.abrupt('return', this._interval);

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YOldDataStream;
            })(YDataStream);

            _export('YOldDataStream', YOldDataStream);

            YDataLogger = (function (_YFunction) {
                _inherits(YDataLogger, _YFunction);

                function YDataLogger(str_func) {
                    _classCallCheck(this, YDataLogger);

                    _get(Object.getPrototypeOf(YDataLogger.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'DataLogger';

                    this._currentRunIndex = Y_CURRENTRUNINDEX_INVALID;

                    this._timeUTC = Y_TIMEUTC_INVALID;

                    this._recording = Y_RECORDING_INVALID;

                    this._autoStart = Y_AUTOSTART_INVALID;

                    this._beaconDriven = Y_BEACONDRIVEN_INVALID;

                    this._clearHistory = Y_CLEARHISTORY_INVALID;
                    this.imm_setConst({
                        CURRENTRUNINDEX_INVALID: YAPI.INVALID_UINT,
                        TIMEUTC_INVALID: YAPI.INVALID_LONG,
                        RECORDING_OFF: 0,
                        RECORDING_ON: 1,
                        RECORDING_PENDING: 2,
                        RECORDING_INVALID: -1,
                        AUTOSTART_OFF: 0,
                        AUTOSTART_ON: 1,
                        AUTOSTART_INVALID: -1,
                        BEACONDRIVEN_OFF: 0,
                        BEACONDRIVEN_ON: 1,
                        BEACONDRIVEN_INVALID: -1,
                        CLEARHISTORY_FALSE: 0,
                        CLEARHISTORY_TRUE: 1,
                        CLEARHISTORY_INVALID: -1
                    });

                    this['const']({ DATA_INVALID: -Number.MAX_VALUE });
                }

                _createClass(YDataLogger, [{
                    key: 'getData',
                    value: function getData(runIdx, timeIdx) {
                        var loadval, devid, httpreq, yreq;
                        return _regeneratorRuntime.async(function getData$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:

                                    if (this.dataLoggerURL == undefined) {
                                        this.dataLoggerURL = '/logger.json';
                                    }

                                    devid = this.module().get_serialNumber();

                                    if (!(devid == Y_SERIALNUMBER_INVALID)) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', null);

                                case 4:
                                    httpreq = 'GET ' + this.dataLoggerURL;

                                    if (timeIdx) {
                                        httpreq += '?run=' + runIdx + '&time=' + timeIdx;
                                    }
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(YAPI.devRequest(devid, httpreq));

                                case 8:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 16;
                                        break;
                                    }

                                    if (!(yreq.errorMsg.indexOf('HTTP status 404') >= 0 && this.dataLoggerURL != '/dataLogger.json')) {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    this.dataLoggerURL = '/dataLogger.json';
                                    context$2$0.next = 14;
                                    return _regeneratorRuntime.awrap(this.getData(runIdx, timeIdx));

                                case 14:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 15:
                                    return context$2$0.abrupt('return', this._throw(yreq.errorType, yreq.errorMsg, null));

                                case 16:
                                    return context$2$0.abrupt('return', JSON.parse(yreq.result, true));

                                case 17:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_dataStreams',
                    value: function get_dataStreams(v) {
                        var loadval, idx, arr, sets, i, ds, si;
                        return _regeneratorRuntime.async(function get_dataStreams$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.getData(null, null));

                                case 2:
                                    loadval = context$2$0.sent;

                                    if (!(loadval == null)) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this.get_errorType());

                                case 5:
                                    if (!(loadval.length == 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 7:
                                    if (!Array.isArray(loadval[0])) {
                                        context$2$0.next = 20;
                                        break;
                                    }

                                    context$2$0.t0 = _regeneratorRuntime.keys(loadval);

                                case 9:
                                    if ((context$2$0.t1 = context$2$0.t0()).done) {
                                        context$2$0.next = 18;
                                        break;
                                    }

                                    idx = context$2$0.t1.value;
                                    arr = loadval[idx];

                                    if (!(arr.length < 4)) {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    _throw(YAPI_IO_ERROR, 'Unexpected JSON reply format');
                                    return context$2$0.abrupt('return', YAPI_IO_ERROR);

                                case 15:
                                    v.push(new YOldDataStream(this, arr[0], arr[1], arr[2], arr[3]));
                                    context$2$0.next = 9;
                                    break;

                                case 18:
                                    context$2$0.next = 22;
                                    break;

                                case 20:
                                    sets = this.parse_dataSets(JSON.stringify(loadval));

                                    for (i = 0; i < sets.length; i++) {
                                        ds = sets[i].get_privateDataStreams();

                                        for (si = 0; si < ds.length; si++) {
                                            v.push(ds[si]);
                                        }
                                    }

                                case 22:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 23:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'currentRunIndex':
                                this._currentRunIndex = parseInt(val);
                                return 1;
                            case 'timeUTC':
                                this._timeUTC = parseInt(val);
                                return 1;
                            case 'recording':
                                this._recording = parseInt(val);
                                return 1;
                            case 'autoStart':
                                this._autoStart = parseInt(val);
                                return 1;
                            case 'beaconDriven':
                                this._beaconDriven = parseInt(val);
                                return 1;
                            case 'clearHistory':
                                this._clearHistory = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YDataLogger.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_currentRunIndex',
                    value: function get_currentRunIndex() {
                        return _regeneratorRuntime.async(function get_currentRunIndex$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CURRENTRUNINDEX_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._currentRunIndex);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_timeUTC',
                    value: function get_timeUTC() {
                        return _regeneratorRuntime.async(function get_timeUTC$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_TIMEUTC_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._timeUTC);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_timeUTC',
                    value: function set_timeUTC(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_timeUTC$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('timeUTC', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_recording',
                    value: function get_recording() {
                        return _regeneratorRuntime.async(function get_recording$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_RECORDING_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._recording);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_recording',
                    value: function set_recording(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_recording$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('recording', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_autoStart',
                    value: function get_autoStart() {
                        return _regeneratorRuntime.async(function get_autoStart$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_AUTOSTART_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._autoStart);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_autoStart',
                    value: function set_autoStart(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_autoStart$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('autoStart', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_beaconDriven',
                    value: function get_beaconDriven() {
                        return _regeneratorRuntime.async(function get_beaconDriven$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_BEACONDRIVEN_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._beaconDriven);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_beaconDriven',
                    value: function set_beaconDriven(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_beaconDriven$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('beaconDriven', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_clearHistory',
                    value: function get_clearHistory() {
                        return _regeneratorRuntime.async(function get_clearHistory$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CLEARHISTORY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._clearHistory);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_clearHistory',
                    value: function set_clearHistory(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_clearHistory$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('clearHistory', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'forgetAllDataStreams',
                    value: function forgetAllDataStreams() {
                        return _regeneratorRuntime.async(function forgetAllDataStreams$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_clearHistory(Y_CLEARHISTORY_TRUE));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_dataSets',
                    value: function get_dataSets() {
                        return _regeneratorRuntime.async(function get_dataSets$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.t0 = _regeneratorRuntime;
                                    context$2$0.t1 = this;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._download('logger.json'));

                                case 4:
                                    context$2$0.t2 = context$2$0.sent;
                                    context$2$0.t3 = context$2$0.t1.parse_dataSets.call(context$2$0.t1, context$2$0.t2);
                                    context$2$0.next = 8;
                                    return context$2$0.t0.awrap.call(context$2$0.t0, context$2$0.t3);

                                case 8:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'parse_dataSets',
                    value: function parse_dataSets(json) {
                        var dslist, dataset, res, ii;
                        return _regeneratorRuntime.async(function parse_dataSets$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    dslist = [];
                                    dataset = undefined;
                                    res = [];

                                    dslist = this.imm_json_get_array(json);
                                    res.length = 0;
                                    context$2$0.t0 = _regeneratorRuntime.keys(dslist);

                                case 6:
                                    if ((context$2$0.t1 = context$2$0.t0()).done) {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    ii = context$2$0.t1.value;

                                    dataset = new YDataSet(this);
                                    context$2$0.next = 11;
                                    return _regeneratorRuntime.awrap(dataset._parse(dslist[ii]));

                                case 11:
                                    res.push(dataset);;
                                    context$2$0.next = 6;
                                    break;

                                case 15:
                                    return context$2$0.abrupt('return', res);

                                case 16:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextDataLogger',
                    value: function nextDataLogger() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YDataLogger.FindDataLoggerInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindDataLogger',
                    value: function FindDataLogger(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('DataLogger', func);
                        if (obj == null) {
                            obj = new YDataLogger(YAPI, func);
                            YFunction._AddToCache('DataLogger', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindDataLoggerInContext',
                    value: function FindDataLoggerInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'DataLogger', func);
                        if (obj == null) {
                            obj = new YDataLogger(yctx, func);
                            YFunction._AddToCache('DataLogger', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstDataLogger',
                    value: function FirstDataLogger() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('DataLogger');
                        if (next_hwid == null) return null;
                        return YDataLogger.FindDataLogger(next_hwid);
                    }
                }, {
                    key: 'FirstDataLoggerInContext',
                    value: function FirstDataLoggerInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('DataLogger');
                        if (next_hwid == null) return null;
                        return YDataLogger.FindDataLoggerInContext(yctx, next_hwid);
                    }
                }]);

                return YDataLogger;
            })(YFunction);

            _export('YDataLogger', YDataLogger);
        }
    };
});
System.register('yoctolib-es/yocto_digitalio.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_OUTPUTVOLTAGE_USB_5V, Y_OUTPUTVOLTAGE_USB_3V, Y_OUTPUTVOLTAGE_EXT_V, Y_OUTPUTVOLTAGE_INVALID, Y_PORTSTATE_INVALID, Y_PORTDIRECTION_INVALID, Y_PORTOPENDRAIN_INVALID, Y_PORTPOLARITY_INVALID, Y_PORTSIZE_INVALID, Y_COMMAND_INVALID, YDigitalIO;

    function yFindDigitalIO(func) {
        return YDigitalIO.FindDigitalIO(func);
    }

    function yFirstDigitalIO() {
        return YDigitalIO.FirstDigitalIO();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindDigitalIO', yFindDigitalIO);

            _export('yFirstDigitalIO', yFirstDigitalIO);

            Y_OUTPUTVOLTAGE_USB_5V = 0;

            _export('Y_OUTPUTVOLTAGE_USB_5V', Y_OUTPUTVOLTAGE_USB_5V);

            Y_OUTPUTVOLTAGE_USB_3V = 1;

            _export('Y_OUTPUTVOLTAGE_USB_3V', Y_OUTPUTVOLTAGE_USB_3V);

            Y_OUTPUTVOLTAGE_EXT_V = 2;

            _export('Y_OUTPUTVOLTAGE_EXT_V', Y_OUTPUTVOLTAGE_EXT_V);

            Y_OUTPUTVOLTAGE_INVALID = -1;

            _export('Y_OUTPUTVOLTAGE_INVALID', Y_OUTPUTVOLTAGE_INVALID);

            Y_PORTSTATE_INVALID = YAPI.INVALID_UINT;

            _export('Y_PORTSTATE_INVALID', Y_PORTSTATE_INVALID);

            Y_PORTDIRECTION_INVALID = YAPI.INVALID_UINT;

            _export('Y_PORTDIRECTION_INVALID', Y_PORTDIRECTION_INVALID);

            Y_PORTOPENDRAIN_INVALID = YAPI.INVALID_UINT;

            _export('Y_PORTOPENDRAIN_INVALID', Y_PORTOPENDRAIN_INVALID);

            Y_PORTPOLARITY_INVALID = YAPI.INVALID_UINT;

            _export('Y_PORTPOLARITY_INVALID', Y_PORTPOLARITY_INVALID);

            Y_PORTSIZE_INVALID = YAPI.INVALID_UINT;

            _export('Y_PORTSIZE_INVALID', Y_PORTSIZE_INVALID);

            Y_COMMAND_INVALID = YAPI.INVALID_STRING;

            _export('Y_COMMAND_INVALID', Y_COMMAND_INVALID);

            YDigitalIO = (function (_YFunction) {
                _inherits(YDigitalIO, _YFunction);

                function YDigitalIO(obj_yapi, str_func) {
                    _classCallCheck(this, YDigitalIO);

                    _get(Object.getPrototypeOf(YDigitalIO.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'DigitalIO';

                    this._portState = Y_PORTSTATE_INVALID;

                    this._portDirection = Y_PORTDIRECTION_INVALID;

                    this._portOpenDrain = Y_PORTOPENDRAIN_INVALID;

                    this._portPolarity = Y_PORTPOLARITY_INVALID;

                    this._portSize = Y_PORTSIZE_INVALID;

                    this._outputVoltage = Y_OUTPUTVOLTAGE_INVALID;

                    this._command = Y_COMMAND_INVALID;
                    this.imm_setConst({
                        PORTSTATE_INVALID: YAPI.INVALID_UINT,
                        PORTDIRECTION_INVALID: YAPI.INVALID_UINT,
                        PORTOPENDRAIN_INVALID: YAPI.INVALID_UINT,
                        PORTPOLARITY_INVALID: YAPI.INVALID_UINT,
                        PORTSIZE_INVALID: YAPI.INVALID_UINT,
                        OUTPUTVOLTAGE_USB_5V: 0,
                        OUTPUTVOLTAGE_USB_3V: 1,
                        OUTPUTVOLTAGE_EXT_V: 2,
                        OUTPUTVOLTAGE_INVALID: -1,
                        COMMAND_INVALID: YAPI.INVALID_STRING
                    });
                }

                _createClass(YDigitalIO, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'portState':
                                this._portState = parseInt(val);
                                return 1;
                            case 'portDirection':
                                this._portDirection = parseInt(val);
                                return 1;
                            case 'portOpenDrain':
                                this._portOpenDrain = parseInt(val);
                                return 1;
                            case 'portPolarity':
                                this._portPolarity = parseInt(val);
                                return 1;
                            case 'portSize':
                                this._portSize = parseInt(val);
                                return 1;
                            case 'outputVoltage':
                                this._outputVoltage = parseInt(val);
                                return 1;
                            case 'command':
                                this._command = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YDigitalIO.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_portState',
                    value: function get_portState() {
                        return _regeneratorRuntime.async(function get_portState$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PORTSTATE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._portState);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_portState',
                    value: function set_portState(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_portState$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('portState', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_portDirection',
                    value: function get_portDirection() {
                        return _regeneratorRuntime.async(function get_portDirection$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PORTDIRECTION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._portDirection);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_portDirection',
                    value: function set_portDirection(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_portDirection$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('portDirection', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_portOpenDrain',
                    value: function get_portOpenDrain() {
                        return _regeneratorRuntime.async(function get_portOpenDrain$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PORTOPENDRAIN_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._portOpenDrain);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_portOpenDrain',
                    value: function set_portOpenDrain(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_portOpenDrain$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('portOpenDrain', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_portPolarity',
                    value: function get_portPolarity() {
                        return _regeneratorRuntime.async(function get_portPolarity$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PORTPOLARITY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._portPolarity);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_portPolarity',
                    value: function set_portPolarity(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_portPolarity$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('portPolarity', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_portSize',
                    value: function get_portSize() {
                        return _regeneratorRuntime.async(function get_portSize$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PORTSIZE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._portSize);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_outputVoltage',
                    value: function get_outputVoltage() {
                        return _regeneratorRuntime.async(function get_outputVoltage$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_OUTPUTVOLTAGE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._outputVoltage);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_outputVoltage',
                    value: function set_outputVoltage(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_outputVoltage$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('outputVoltage', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_command',
                    value: function get_command() {
                        return _regeneratorRuntime.async(function get_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COMMAND_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._command);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_command',
                    value: function set_command(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('command', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_bitState',
                    value: function set_bitState(bitno, bitstate) {
                        return _regeneratorRuntime.async(function set_bitState$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (bitstate >= 0) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'invalid bitstate', YAPI_INVALID_ARGUMENT));

                                case 2:
                                    if (bitstate <= 1) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'invalid bitstate', YAPI_INVALID_ARGUMENT));

                                case 4:
                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this.set_command(String.fromCharCode(82 + bitstate) + '' + String(Math.round(bitno))));

                                case 6:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_bitState',
                    value: function get_bitState(bitno) {
                        var portVal;
                        return _regeneratorRuntime.async(function get_bitState$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    portVal = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.get_portState());

                                case 3:
                                    portVal = context$2$0.sent;
                                    return context$2$0.abrupt('return', portVal >> bitno & 1);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'toggle_bitState',
                    value: function toggle_bitState(bitno) {
                        return _regeneratorRuntime.async(function toggle_bitState$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command('T' + String(Math.round(bitno))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_bitDirection',
                    value: function set_bitDirection(bitno, bitdirection) {
                        return _regeneratorRuntime.async(function set_bitDirection$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (bitdirection >= 0) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'invalid direction', YAPI_INVALID_ARGUMENT));

                                case 2:
                                    if (bitdirection <= 1) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'invalid direction', YAPI_INVALID_ARGUMENT));

                                case 4:
                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this.set_command(String.fromCharCode(73 + 6 * bitdirection) + '' + String(Math.round(bitno))));

                                case 6:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_bitDirection',
                    value: function get_bitDirection(bitno) {
                        var portDir;
                        return _regeneratorRuntime.async(function get_bitDirection$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    portDir = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.get_portDirection());

                                case 3:
                                    portDir = context$2$0.sent;
                                    return context$2$0.abrupt('return', portDir >> bitno & 1);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_bitPolarity',
                    value: function set_bitPolarity(bitno, bitpolarity) {
                        return _regeneratorRuntime.async(function set_bitPolarity$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (bitpolarity >= 0) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'invalid bitpolarity', YAPI_INVALID_ARGUMENT));

                                case 2:
                                    if (bitpolarity <= 1) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'invalid bitpolarity', YAPI_INVALID_ARGUMENT));

                                case 4:
                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this.set_command(String.fromCharCode(110 + 4 * bitpolarity) + '' + String(Math.round(bitno))));

                                case 6:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_bitPolarity',
                    value: function get_bitPolarity(bitno) {
                        var portPol;
                        return _regeneratorRuntime.async(function get_bitPolarity$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    portPol = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.get_portPolarity());

                                case 3:
                                    portPol = context$2$0.sent;
                                    return context$2$0.abrupt('return', portPol >> bitno & 1);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_bitOpenDrain',
                    value: function set_bitOpenDrain(bitno, opendrain) {
                        return _regeneratorRuntime.async(function set_bitOpenDrain$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (opendrain >= 0) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'invalid state', YAPI_INVALID_ARGUMENT));

                                case 2:
                                    if (opendrain <= 1) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'invalid state', YAPI_INVALID_ARGUMENT));

                                case 4:
                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this.set_command(String.fromCharCode(100 - 32 * opendrain) + '' + String(Math.round(bitno))));

                                case 6:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_bitOpenDrain',
                    value: function get_bitOpenDrain(bitno) {
                        var portOpenDrain;
                        return _regeneratorRuntime.async(function get_bitOpenDrain$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    portOpenDrain = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.get_portOpenDrain());

                                case 3:
                                    portOpenDrain = context$2$0.sent;
                                    return context$2$0.abrupt('return', portOpenDrain >> bitno & 1);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'pulse',
                    value: function pulse(bitno, ms_duration) {
                        return _regeneratorRuntime.async(function pulse$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command('Z' + String(Math.round(bitno)) + ',0,' + String(Math.round(ms_duration))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'delayedPulse',
                    value: function delayedPulse(bitno, ms_delay, ms_duration) {
                        return _regeneratorRuntime.async(function delayedPulse$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command('Z' + String(Math.round(bitno)) + ',' + String(Math.round(ms_delay)) + ',' + String(Math.round(ms_duration))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextDigitalIO',
                    value: function nextDigitalIO() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YDigitalIO.FindDigitalIOInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindDigitalIO',
                    value: function FindDigitalIO(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('DigitalIO', func);
                        if (obj == null) {
                            obj = new YDigitalIO(YAPI, func);
                            YFunction._AddToCache('DigitalIO', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindDigitalIOInContext',
                    value: function FindDigitalIOInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'DigitalIO', func);
                        if (obj == null) {
                            obj = new YDigitalIO(yctx, func);
                            YFunction._AddToCache('DigitalIO', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstDigitalIO',
                    value: function FirstDigitalIO() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('DigitalIO');
                        if (next_hwid == null) return null;
                        return YDigitalIO.FindDigitalIO(next_hwid);
                    }
                }, {
                    key: 'FirstDigitalIOInContext',
                    value: function FirstDigitalIOInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('DigitalIO');
                        if (next_hwid == null) return null;
                        return YDigitalIO.FindDigitalIOInContext(yctx, next_hwid);
                    }
                }]);

                return YDigitalIO;
            })(YFunction);

            _export('YDigitalIO', YDigitalIO);
        }
    };
});
System.register('yoctolib-es/yocto_display.js', ['npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _createClass, _classCallCheck, _get, _inherits, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_ENABLED_FALSE, Y_ENABLED_TRUE, Y_ENABLED_INVALID, Y_ORIENTATION_LEFT, Y_ORIENTATION_UP, Y_ORIENTATION_RIGHT, Y_ORIENTATION_DOWN, Y_ORIENTATION_INVALID, Y_DISPLAYTYPE_MONO, Y_DISPLAYTYPE_GRAY, Y_DISPLAYTYPE_RGB, Y_DISPLAYTYPE_INVALID, Y_STARTUPSEQ_INVALID, Y_BRIGHTNESS_INVALID, Y_DISPLAYWIDTH_INVALID, Y_DISPLAYHEIGHT_INVALID, Y_LAYERWIDTH_INVALID, Y_LAYERHEIGHT_INVALID, Y_LAYERCOUNT_INVALID, Y_COMMAND_INVALID, Y_ALIGN_TOP_LEFT, Y_ALIGN_CENTER_LEFT, Y_ALIGN_BASELINE_LEFT, Y_ALIGN_BOTTOM_LEFT, Y_ALIGN_TOP_CENTER, Y_ALIGN_CENTER, Y_ALIGN_BASELINE_CENTER, Y_ALIGN_BOTTOM_CENTER, Y_ALIGN_TOP_DECIMAL, Y_ALIGN_CENTER_DECIMAL, Y_ALIGN_BASELINE_DECIMAL, Y_ALIGN_BOTTOM_DECIMAL, Y_ALIGN_TOP_RIGHT, Y_ALIGN_CENTER_RIGHT, Y_ALIGN_BASELINE_RIGHT, Y_ALIGN_BOTTOM_RIGHT, YDisplayLayer, YDisplay;

    function yFindDisplay(func) {
        return YDisplay.FindDisplay(func);
    }

    function yFirstDisplay() {
        return YDisplay.FirstDisplay();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {
            'use strict';

            _export('yFindDisplay', yFindDisplay);

            _export('yFirstDisplay', yFirstDisplay);

            Y_ENABLED_FALSE = 0;

            _export('Y_ENABLED_FALSE', Y_ENABLED_FALSE);

            Y_ENABLED_TRUE = 1;

            _export('Y_ENABLED_TRUE', Y_ENABLED_TRUE);

            Y_ENABLED_INVALID = -1;

            _export('Y_ENABLED_INVALID', Y_ENABLED_INVALID);

            Y_ORIENTATION_LEFT = 0;

            _export('Y_ORIENTATION_LEFT', Y_ORIENTATION_LEFT);

            Y_ORIENTATION_UP = 1;

            _export('Y_ORIENTATION_UP', Y_ORIENTATION_UP);

            Y_ORIENTATION_RIGHT = 2;

            _export('Y_ORIENTATION_RIGHT', Y_ORIENTATION_RIGHT);

            Y_ORIENTATION_DOWN = 3;

            _export('Y_ORIENTATION_DOWN', Y_ORIENTATION_DOWN);

            Y_ORIENTATION_INVALID = -1;

            _export('Y_ORIENTATION_INVALID', Y_ORIENTATION_INVALID);

            Y_DISPLAYTYPE_MONO = 0;

            _export('Y_DISPLAYTYPE_MONO', Y_DISPLAYTYPE_MONO);

            Y_DISPLAYTYPE_GRAY = 1;

            _export('Y_DISPLAYTYPE_GRAY', Y_DISPLAYTYPE_GRAY);

            Y_DISPLAYTYPE_RGB = 2;

            _export('Y_DISPLAYTYPE_RGB', Y_DISPLAYTYPE_RGB);

            Y_DISPLAYTYPE_INVALID = -1;

            _export('Y_DISPLAYTYPE_INVALID', Y_DISPLAYTYPE_INVALID);

            Y_STARTUPSEQ_INVALID = YAPI.INVALID_STRING;

            _export('Y_STARTUPSEQ_INVALID', Y_STARTUPSEQ_INVALID);

            Y_BRIGHTNESS_INVALID = YAPI.INVALID_UINT;

            _export('Y_BRIGHTNESS_INVALID', Y_BRIGHTNESS_INVALID);

            Y_DISPLAYWIDTH_INVALID = YAPI.INVALID_UINT;

            _export('Y_DISPLAYWIDTH_INVALID', Y_DISPLAYWIDTH_INVALID);

            Y_DISPLAYHEIGHT_INVALID = YAPI.INVALID_UINT;

            _export('Y_DISPLAYHEIGHT_INVALID', Y_DISPLAYHEIGHT_INVALID);

            Y_LAYERWIDTH_INVALID = YAPI.INVALID_UINT;

            _export('Y_LAYERWIDTH_INVALID', Y_LAYERWIDTH_INVALID);

            Y_LAYERHEIGHT_INVALID = YAPI.INVALID_UINT;

            _export('Y_LAYERHEIGHT_INVALID', Y_LAYERHEIGHT_INVALID);

            Y_LAYERCOUNT_INVALID = YAPI.INVALID_UINT;

            _export('Y_LAYERCOUNT_INVALID', Y_LAYERCOUNT_INVALID);

            Y_COMMAND_INVALID = YAPI.INVALID_STRING;

            _export('Y_COMMAND_INVALID', Y_COMMAND_INVALID);

            Y_ALIGN_TOP_LEFT = 0;

            _export('Y_ALIGN_TOP_LEFT', Y_ALIGN_TOP_LEFT);

            Y_ALIGN_CENTER_LEFT = 1;

            _export('Y_ALIGN_CENTER_LEFT', Y_ALIGN_CENTER_LEFT);

            Y_ALIGN_BASELINE_LEFT = 2;

            _export('Y_ALIGN_BASELINE_LEFT', Y_ALIGN_BASELINE_LEFT);

            Y_ALIGN_BOTTOM_LEFT = 3;

            _export('Y_ALIGN_BOTTOM_LEFT', Y_ALIGN_BOTTOM_LEFT);

            Y_ALIGN_TOP_CENTER = 4;

            _export('Y_ALIGN_TOP_CENTER', Y_ALIGN_TOP_CENTER);

            Y_ALIGN_CENTER = 5;

            _export('Y_ALIGN_CENTER', Y_ALIGN_CENTER);

            Y_ALIGN_BASELINE_CENTER = 6;

            _export('Y_ALIGN_BASELINE_CENTER', Y_ALIGN_BASELINE_CENTER);

            Y_ALIGN_BOTTOM_CENTER = 7;

            _export('Y_ALIGN_BOTTOM_CENTER', Y_ALIGN_BOTTOM_CENTER);

            Y_ALIGN_TOP_DECIMAL = 8;

            _export('Y_ALIGN_TOP_DECIMAL', Y_ALIGN_TOP_DECIMAL);

            Y_ALIGN_CENTER_DECIMAL = 9;

            _export('Y_ALIGN_CENTER_DECIMAL', Y_ALIGN_CENTER_DECIMAL);

            Y_ALIGN_BASELINE_DECIMAL = 10;

            _export('Y_ALIGN_BASELINE_DECIMAL', Y_ALIGN_BASELINE_DECIMAL);

            Y_ALIGN_BOTTOM_DECIMAL = 11;

            _export('Y_ALIGN_BOTTOM_DECIMAL', Y_ALIGN_BOTTOM_DECIMAL);

            Y_ALIGN_TOP_RIGHT = 12;

            _export('Y_ALIGN_TOP_RIGHT', Y_ALIGN_TOP_RIGHT);

            Y_ALIGN_CENTER_RIGHT = 13;

            _export('Y_ALIGN_CENTER_RIGHT', Y_ALIGN_CENTER_RIGHT);

            Y_ALIGN_BASELINE_RIGHT = 14;

            _export('Y_ALIGN_BASELINE_RIGHT', Y_ALIGN_BASELINE_RIGHT);

            Y_ALIGN_BOTTOM_RIGHT = 15;

            _export('Y_ALIGN_BOTTOM_RIGHT', Y_ALIGN_BOTTOM_RIGHT);

            YDisplayLayer = (function () {
                function YDisplayLayer(obj_parent, str_id) {
                    _classCallCheck(this, YDisplayLayer);

                    this._display = obj_parent;
                    this._id = str_id;
                    this._cmdbuff = '';
                    this._hidden = false;

                    this.ALIGN_TOP_LEFT = 0;

                    this.ALIGN_CENTER_LEFT = 1;

                    this.ALIGN_BASELINE_LEFT = 2;

                    this.ALIGN_BOTTOM_LEFT = 3;

                    this.ALIGN_TOP_CENTER = 4;

                    this.ALIGN_CENTER = 5;

                    this.ALIGN_BASELINE_CENTER = 6;

                    this.ALIGN_BOTTOM_CENTER = 7;

                    this.ALIGN_TOP_DECIMAL = 8;

                    this.ALIGN_CENTER_DECIMAL = 9;

                    this.ALIGN_BASELINE_DECIMAL = 10;

                    this.ALIGN_BOTTOM_DECIMAL = 11;

                    this.ALIGN_TOP_RIGHT = 12;

                    this.ALIGN_CENTER_RIGHT = 13;

                    this.ALIGN_BASELINE_RIGHT = 14;

                    this.ALIGN_BOTTOM_RIGHT = 15;
                }

                _createClass(YDisplayLayer, [{
                    key: 'flush_now',
                    value: function flush_now() {
                        var res;
                        return _regeneratorRuntime.async(function flush_now$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    res = YAPI_SUCCESS;

                                    if (!(this._cmdbuff != '')) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._display.sendCommand(this._cmdbuff));

                                case 4:
                                    res = context$2$0.sent;

                                    this._cmdbuff = '';

                                case 6:
                                    return context$2$0.abrupt('return', res);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'command_push',
                    value: function command_push(str_cmd) {
                        var res;
                        return _regeneratorRuntime.async(function command_push$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    res = YAPI_SUCCESS;

                                    if (!(this._cmdbuff.length + str_cmd.length >= 100)) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.flush_now());

                                case 4:
                                    res = context$2$0.sent;

                                case 5:
                                    if (this._cmdbuff == '') {
                                        this._cmdbuff = this._id;
                                    }
                                    this._cmdbuff += str_cmd;
                                    return context$2$0.abrupt('return', res);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'command_flush',
                    value: function command_flush(str_cmd) {
                        var res;
                        return _regeneratorRuntime.async(function command_flush$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_push(str_cmd));

                                case 2:
                                    res = context$2$0.sent;

                                    if (!this._hidden) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 5:
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this.flush_now());

                                case 7:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'reset',
                    value: function reset() {
                        return _regeneratorRuntime.async(function reset$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._hidden = false;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.command_flush('X'));

                                case 3:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'clear',
                    value: function clear() {
                        return _regeneratorRuntime.async(function clear$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_flush('x'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'selectColorPen',
                    value: function selectColorPen(color) {
                        return _regeneratorRuntime.async(function selectColorPen$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_push('c' + ('000000' + color.toString(16)).slice(-6)));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'selectGrayPen',
                    value: function selectGrayPen(graylevel) {
                        return _regeneratorRuntime.async(function selectGrayPen$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_push('g' + String(Math.round(graylevel))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'selectEraser',
                    value: function selectEraser() {
                        return _regeneratorRuntime.async(function selectEraser$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_push('e'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'setAntialiasingMode',
                    value: function setAntialiasingMode(mode) {
                        return _regeneratorRuntime.async(function setAntialiasingMode$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_push('a' + (mode ? "1" : "0")));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'drawPixel',
                    value: function drawPixel(x, y) {
                        return _regeneratorRuntime.async(function drawPixel$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_flush('P' + String(Math.round(x)) + ',' + String(Math.round(y))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'drawRect',
                    value: function drawRect(x1, y1, x2, y2) {
                        return _regeneratorRuntime.async(function drawRect$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_flush('R' + String(Math.round(x1)) + ',' + String(Math.round(y1)) + ',' + String(Math.round(x2)) + ',' + String(Math.round(y2))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'drawBar',
                    value: function drawBar(x1, y1, x2, y2) {
                        return _regeneratorRuntime.async(function drawBar$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_flush('B' + String(Math.round(x1)) + ',' + String(Math.round(y1)) + ',' + String(Math.round(x2)) + ',' + String(Math.round(y2))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'drawCircle',
                    value: function drawCircle(x, y, r) {
                        return _regeneratorRuntime.async(function drawCircle$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_flush('C' + String(Math.round(x)) + ',' + String(Math.round(y)) + ',' + String(Math.round(r))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'drawDisc',
                    value: function drawDisc(x, y, r) {
                        return _regeneratorRuntime.async(function drawDisc$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_flush('D' + String(Math.round(x)) + ',' + String(Math.round(y)) + ',' + String(Math.round(r))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'selectFont',
                    value: function selectFont(fontname) {
                        return _regeneratorRuntime.async(function selectFont$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_push('&' + fontname + '' + String.fromCharCode(27)));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'drawText',
                    value: function drawText(x, y, anchor, text) {
                        return _regeneratorRuntime.async(function drawText$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_flush('T' + String(Math.round(x)) + ',' + String(Math.round(y)) + ',' + String(anchor) + ',' + text + '' + String.fromCharCode(27)));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'drawImage',
                    value: function drawImage(x, y, imagename) {
                        return _regeneratorRuntime.async(function drawImage$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_flush('*' + String(Math.round(x)) + ',' + String(Math.round(y)) + ',' + imagename + '' + String.fromCharCode(27)));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'drawBitmap',
                    value: function drawBitmap(x, y, w, bitmap, bgcol) {
                        var destname;
                        return _regeneratorRuntime.async(function drawBitmap$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    destname = undefined;

                                    destname = 'layer' + String(Math.round(this._id)) + ':' + String(Math.round(w)) + ',' + String(Math.round(bgcol)) + '@' + String(Math.round(x)) + ',' + String(Math.round(y));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._display.upload(destname, bitmap));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'moveTo',
                    value: function moveTo(x, y) {
                        return _regeneratorRuntime.async(function moveTo$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_push('@' + String(Math.round(x)) + ',' + String(Math.round(y))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'lineTo',
                    value: function lineTo(x, y) {
                        return _regeneratorRuntime.async(function lineTo$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_flush('-' + String(Math.round(x)) + ',' + String(Math.round(y))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'consoleOut',
                    value: function consoleOut(text) {
                        return _regeneratorRuntime.async(function consoleOut$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_flush('!' + text + '' + String.fromCharCode(27)));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'setConsoleMargins',
                    value: function setConsoleMargins(x1, y1, x2, y2) {
                        return _regeneratorRuntime.async(function setConsoleMargins$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_push('m' + String(Math.round(x1)) + ',' + String(Math.round(y1)) + ',' + String(Math.round(x2)) + ',' + String(Math.round(y2))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'setConsoleBackground',
                    value: function setConsoleBackground(bgcol) {
                        return _regeneratorRuntime.async(function setConsoleBackground$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_push('b' + String(Math.round(bgcol))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'setConsoleWordWrap',
                    value: function setConsoleWordWrap(wordwrap) {
                        return _regeneratorRuntime.async(function setConsoleWordWrap$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_push('w' + (wordwrap ? "1" : "0")));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'clearConsole',
                    value: function clearConsole() {
                        return _regeneratorRuntime.async(function clearConsole$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_flush('^'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'setLayerPosition',
                    value: function setLayerPosition(x, y, scrollTime) {
                        return _regeneratorRuntime.async(function setLayerPosition$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_flush('#' + String(Math.round(x)) + ',' + String(Math.round(y)) + ',' + String(Math.round(scrollTime))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'hide',
                    value: function hide() {
                        return _regeneratorRuntime.async(function hide$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.command_push('h'));

                                case 2:
                                    this._hidden = true;
                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this.flush_now());

                                case 5:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 6:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'unhide',
                    value: function unhide() {
                        return _regeneratorRuntime.async(function unhide$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._hidden = false;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.command_flush('s'));

                                case 3:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_display',
                    value: function get_display() {
                        return _regeneratorRuntime.async(function get_display$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._display);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_displayWidth',
                    value: function get_displayWidth() {
                        return _regeneratorRuntime.async(function get_displayWidth$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._display.get_displayWidth());

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_displayHeight',
                    value: function get_displayHeight() {
                        return _regeneratorRuntime.async(function get_displayHeight$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._display.get_displayHeight());

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_layerWidth',
                    value: function get_layerWidth() {
                        return _regeneratorRuntime.async(function get_layerWidth$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._display.get_layerWidth());

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_layerHeight',
                    value: function get_layerHeight() {
                        return _regeneratorRuntime.async(function get_layerHeight$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._display.get_layerHeight());

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'resetHiddenFlag',
                    value: function resetHiddenFlag() {
                        return _regeneratorRuntime.async(function resetHiddenFlag$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._hidden = false;
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 2:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YDisplayLayer;
            })();

            ;

            YDisplay = (function (_YFunction) {
                _inherits(YDisplay, _YFunction);

                function YDisplay(str_func) {
                    _classCallCheck(this, YDisplay);

                    _get(Object.getPrototypeOf(YDisplay.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Display';

                    this._enabled = Y_ENABLED_INVALID;

                    this._startupSeq = Y_STARTUPSEQ_INVALID;

                    this._brightness = Y_BRIGHTNESS_INVALID;

                    this._orientation = Y_ORIENTATION_INVALID;

                    this._displayWidth = Y_DISPLAYWIDTH_INVALID;

                    this._displayHeight = Y_DISPLAYHEIGHT_INVALID;

                    this._displayType = Y_DISPLAYTYPE_INVALID;

                    this._layerWidth = Y_LAYERWIDTH_INVALID;

                    this._layerHeight = Y_LAYERHEIGHT_INVALID;

                    this._layerCount = Y_LAYERCOUNT_INVALID;

                    this._command = Y_COMMAND_INVALID;
                    this.imm_setConst({
                        ENABLED_FALSE: 0,
                        ENABLED_TRUE: 1,
                        ENABLED_INVALID: -1,
                        STARTUPSEQ_INVALID: YAPI.INVALID_STRING,
                        BRIGHTNESS_INVALID: YAPI.INVALID_UINT,
                        ORIENTATION_LEFT: 0,
                        ORIENTATION_UP: 1,
                        ORIENTATION_RIGHT: 2,
                        ORIENTATION_DOWN: 3,
                        ORIENTATION_INVALID: -1,
                        DISPLAYWIDTH_INVALID: YAPI.INVALID_UINT,
                        DISPLAYHEIGHT_INVALID: YAPI.INVALID_UINT,
                        DISPLAYTYPE_MONO: 0,
                        DISPLAYTYPE_GRAY: 1,
                        DISPLAYTYPE_RGB: 2,
                        DISPLAYTYPE_INVALID: -1,
                        LAYERWIDTH_INVALID: YAPI.INVALID_UINT,
                        LAYERHEIGHT_INVALID: YAPI.INVALID_UINT,
                        LAYERCOUNT_INVALID: YAPI.INVALID_UINT,
                        COMMAND_INVALID: YAPI.INVALID_STRING
                    });

                    this._allDisplayLayers;
                    this._sequence = '';
                    this._recording = false;
                }

                _createClass(YDisplay, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'enabled':
                                this._enabled = parseInt(val);
                                return 1;
                            case 'startupSeq':
                                this._startupSeq = val;
                                return 1;
                            case 'brightness':
                                this._brightness = parseInt(val);
                                return 1;
                            case 'orientation':
                                this._orientation = parseInt(val);
                                return 1;
                            case 'displayWidth':
                                this._displayWidth = parseInt(val);
                                return 1;
                            case 'displayHeight':
                                this._displayHeight = parseInt(val);
                                return 1;
                            case 'displayType':
                                this._displayType = parseInt(val);
                                return 1;
                            case 'layerWidth':
                                this._layerWidth = parseInt(val);
                                return 1;
                            case 'layerHeight':
                                this._layerHeight = parseInt(val);
                                return 1;
                            case 'layerCount':
                                this._layerCount = parseInt(val);
                                return 1;
                            case 'command':
                                this._command = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YDisplay.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_enabled',
                    value: function get_enabled() {
                        return _regeneratorRuntime.async(function get_enabled$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ENABLED_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._enabled);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_enabled',
                    value: function set_enabled(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_enabled$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('enabled', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_startupSeq',
                    value: function get_startupSeq() {
                        return _regeneratorRuntime.async(function get_startupSeq$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_STARTUPSEQ_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._startupSeq);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_startupSeq',
                    value: function set_startupSeq(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_startupSeq$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('startupSeq', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_brightness',
                    value: function get_brightness() {
                        return _regeneratorRuntime.async(function get_brightness$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_BRIGHTNESS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._brightness);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_brightness',
                    value: function set_brightness(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_brightness$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('brightness', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_orientation',
                    value: function get_orientation() {
                        return _regeneratorRuntime.async(function get_orientation$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ORIENTATION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._orientation);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_orientation',
                    value: function set_orientation(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_orientation$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('orientation', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_displayWidth',
                    value: function get_displayWidth() {
                        return _regeneratorRuntime.async(function get_displayWidth$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DISPLAYWIDTH_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._displayWidth);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_displayHeight',
                    value: function get_displayHeight() {
                        return _regeneratorRuntime.async(function get_displayHeight$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DISPLAYHEIGHT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._displayHeight);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_displayType',
                    value: function get_displayType() {
                        return _regeneratorRuntime.async(function get_displayType$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration == 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DISPLAYTYPE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._displayType);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_layerWidth',
                    value: function get_layerWidth() {
                        return _regeneratorRuntime.async(function get_layerWidth$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration == 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LAYERWIDTH_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._layerWidth);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_layerHeight',
                    value: function get_layerHeight() {
                        return _regeneratorRuntime.async(function get_layerHeight$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration == 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LAYERHEIGHT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._layerHeight);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_layerCount',
                    value: function get_layerCount() {
                        return _regeneratorRuntime.async(function get_layerCount$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration == 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LAYERCOUNT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._layerCount);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_command',
                    value: function get_command() {
                        return _regeneratorRuntime.async(function get_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COMMAND_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._command);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_command',
                    value: function set_command(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('command', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'resetAll',
                    value: function resetAll() {
                        return _regeneratorRuntime.async(function resetAll$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.flushLayers());

                                case 2:
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.resetHiddenLayerFlags());

                                case 4:
                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this.sendCommand('Z'));

                                case 6:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'fade',
                    value: function fade(brightness, duration) {
                        return _regeneratorRuntime.async(function fade$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.flushLayers());

                                case 2:
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.sendCommand('+' + String(Math.round(brightness)) + ',' + String(Math.round(duration))));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'newSequence',
                    value: function newSequence() {
                        return _regeneratorRuntime.async(function newSequence$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.flushLayers());

                                case 2:
                                    this._sequence = '';
                                    this._recording = true;
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'saveSequence',
                    value: function saveSequence(sequenceName) {
                        return _regeneratorRuntime.async(function saveSequence$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.flushLayers());

                                case 2:
                                    this._recording = false;
                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this._upload(sequenceName, this._yapi.imm_str2bin(this._sequence)));

                                case 5:
                                    this._sequence = '';
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'playSequence',
                    value: function playSequence(sequenceName) {
                        return _regeneratorRuntime.async(function playSequence$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.flushLayers());

                                case 2:
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.sendCommand('S' + sequenceName));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'pauseSequence',
                    value: function pauseSequence(delay_ms) {
                        return _regeneratorRuntime.async(function pauseSequence$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.flushLayers());

                                case 2:
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.sendCommand('W' + String(Math.round(delay_ms))));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'stopSequence',
                    value: function stopSequence() {
                        return _regeneratorRuntime.async(function stopSequence$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.flushLayers());

                                case 2:
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.sendCommand('S'));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'upload',
                    value: function upload(pathname, content) {
                        return _regeneratorRuntime.async(function upload$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._upload(pathname, content));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'copyLayerContent',
                    value: function copyLayerContent(srcLayerId, dstLayerId) {
                        return _regeneratorRuntime.async(function copyLayerContent$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.flushLayers());

                                case 2:
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.sendCommand('o' + String(Math.round(srcLayerId)) + ',' + String(Math.round(dstLayerId))));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'swapLayerContent',
                    value: function swapLayerContent(layerIdA, layerIdB) {
                        return _regeneratorRuntime.async(function swapLayerContent$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.flushLayers());

                                case 2:
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.sendCommand('E' + String(Math.round(layerIdA)) + ',' + String(Math.round(layerIdB))));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextDisplay',
                    value: function nextDisplay() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YDisplay.FindDisplayInContext(this._yapi, next_hwid);
                    }
                }, {
                    key: 'get_displayLayer',
                    value: function get_displayLayer(layerId) {
                        var nb_display_layer, i;
                        return _regeneratorRuntime.async(function get_displayLayer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (this._allDisplayLayers) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.get_layerCount());

                                case 3:
                                    nb_display_layer = context$2$0.sent;

                                    this._allDisplayLayers = [];
                                    for (i = 0; i < nb_display_layer; i++) {
                                        this._allDisplayLayers[i] = new YDisplayLayer(this, '' + i);
                                    }

                                case 6:
                                    if (!(layerId < 0 || layerId >= this._allDisplayLayers.length)) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    throw new YAPI_Exception(YAPI.INVALID_ARGUMENT, 'Invalid layerId');

                                case 8:
                                    return context$2$0.abrupt('return', this._allDisplayLayers[layerId]);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'flushLayers',
                    value: function flushLayers() {
                        var i;
                        return _regeneratorRuntime.async(function flushLayers$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!this._allDisplayLayers) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    i = 0;

                                case 2:
                                    if (!(i < this._allDisplayLayers.length)) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this._allDisplayLayers[i].flush_now());

                                case 5:
                                    i++;
                                    context$2$0.next = 2;
                                    break;

                                case 8:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'resetHiddenLayerFlags',
                    value: function resetHiddenLayerFlags() {
                        var i;
                        return _regeneratorRuntime.async(function resetHiddenLayerFlags$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!this._allDisplayLayers) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    i = 0;

                                case 2:
                                    if (!(i < this._allDisplayLayers.length)) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this._allDisplayLayers[i].resetHiddenFlag());

                                case 5:
                                    i++;
                                    context$2$0.next = 2;
                                    break;

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'sendCommand',
                    value: function sendCommand(cmd) {
                        return _regeneratorRuntime.async(function sendCommand$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (this._recording) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.set_command(cmd));

                                case 3:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 4:
                                    this._sequence += cmd + '\n';
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 6:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }], [{
                    key: 'FindDisplay',
                    value: function FindDisplay(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Display', func);
                        if (obj == null) {
                            obj = new YDisplay(YAPI, func);
                            YFunction._AddToCache('Display', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindDisplayInContext',
                    value: function FindDisplayInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Display', func);
                        if (obj == null) {
                            obj = new YDisplay(yctx, func);
                            YFunction._AddToCache('Display', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstDisplay',
                    value: function FirstDisplay() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Display');
                        if (next_hwid == null) return null;
                        return YDisplay.FindDisplay(next_hwid);
                    }
                }, {
                    key: 'FirstDisplayInContext',
                    value: function FirstDisplayInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Display');
                        if (next_hwid == null) return null;
                        return YDisplay.FindDisplayInContext(yctx, next_hwid);
                    }
                }]);

                return YDisplay;
            })(YFunction);

            _export('YDisplay', YDisplay);
        }
    };
});
System.register('yoctolib-es/yocto_dualpower.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_POWERSTATE_OFF, Y_POWERSTATE_FROM_USB, Y_POWERSTATE_FROM_EXT, Y_POWERSTATE_INVALID, Y_POWERCONTROL_AUTO, Y_POWERCONTROL_FROM_USB, Y_POWERCONTROL_FROM_EXT, Y_POWERCONTROL_OFF, Y_POWERCONTROL_INVALID, Y_EXTVOLTAGE_INVALID, YDualPower;

    function yFindDualPower(func) {
        return YDualPower.FindDualPower(func);
    }

    function yFirstDualPower() {
        return YDualPower.FirstDualPower();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindDualPower', yFindDualPower);

            _export('yFirstDualPower', yFirstDualPower);

            Y_POWERSTATE_OFF = 0;

            _export('Y_POWERSTATE_OFF', Y_POWERSTATE_OFF);

            Y_POWERSTATE_FROM_USB = 1;

            _export('Y_POWERSTATE_FROM_USB', Y_POWERSTATE_FROM_USB);

            Y_POWERSTATE_FROM_EXT = 2;

            _export('Y_POWERSTATE_FROM_EXT', Y_POWERSTATE_FROM_EXT);

            Y_POWERSTATE_INVALID = -1;

            _export('Y_POWERSTATE_INVALID', Y_POWERSTATE_INVALID);

            Y_POWERCONTROL_AUTO = 0;

            _export('Y_POWERCONTROL_AUTO', Y_POWERCONTROL_AUTO);

            Y_POWERCONTROL_FROM_USB = 1;

            _export('Y_POWERCONTROL_FROM_USB', Y_POWERCONTROL_FROM_USB);

            Y_POWERCONTROL_FROM_EXT = 2;

            _export('Y_POWERCONTROL_FROM_EXT', Y_POWERCONTROL_FROM_EXT);

            Y_POWERCONTROL_OFF = 3;

            _export('Y_POWERCONTROL_OFF', Y_POWERCONTROL_OFF);

            Y_POWERCONTROL_INVALID = -1;

            _export('Y_POWERCONTROL_INVALID', Y_POWERCONTROL_INVALID);

            Y_EXTVOLTAGE_INVALID = YAPI.INVALID_UINT;

            _export('Y_EXTVOLTAGE_INVALID', Y_EXTVOLTAGE_INVALID);

            YDualPower = (function (_YFunction) {
                _inherits(YDualPower, _YFunction);

                function YDualPower(obj_yapi, str_func) {
                    _classCallCheck(this, YDualPower);

                    _get(Object.getPrototypeOf(YDualPower.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'DualPower';

                    this._powerState = Y_POWERSTATE_INVALID;

                    this._powerControl = Y_POWERCONTROL_INVALID;

                    this._extVoltage = Y_EXTVOLTAGE_INVALID;
                    this.imm_setConst({
                        POWERSTATE_OFF: 0,
                        POWERSTATE_FROM_USB: 1,
                        POWERSTATE_FROM_EXT: 2,
                        POWERSTATE_INVALID: -1,
                        POWERCONTROL_AUTO: 0,
                        POWERCONTROL_FROM_USB: 1,
                        POWERCONTROL_FROM_EXT: 2,
                        POWERCONTROL_OFF: 3,
                        POWERCONTROL_INVALID: -1,
                        EXTVOLTAGE_INVALID: YAPI.INVALID_UINT
                    });
                }

                _createClass(YDualPower, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'powerState':
                                this._powerState = parseInt(val);
                                return 1;
                            case 'powerControl':
                                this._powerControl = parseInt(val);
                                return 1;
                            case 'extVoltage':
                                this._extVoltage = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YDualPower.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_powerState',
                    value: function get_powerState() {
                        return _regeneratorRuntime.async(function get_powerState$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_POWERSTATE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._powerState);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_powerControl',
                    value: function get_powerControl() {
                        return _regeneratorRuntime.async(function get_powerControl$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_POWERCONTROL_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._powerControl);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_powerControl',
                    value: function set_powerControl(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_powerControl$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('powerControl', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_extVoltage',
                    value: function get_extVoltage() {
                        return _regeneratorRuntime.async(function get_extVoltage$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_EXTVOLTAGE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._extVoltage);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextDualPower',
                    value: function nextDualPower() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YDualPower.FindDualPowerInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindDualPower',
                    value: function FindDualPower(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('DualPower', func);
                        if (obj == null) {
                            obj = new YDualPower(YAPI, func);
                            YFunction._AddToCache('DualPower', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindDualPowerInContext',
                    value: function FindDualPowerInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'DualPower', func);
                        if (obj == null) {
                            obj = new YDualPower(yctx, func);
                            YFunction._AddToCache('DualPower', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstDualPower',
                    value: function FirstDualPower() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('DualPower');
                        if (next_hwid == null) return null;
                        return YDualPower.FindDualPower(next_hwid);
                    }
                }, {
                    key: 'FirstDualPowerInContext',
                    value: function FirstDualPowerInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('DualPower');
                        if (next_hwid == null) return null;
                        return YDualPower.FindDualPowerInContext(yctx, next_hwid);
                    }
                }]);

                return YDualPower;
            })(YFunction);

            _export('YDualPower', YDualPower);
        }
    };
});
System.register('yoctolib-es/yocto_files.js', ['npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _createClass, _classCallCheck, _get, _inherits, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_FILESCOUNT_INVALID, Y_FREESPACE_INVALID, YFileRecord, YFiles;

    function yFindFiles(func) {
        return YFiles.FindFiles(func);
    }

    function yFirstFiles() {
        return YFiles.FirstFiles();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {
            'use strict';

            _export('yFindFiles', yFindFiles);

            _export('yFirstFiles', yFirstFiles);

            Y_FILESCOUNT_INVALID = YAPI.INVALID_UINT;

            _export('Y_FILESCOUNT_INVALID', Y_FILESCOUNT_INVALID);

            Y_FREESPACE_INVALID = YAPI.INVALID_UINT;

            _export('Y_FREESPACE_INVALID', Y_FREESPACE_INVALID);

            YFileRecord = (function () {
                function YFileRecord(str_json) {
                    _classCallCheck(this, YFileRecord);

                    this._name = '';

                    this._size = 0;

                    this._crc = 0;

                    var loadval = JSON.parse(str_json);
                    this._name = loadval.name;
                    this._size = loadval.size;
                    this._crc = loadval.crc;
                }

                _createClass(YFileRecord, [{
                    key: 'get_name',
                    value: function get_name() {
                        return _regeneratorRuntime.async(function get_name$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._name);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_size',
                    value: function get_size() {
                        return _regeneratorRuntime.async(function get_size$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._size);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_crc',
                    value: function get_crc() {
                        return _regeneratorRuntime.async(function get_crc$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._crc);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YFileRecord;
            })();

            YFiles = (function (_YFunction) {
                _inherits(YFiles, _YFunction);

                function YFiles(str_func) {
                    _classCallCheck(this, YFiles);

                    _get(Object.getPrototypeOf(YFiles.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Files';

                    this._filesCount = Y_FILESCOUNT_INVALID;

                    this._freeSpace = Y_FREESPACE_INVALID;
                    this.imm_setConst({
                        FILESCOUNT_INVALID: YAPI.INVALID_UINT,
                        FREESPACE_INVALID: YAPI.INVALID_UINT
                    });
                }

                _createClass(YFiles, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'filesCount':
                                this._filesCount = parseInt(val);
                                return 1;
                            case 'freeSpace':
                                this._freeSpace = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YFiles.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_filesCount',
                    value: function get_filesCount() {
                        return _regeneratorRuntime.async(function get_filesCount$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_FILESCOUNT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._filesCount);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_freeSpace',
                    value: function get_freeSpace() {
                        return _regeneratorRuntime.async(function get_freeSpace$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_FREESPACE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._freeSpace);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'sendCommand',
                    value: function sendCommand(command) {
                        var url;
                        return _regeneratorRuntime.async(function sendCommand$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    url = undefined;

                                    url = 'files.json?a=' + command;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._download(url));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'format_fs',
                    value: function format_fs() {
                        var json, res;
                        return _regeneratorRuntime.async(function format_fs$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    json = undefined;
                                    res = undefined;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.sendCommand('format'));

                                case 4:
                                    json = context$2$0.sent;

                                    res = this.imm_json_get_key(json, 'res');

                                    if (res == 'ok') {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_IO_ERROR, 'format failed', YAPI_IO_ERROR));

                                case 8:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_list',
                    value: function get_list(pattern) {
                        var json, filelist, res, ii;
                        return _regeneratorRuntime.async(function get_list$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    json = undefined;
                                    filelist = [];
                                    res = [];
                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this.sendCommand('dir&f=' + pattern));

                                case 5:
                                    json = context$2$0.sent;

                                    filelist = this.imm_json_get_array(json);
                                    res.length = 0;
                                    for (ii in filelist) {
                                        res.push(new YFileRecord(filelist[ii]));
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 10:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'download',
                    value: function download(pathname) {
                        return _regeneratorRuntime.async(function download$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._download(pathname));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'upload',
                    value: function upload(pathname, content) {
                        return _regeneratorRuntime.async(function upload$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._upload(pathname, content));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'remove',
                    value: function remove(pathname) {
                        var json, res;
                        return _regeneratorRuntime.async(function remove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    json = undefined;
                                    res = undefined;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.sendCommand('del&f=' + pathname));

                                case 4:
                                    json = context$2$0.sent;

                                    res = this.imm_json_get_key(json, 'res');

                                    if (res == 'ok') {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_IO_ERROR, 'unable to remove file', YAPI_IO_ERROR));

                                case 8:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextFiles',
                    value: function nextFiles() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YFiles.FindFilesInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindFiles',
                    value: function FindFiles(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Files', func);
                        if (obj == null) {
                            obj = new YFiles(YAPI, func);
                            YFunction._AddToCache('Files', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindFilesInContext',
                    value: function FindFilesInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Files', func);
                        if (obj == null) {
                            obj = new YFiles(yctx, func);
                            YFunction._AddToCache('Files', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstFiles',
                    value: function FirstFiles() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Files');
                        if (next_hwid == null) return null;
                        return YFiles.FindFiles(next_hwid);
                    }
                }, {
                    key: 'FirstFilesInContext',
                    value: function FirstFilesInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Files');
                        if (next_hwid == null) return null;
                        return YFiles.FindFilesInContext(yctx, next_hwid);
                    }
                }]);

                return YFiles;
            })(YFunction);

            _export('YFiles', YFiles);
        }
    };
});
System.register('yoctolib-es/yocto_genericsensor.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_SIGNALSAMPLING_HIGH_RATE, Y_SIGNALSAMPLING_HIGH_RATE_FILTERED, Y_SIGNALSAMPLING_LOW_NOISE, Y_SIGNALSAMPLING_LOW_NOISE_FILTERED, Y_SIGNALSAMPLING_INVALID, Y_SIGNALVALUE_INVALID, Y_SIGNALUNIT_INVALID, Y_SIGNALRANGE_INVALID, Y_VALUERANGE_INVALID, Y_SIGNALBIAS_INVALID, YGenericSensor;

    function yFindGenericSensor(func) {
        return YGenericSensor.FindGenericSensor(func);
    }

    function yFirstGenericSensor() {
        return YGenericSensor.FirstGenericSensor();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindGenericSensor', yFindGenericSensor);

            _export('yFirstGenericSensor', yFirstGenericSensor);

            Y_SIGNALSAMPLING_HIGH_RATE = 0;

            _export('Y_SIGNALSAMPLING_HIGH_RATE', Y_SIGNALSAMPLING_HIGH_RATE);

            Y_SIGNALSAMPLING_HIGH_RATE_FILTERED = 1;

            _export('Y_SIGNALSAMPLING_HIGH_RATE_FILTERED', Y_SIGNALSAMPLING_HIGH_RATE_FILTERED);

            Y_SIGNALSAMPLING_LOW_NOISE = 2;

            _export('Y_SIGNALSAMPLING_LOW_NOISE', Y_SIGNALSAMPLING_LOW_NOISE);

            Y_SIGNALSAMPLING_LOW_NOISE_FILTERED = 3;

            _export('Y_SIGNALSAMPLING_LOW_NOISE_FILTERED', Y_SIGNALSAMPLING_LOW_NOISE_FILTERED);

            Y_SIGNALSAMPLING_INVALID = -1;

            _export('Y_SIGNALSAMPLING_INVALID', Y_SIGNALSAMPLING_INVALID);

            Y_SIGNALVALUE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_SIGNALVALUE_INVALID', Y_SIGNALVALUE_INVALID);

            Y_SIGNALUNIT_INVALID = YAPI.INVALID_STRING;

            _export('Y_SIGNALUNIT_INVALID', Y_SIGNALUNIT_INVALID);

            Y_SIGNALRANGE_INVALID = YAPI.INVALID_STRING;

            _export('Y_SIGNALRANGE_INVALID', Y_SIGNALRANGE_INVALID);

            Y_VALUERANGE_INVALID = YAPI.INVALID_STRING;

            _export('Y_VALUERANGE_INVALID', Y_VALUERANGE_INVALID);

            Y_SIGNALBIAS_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_SIGNALBIAS_INVALID', Y_SIGNALBIAS_INVALID);

            YGenericSensor = (function (_YSensor) {
                _inherits(YGenericSensor, _YSensor);

                function YGenericSensor(obj_yapi, str_func) {
                    _classCallCheck(this, YGenericSensor);

                    _get(Object.getPrototypeOf(YGenericSensor.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'GenericSensor';

                    this._signalValue = Y_SIGNALVALUE_INVALID;

                    this._signalUnit = Y_SIGNALUNIT_INVALID;

                    this._signalRange = Y_SIGNALRANGE_INVALID;

                    this._valueRange = Y_VALUERANGE_INVALID;

                    this._signalBias = Y_SIGNALBIAS_INVALID;

                    this._signalSampling = Y_SIGNALSAMPLING_INVALID;
                    this.imm_setConst({
                        SIGNALVALUE_INVALID: YAPI.INVALID_DOUBLE,
                        SIGNALUNIT_INVALID: YAPI.INVALID_STRING,
                        SIGNALRANGE_INVALID: YAPI.INVALID_STRING,
                        VALUERANGE_INVALID: YAPI.INVALID_STRING,
                        SIGNALBIAS_INVALID: YAPI.INVALID_DOUBLE,
                        SIGNALSAMPLING_HIGH_RATE: 0,
                        SIGNALSAMPLING_HIGH_RATE_FILTERED: 1,
                        SIGNALSAMPLING_LOW_NOISE: 2,
                        SIGNALSAMPLING_LOW_NOISE_FILTERED: 3,
                        SIGNALSAMPLING_INVALID: -1
                    });
                }

                _createClass(YGenericSensor, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'signalValue':
                                this._signalValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'signalUnit':
                                this._signalUnit = val;
                                return 1;
                            case 'signalRange':
                                this._signalRange = val;
                                return 1;
                            case 'valueRange':
                                this._valueRange = val;
                                return 1;
                            case 'signalBias':
                                this._signalBias = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'signalSampling':
                                this._signalSampling = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YGenericSensor.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'set_unit',
                    value: function set_unit(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_unit$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('unit', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_signalValue',
                    value: function get_signalValue() {
                        return _regeneratorRuntime.async(function get_signalValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SIGNALVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', Math.round(this._signalValue * 1000) / 1000);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_signalUnit',
                    value: function get_signalUnit() {
                        return _regeneratorRuntime.async(function get_signalUnit$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration == 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SIGNALUNIT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._signalUnit);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_signalRange',
                    value: function get_signalRange() {
                        return _regeneratorRuntime.async(function get_signalRange$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SIGNALRANGE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._signalRange);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_signalRange',
                    value: function set_signalRange(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_signalRange$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('signalRange', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_valueRange',
                    value: function get_valueRange() {
                        return _regeneratorRuntime.async(function get_valueRange$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_VALUERANGE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._valueRange);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_valueRange',
                    value: function set_valueRange(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_valueRange$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('valueRange', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_signalBias',
                    value: function set_signalBias(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_signalBias$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('signalBias', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_signalBias',
                    value: function get_signalBias() {
                        return _regeneratorRuntime.async(function get_signalBias$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SIGNALBIAS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._signalBias);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_signalSampling',
                    value: function get_signalSampling() {
                        return _regeneratorRuntime.async(function get_signalSampling$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SIGNALSAMPLING_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._signalSampling);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_signalSampling',
                    value: function set_signalSampling(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_signalSampling$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('signalSampling', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'zeroAdjust',
                    value: function zeroAdjust() {
                        var currSignal, currBias;
                        return _regeneratorRuntime.async(function zeroAdjust$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    currSignal = undefined;
                                    currBias = undefined;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.get_signalValue());

                                case 4:
                                    currSignal = context$2$0.sent;
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this.get_signalBias());

                                case 7:
                                    currBias = context$2$0.sent;
                                    context$2$0.next = 10;
                                    return _regeneratorRuntime.awrap(this.set_signalBias(currSignal + currBias));

                                case 10:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 11:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextGenericSensor',
                    value: function nextGenericSensor() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YGenericSensor.FindGenericSensorInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindGenericSensor',
                    value: function FindGenericSensor(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('GenericSensor', func);
                        if (obj == null) {
                            obj = new YGenericSensor(YAPI, func);
                            YFunction._AddToCache('GenericSensor', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindGenericSensorInContext',
                    value: function FindGenericSensorInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'GenericSensor', func);
                        if (obj == null) {
                            obj = new YGenericSensor(yctx, func);
                            YFunction._AddToCache('GenericSensor', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstGenericSensor',
                    value: function FirstGenericSensor() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('GenericSensor');
                        if (next_hwid == null) return null;
                        return YGenericSensor.FindGenericSensor(next_hwid);
                    }
                }, {
                    key: 'FirstGenericSensorInContext',
                    value: function FirstGenericSensorInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('GenericSensor');
                        if (next_hwid == null) return null;
                        return YGenericSensor.FindGenericSensorInContext(yctx, next_hwid);
                    }
                }]);

                return YGenericSensor;
            })(YSensor);

            _export('YGenericSensor', YGenericSensor);
        }
    };
});
System.register('yoctolib-es/yocto_gps.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_ISFIXED_FALSE, Y_ISFIXED_TRUE, Y_ISFIXED_INVALID, Y_COORDSYSTEM_GPS_DMS, Y_COORDSYSTEM_GPS_DM, Y_COORDSYSTEM_GPS_D, Y_COORDSYSTEM_INVALID, Y_SATCOUNT_INVALID, Y_LATITUDE_INVALID, Y_LONGITUDE_INVALID, Y_DILUTION_INVALID, Y_ALTITUDE_INVALID, Y_GROUNDSPEED_INVALID, Y_DIRECTION_INVALID, Y_UNIXTIME_INVALID, Y_DATETIME_INVALID, Y_UTCOFFSET_INVALID, Y_COMMAND_INVALID, YGps;

    function yFindGps(func) {
        return YGps.FindGps(func);
    }

    function yFirstGps() {
        return YGps.FirstGps();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindGps', yFindGps);

            _export('yFirstGps', yFirstGps);

            Y_ISFIXED_FALSE = 0;

            _export('Y_ISFIXED_FALSE', Y_ISFIXED_FALSE);

            Y_ISFIXED_TRUE = 1;

            _export('Y_ISFIXED_TRUE', Y_ISFIXED_TRUE);

            Y_ISFIXED_INVALID = -1;

            _export('Y_ISFIXED_INVALID', Y_ISFIXED_INVALID);

            Y_COORDSYSTEM_GPS_DMS = 0;

            _export('Y_COORDSYSTEM_GPS_DMS', Y_COORDSYSTEM_GPS_DMS);

            Y_COORDSYSTEM_GPS_DM = 1;

            _export('Y_COORDSYSTEM_GPS_DM', Y_COORDSYSTEM_GPS_DM);

            Y_COORDSYSTEM_GPS_D = 2;

            _export('Y_COORDSYSTEM_GPS_D', Y_COORDSYSTEM_GPS_D);

            Y_COORDSYSTEM_INVALID = -1;

            _export('Y_COORDSYSTEM_INVALID', Y_COORDSYSTEM_INVALID);

            Y_SATCOUNT_INVALID = YAPI.INVALID_LONG;

            _export('Y_SATCOUNT_INVALID', Y_SATCOUNT_INVALID);

            Y_LATITUDE_INVALID = YAPI.INVALID_STRING;

            _export('Y_LATITUDE_INVALID', Y_LATITUDE_INVALID);

            Y_LONGITUDE_INVALID = YAPI.INVALID_STRING;

            _export('Y_LONGITUDE_INVALID', Y_LONGITUDE_INVALID);

            Y_DILUTION_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_DILUTION_INVALID', Y_DILUTION_INVALID);

            Y_ALTITUDE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_ALTITUDE_INVALID', Y_ALTITUDE_INVALID);

            Y_GROUNDSPEED_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_GROUNDSPEED_INVALID', Y_GROUNDSPEED_INVALID);

            Y_DIRECTION_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_DIRECTION_INVALID', Y_DIRECTION_INVALID);

            Y_UNIXTIME_INVALID = YAPI.INVALID_LONG;

            _export('Y_UNIXTIME_INVALID', Y_UNIXTIME_INVALID);

            Y_DATETIME_INVALID = YAPI.INVALID_STRING;

            _export('Y_DATETIME_INVALID', Y_DATETIME_INVALID);

            Y_UTCOFFSET_INVALID = YAPI.INVALID_INT;

            _export('Y_UTCOFFSET_INVALID', Y_UTCOFFSET_INVALID);

            Y_COMMAND_INVALID = YAPI.INVALID_STRING;

            _export('Y_COMMAND_INVALID', Y_COMMAND_INVALID);

            YGps = (function (_YFunction) {
                _inherits(YGps, _YFunction);

                function YGps(obj_yapi, str_func) {
                    _classCallCheck(this, YGps);

                    _get(Object.getPrototypeOf(YGps.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Gps';

                    this._isFixed = Y_ISFIXED_INVALID;

                    this._satCount = Y_SATCOUNT_INVALID;

                    this._coordSystem = Y_COORDSYSTEM_INVALID;

                    this._latitude = Y_LATITUDE_INVALID;

                    this._longitude = Y_LONGITUDE_INVALID;

                    this._dilution = Y_DILUTION_INVALID;

                    this._altitude = Y_ALTITUDE_INVALID;

                    this._groundSpeed = Y_GROUNDSPEED_INVALID;

                    this._direction = Y_DIRECTION_INVALID;

                    this._unixTime = Y_UNIXTIME_INVALID;

                    this._dateTime = Y_DATETIME_INVALID;

                    this._utcOffset = Y_UTCOFFSET_INVALID;

                    this._command = Y_COMMAND_INVALID;
                    this.imm_setConst({
                        ISFIXED_FALSE: 0,
                        ISFIXED_TRUE: 1,
                        ISFIXED_INVALID: -1,
                        SATCOUNT_INVALID: YAPI.INVALID_LONG,
                        COORDSYSTEM_GPS_DMS: 0,
                        COORDSYSTEM_GPS_DM: 1,
                        COORDSYSTEM_GPS_D: 2,
                        COORDSYSTEM_INVALID: -1,
                        LATITUDE_INVALID: YAPI.INVALID_STRING,
                        LONGITUDE_INVALID: YAPI.INVALID_STRING,
                        DILUTION_INVALID: YAPI.INVALID_DOUBLE,
                        ALTITUDE_INVALID: YAPI.INVALID_DOUBLE,
                        GROUNDSPEED_INVALID: YAPI.INVALID_DOUBLE,
                        DIRECTION_INVALID: YAPI.INVALID_DOUBLE,
                        UNIXTIME_INVALID: YAPI.INVALID_LONG,
                        DATETIME_INVALID: YAPI.INVALID_STRING,
                        UTCOFFSET_INVALID: YAPI.INVALID_INT,
                        COMMAND_INVALID: YAPI.INVALID_STRING
                    });
                }

                _createClass(YGps, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'isFixed':
                                this._isFixed = parseInt(val);
                                return 1;
                            case 'satCount':
                                this._satCount = parseInt(val);
                                return 1;
                            case 'coordSystem':
                                this._coordSystem = parseInt(val);
                                return 1;
                            case 'latitude':
                                this._latitude = val;
                                return 1;
                            case 'longitude':
                                this._longitude = val;
                                return 1;
                            case 'dilution':
                                this._dilution = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'altitude':
                                this._altitude = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'groundSpeed':
                                this._groundSpeed = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'direction':
                                this._direction = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'unixTime':
                                this._unixTime = parseInt(val);
                                return 1;
                            case 'dateTime':
                                this._dateTime = val;
                                return 1;
                            case 'utcOffset':
                                this._utcOffset = parseInt(val);
                                return 1;
                            case 'command':
                                this._command = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YGps.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_isFixed',
                    value: function get_isFixed() {
                        return _regeneratorRuntime.async(function get_isFixed$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ISFIXED_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._isFixed);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_satCount',
                    value: function get_satCount() {
                        return _regeneratorRuntime.async(function get_satCount$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SATCOUNT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._satCount);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_coordSystem',
                    value: function get_coordSystem() {
                        return _regeneratorRuntime.async(function get_coordSystem$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COORDSYSTEM_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._coordSystem);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_coordSystem',
                    value: function set_coordSystem(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_coordSystem$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('coordSystem', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_latitude',
                    value: function get_latitude() {
                        return _regeneratorRuntime.async(function get_latitude$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LATITUDE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._latitude);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_longitude',
                    value: function get_longitude() {
                        return _regeneratorRuntime.async(function get_longitude$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LONGITUDE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._longitude);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_dilution',
                    value: function get_dilution() {
                        return _regeneratorRuntime.async(function get_dilution$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DILUTION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._dilution);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_altitude',
                    value: function get_altitude() {
                        return _regeneratorRuntime.async(function get_altitude$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ALTITUDE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._altitude);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_groundSpeed',
                    value: function get_groundSpeed() {
                        return _regeneratorRuntime.async(function get_groundSpeed$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_GROUNDSPEED_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._groundSpeed);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_direction',
                    value: function get_direction() {
                        return _regeneratorRuntime.async(function get_direction$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DIRECTION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._direction);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_unixTime',
                    value: function get_unixTime() {
                        return _regeneratorRuntime.async(function get_unixTime$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_UNIXTIME_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._unixTime);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_dateTime',
                    value: function get_dateTime() {
                        return _regeneratorRuntime.async(function get_dateTime$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DATETIME_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._dateTime);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_utcOffset',
                    value: function get_utcOffset() {
                        return _regeneratorRuntime.async(function get_utcOffset$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_UTCOFFSET_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._utcOffset);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_utcOffset',
                    value: function set_utcOffset(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_utcOffset$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('utcOffset', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_command',
                    value: function get_command() {
                        return _regeneratorRuntime.async(function get_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COMMAND_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._command);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_command',
                    value: function set_command(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('command', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextGps',
                    value: function nextGps() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YGps.FindGpsInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindGps',
                    value: function FindGps(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Gps', func);
                        if (obj == null) {
                            obj = new YGps(YAPI, func);
                            YFunction._AddToCache('Gps', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindGpsInContext',
                    value: function FindGpsInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Gps', func);
                        if (obj == null) {
                            obj = new YGps(yctx, func);
                            YFunction._AddToCache('Gps', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstGps',
                    value: function FirstGps() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Gps');
                        if (next_hwid == null) return null;
                        return YGps.FindGps(next_hwid);
                    }
                }, {
                    key: 'FirstGpsInContext',
                    value: function FirstGpsInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Gps');
                        if (next_hwid == null) return null;
                        return YGps.FindGpsInContext(yctx, next_hwid);
                    }
                }]);

                return YGps;
            })(YFunction);

            _export('YGps', YGps);
        }
    };
});
System.register('yoctolib-es/yocto_groundspeed.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, YGroundSpeed;

    function yFindGroundSpeed(func) {
        return YGroundSpeed.FindGroundSpeed(func);
    }

    function yFirstGroundSpeed() {
        return YGroundSpeed.FirstGroundSpeed();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindGroundSpeed', yFindGroundSpeed);

            _export('yFirstGroundSpeed', yFirstGroundSpeed);

            YGroundSpeed = (function (_YSensor) {
                _inherits(YGroundSpeed, _YSensor);

                function YGroundSpeed(obj_yapi, str_func) {
                    _classCallCheck(this, YGroundSpeed);

                    _get(Object.getPrototypeOf(YGroundSpeed.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'GroundSpeed';
                }

                _createClass(YGroundSpeed, [{
                    key: 'nextGroundSpeed',
                    value: function nextGroundSpeed() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YGroundSpeed.FindGroundSpeedInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindGroundSpeed',
                    value: function FindGroundSpeed(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('GroundSpeed', func);
                        if (obj == null) {
                            obj = new YGroundSpeed(YAPI, func);
                            YFunction._AddToCache('GroundSpeed', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindGroundSpeedInContext',
                    value: function FindGroundSpeedInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'GroundSpeed', func);
                        if (obj == null) {
                            obj = new YGroundSpeed(yctx, func);
                            YFunction._AddToCache('GroundSpeed', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstGroundSpeed',
                    value: function FirstGroundSpeed() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('GroundSpeed');
                        if (next_hwid == null) return null;
                        return YGroundSpeed.FindGroundSpeed(next_hwid);
                    }
                }, {
                    key: 'FirstGroundSpeedInContext',
                    value: function FirstGroundSpeedInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('GroundSpeed');
                        if (next_hwid == null) return null;
                        return YGroundSpeed.FindGroundSpeedInContext(yctx, next_hwid);
                    }
                }]);

                return YGroundSpeed;
            })(YSensor);

            _export('YGroundSpeed', YGroundSpeed);
        }
    };
});
System.register('yoctolib-es/yocto_gyro.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_XVALUE_INVALID, Y_YVALUE_INVALID, Y_ZVALUE_INVALID, YQt, YGyro;

    function yFindQt(func) {
        return YQt.FindQt(func);
    }

    function yFirstQt() {
        return YQt.FirstQt();
    }

    function yInternalGyroCallback(YQt_obj, str_value) {
        var gyro = YQt_obj.get_userData();
        if (!gyro) return;
        var idx = parseInt(YQt_obj.get_functionId().slice(2));
        gyro._invokeGyroCallbacks(idx, parseInt(str_value));
    }

    function yFindGyro(func) {
        return YGyro.FindGyro(func);
    }

    function yFirstGyro() {
        return YGyro.FirstGyro();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {
            'use strict';

            _export('yFindQt', yFindQt);

            _export('yFirstQt', yFirstQt);

            _export('yFindGyro', yFindGyro);

            _export('yFirstGyro', yFirstGyro);

            Y_XVALUE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_XVALUE_INVALID', Y_XVALUE_INVALID);

            Y_YVALUE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_YVALUE_INVALID', Y_YVALUE_INVALID);

            Y_ZVALUE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_ZVALUE_INVALID', Y_ZVALUE_INVALID);

            YQt = (function (_YFunction) {
                _inherits(YQt, _YFunction);

                function YQt(str_func) {
                    _classCallCheck(this, YQt);

                    _get(Object.getPrototypeOf(YQt.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Qt';
                }

                _createClass(YQt, [{
                    key: 'nextQt',
                    value: function nextQt() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YQt.FindQtInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindQt',
                    value: function FindQt(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Qt', func);
                        if (obj == null) {
                            obj = new YQt(YAPI, func);
                            YFunction._AddToCache('Qt', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindQtInContext',
                    value: function FindQtInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Qt', func);
                        if (obj == null) {
                            obj = new YQt(yctx, func);
                            YFunction._AddToCache('Qt', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstQt',
                    value: function FirstQt() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Qt');
                        if (next_hwid == null) return null;
                        return YQt.FindQt(next_hwid);
                    }
                }, {
                    key: 'FirstQtInContext',
                    value: function FirstQtInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Qt');
                        if (next_hwid == null) return null;
                        return YQt.FindQtInContext(yctx, next_hwid);
                    }
                }]);

                return YQt;
            })(YFunction);

            _export('YQt', YQt);

            YGyro = (function (_YFunction2) {
                _inherits(YGyro, _YFunction2);

                function YGyro(str_func) {
                    _classCallCheck(this, YGyro);

                    _get(Object.getPrototypeOf(YGyro.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Gyro';

                    this._xValue = Y_XVALUE_INVALID;

                    this._yValue = Y_YVALUE_INVALID;

                    this._zValue = Y_ZVALUE_INVALID;

                    this._qt_stamp = 0;

                    this._qt_w = null;

                    this._qt_x = null;

                    this._qt_y = null;

                    this._qt_z = null;

                    this._w = 0;

                    this._x = 0;

                    this._y = 0;

                    this._z = 0;

                    this._angles_stamp = 0;

                    this._head = 0;

                    this._pitch = 0;

                    this._roll = 0;

                    this._quatCallback = null;

                    this._anglesCallback = null;
                    this.imm_setConst({
                        XVALUE_INVALID: YAPI.INVALID_DOUBLE,
                        YVALUE_INVALID: YAPI.INVALID_DOUBLE,
                        ZVALUE_INVALID: YAPI.INVALID_DOUBLE
                    });
                }

                _createClass(YGyro, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'xValue':
                                this._xValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'yValue':
                                this._yValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'zValue':
                                this._zValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YGyro.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_xValue',
                    value: function get_xValue() {
                        return _regeneratorRuntime.async(function get_xValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_XVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._xValue);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_yValue',
                    value: function get_yValue() {
                        return _regeneratorRuntime.async(function get_yValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_YVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._yValue);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_zValue',
                    value: function get_zValue() {
                        return _regeneratorRuntime.async(function get_zValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ZVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._zValue);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_loadQuaternion',
                    value: function _loadQuaternion() {
                        var now_stamp, age_ms;
                        return _regeneratorRuntime.async(function _loadQuaternion$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    now_stamp = undefined;
                                    age_ms = undefined;

                                    now_stamp = this._yapi.GetTickCount() & 0x7FFFFFFF;
                                    age_ms = now_stamp - this._qt_stamp & 0x7FFFFFFF;

                                    if (!(age_ms >= 10 || this._qt_stamp == 0)) {
                                        context$2$0.next = 61;
                                        break;
                                    }

                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this.load(10));

                                case 7:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_DEVICE_NOT_FOUND);

                                case 11:
                                    if (!(this._qt_stamp == 0)) {
                                        context$2$0.next = 24;
                                        break;
                                    }

                                    context$2$0.next = 14;
                                    return _regeneratorRuntime.awrap(YQt.FindQtInContext(this._serial + '.qt1'));

                                case 14:
                                    this._qt_w = context$2$0.sent;
                                    context$2$0.next = 17;
                                    return _regeneratorRuntime.awrap(YQt.FindQtInContext(this._serial + '.qt2'));

                                case 17:
                                    this._qt_x = context$2$0.sent;
                                    context$2$0.next = 20;
                                    return _regeneratorRuntime.awrap(YQt.FindQtInContext(this._serial + '.qt3'));

                                case 20:
                                    this._qt_y = context$2$0.sent;
                                    context$2$0.next = 23;
                                    return _regeneratorRuntime.awrap(YQt.FindQtInContext(this._serial + '.qt4'));

                                case 23:
                                    this._qt_z = context$2$0.sent;

                                case 24:
                                    context$2$0.next = 26;
                                    return _regeneratorRuntime.awrap(this._qt_w.load(9));

                                case 26:
                                    context$2$0.t2 = context$2$0.sent;
                                    context$2$0.t3 = YAPI_SUCCESS;

                                    if (!(context$2$0.t2 != context$2$0.t3)) {
                                        context$2$0.next = 30;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_DEVICE_NOT_FOUND);

                                case 30:
                                    context$2$0.next = 32;
                                    return _regeneratorRuntime.awrap(this._qt_x.load(9));

                                case 32:
                                    context$2$0.t4 = context$2$0.sent;
                                    context$2$0.t5 = YAPI_SUCCESS;

                                    if (!(context$2$0.t4 != context$2$0.t5)) {
                                        context$2$0.next = 36;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_DEVICE_NOT_FOUND);

                                case 36:
                                    context$2$0.next = 38;
                                    return _regeneratorRuntime.awrap(this._qt_y.load(9));

                                case 38:
                                    context$2$0.t6 = context$2$0.sent;
                                    context$2$0.t7 = YAPI_SUCCESS;

                                    if (!(context$2$0.t6 != context$2$0.t7)) {
                                        context$2$0.next = 42;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_DEVICE_NOT_FOUND);

                                case 42:
                                    context$2$0.next = 44;
                                    return _regeneratorRuntime.awrap(this._qt_z.load(9));

                                case 44:
                                    context$2$0.t8 = context$2$0.sent;
                                    context$2$0.t9 = YAPI_SUCCESS;

                                    if (!(context$2$0.t8 != context$2$0.t9)) {
                                        context$2$0.next = 48;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_DEVICE_NOT_FOUND);

                                case 48:
                                    context$2$0.next = 50;
                                    return _regeneratorRuntime.awrap(this._qt_w.get_currentValue());

                                case 50:
                                    this._w = context$2$0.sent;
                                    context$2$0.next = 53;
                                    return _regeneratorRuntime.awrap(this._qt_x.get_currentValue());

                                case 53:
                                    this._x = context$2$0.sent;
                                    context$2$0.next = 56;
                                    return _regeneratorRuntime.awrap(this._qt_y.get_currentValue());

                                case 56:
                                    this._y = context$2$0.sent;
                                    context$2$0.next = 59;
                                    return _regeneratorRuntime.awrap(this._qt_z.get_currentValue());

                                case 59:
                                    this._z = context$2$0.sent;

                                    this._qt_stamp = now_stamp;

                                case 61:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 62:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_loadAngles',
                    value: function _loadAngles() {
                        var sqw, sqx, sqy, sqz, norm, delta;
                        return _regeneratorRuntime.async(function _loadAngles$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    sqw = undefined;
                                    sqx = undefined;
                                    sqy = undefined;
                                    sqz = undefined;
                                    norm = undefined;
                                    delta = undefined;
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(this._loadQuaternion());

                                case 8:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 12;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_DEVICE_NOT_FOUND);

                                case 12:
                                    if (this._angles_stamp != this._qt_stamp) {
                                        sqw = this._w * this._w;
                                        sqx = this._x * this._x;
                                        sqy = this._y * this._y;
                                        sqz = this._z * this._z;
                                        norm = sqx + sqy + sqz + sqw;
                                        delta = this._y * this._w - this._x * this._z;
                                        if (delta > 0.499 * norm) {
                                            this._pitch = 90.0;
                                            this._head = Math.round(2.0 * 1800.0 / Math.PI * Math.atan2(this._x, this._w)) / 10.0;
                                        } else {
                                            if (delta < -0.499 * norm) {
                                                this._pitch = -90.0;
                                                this._head = Math.round(-2.0 * 1800.0 / Math.PI * Math.atan2(this._x, this._w)) / 10.0;
                                            } else {
                                                this._roll = Math.round(1800.0 / Math.PI * Math.atan2(2.0 * (this._w * this._x + this._y * this._z), sqw - sqx - sqy + sqz)) / 10.0;
                                                this._pitch = Math.round(1800.0 / Math.PI * Math.asin(2.0 * delta / norm)) / 10.0;
                                                this._head = Math.round(1800.0 / Math.PI * Math.atan2(2.0 * (this._x * this._y + this._z * this._w), sqw + sqx - sqy - sqz)) / 10.0;
                                            }
                                        }
                                        this._angles_stamp = this._qt_stamp;
                                    }
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 14:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_roll',
                    value: function get_roll() {
                        return _regeneratorRuntime.async(function get_roll$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._loadAngles());

                                case 2:
                                    return context$2$0.abrupt('return', this._roll);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_pitch',
                    value: function get_pitch() {
                        return _regeneratorRuntime.async(function get_pitch$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._loadAngles());

                                case 2:
                                    return context$2$0.abrupt('return', this._pitch);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_heading',
                    value: function get_heading() {
                        return _regeneratorRuntime.async(function get_heading$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._loadAngles());

                                case 2:
                                    return context$2$0.abrupt('return', this._head);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_quaternionW',
                    value: function get_quaternionW() {
                        return _regeneratorRuntime.async(function get_quaternionW$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._loadQuaternion());

                                case 2:
                                    return context$2$0.abrupt('return', this._w);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_quaternionX',
                    value: function get_quaternionX() {
                        return _regeneratorRuntime.async(function get_quaternionX$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._loadQuaternion());

                                case 2:
                                    return context$2$0.abrupt('return', this._x);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_quaternionY',
                    value: function get_quaternionY() {
                        return _regeneratorRuntime.async(function get_quaternionY$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._loadQuaternion());

                                case 2:
                                    return context$2$0.abrupt('return', this._y);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_quaternionZ',
                    value: function get_quaternionZ() {
                        return _regeneratorRuntime.async(function get_quaternionZ$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._loadQuaternion());

                                case 2:
                                    return context$2$0.abrupt('return', this._z);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'registerQuaternionCallback',
                    value: function registerQuaternionCallback(callback) {
                        return _regeneratorRuntime.async(function registerQuaternionCallback$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._quatCallback = callback;

                                    if (!(callback != null)) {
                                        context$2$0.next = 26;
                                        break;
                                    }

                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._loadQuaternion());

                                case 4:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_DEVICE_NOT_FOUND);

                                case 8:
                                    context$2$0.next = 10;
                                    return _regeneratorRuntime.awrap(this._qt_w.set_userData(this));

                                case 10:
                                    context$2$0.next = 12;
                                    return _regeneratorRuntime.awrap(this._qt_x.set_userData(this));

                                case 12:
                                    context$2$0.next = 14;
                                    return _regeneratorRuntime.awrap(this._qt_y.set_userData(this));

                                case 14:
                                    context$2$0.next = 16;
                                    return _regeneratorRuntime.awrap(this._qt_z.set_userData(this));

                                case 16:
                                    context$2$0.next = 18;
                                    return _regeneratorRuntime.awrap(this._qt_w.registerValueCallback(yInternalGyroCallback));

                                case 18:
                                    context$2$0.next = 20;
                                    return _regeneratorRuntime.awrap(this._qt_x.registerValueCallback(yInternalGyroCallback));

                                case 20:
                                    context$2$0.next = 22;
                                    return _regeneratorRuntime.awrap(this._qt_y.registerValueCallback(yInternalGyroCallback));

                                case 22:
                                    context$2$0.next = 24;
                                    return _regeneratorRuntime.awrap(this._qt_z.registerValueCallback(yInternalGyroCallback));

                                case 24:
                                    context$2$0.next = 35;
                                    break;

                                case 26:
                                    if (this._anglesCallback != null) {
                                        context$2$0.next = 35;
                                        break;
                                    }

                                    context$2$0.next = 29;
                                    return _regeneratorRuntime.awrap(this._qt_w.registerValueCallback(null));

                                case 29:
                                    context$2$0.next = 31;
                                    return _regeneratorRuntime.awrap(this._qt_x.registerValueCallback(null));

                                case 31:
                                    context$2$0.next = 33;
                                    return _regeneratorRuntime.awrap(this._qt_y.registerValueCallback(null));

                                case 33:
                                    context$2$0.next = 35;
                                    return _regeneratorRuntime.awrap(this._qt_z.registerValueCallback(null));

                                case 35:
                                    return context$2$0.abrupt('return', 0);

                                case 36:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'registerAnglesCallback',
                    value: function registerAnglesCallback(callback) {
                        return _regeneratorRuntime.async(function registerAnglesCallback$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._anglesCallback = callback;

                                    if (!(callback != null)) {
                                        context$2$0.next = 26;
                                        break;
                                    }

                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._loadQuaternion());

                                case 4:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_DEVICE_NOT_FOUND);

                                case 8:
                                    context$2$0.next = 10;
                                    return _regeneratorRuntime.awrap(this._qt_w.set_userData(this));

                                case 10:
                                    context$2$0.next = 12;
                                    return _regeneratorRuntime.awrap(this._qt_x.set_userData(this));

                                case 12:
                                    context$2$0.next = 14;
                                    return _regeneratorRuntime.awrap(this._qt_y.set_userData(this));

                                case 14:
                                    context$2$0.next = 16;
                                    return _regeneratorRuntime.awrap(this._qt_z.set_userData(this));

                                case 16:
                                    context$2$0.next = 18;
                                    return _regeneratorRuntime.awrap(this._qt_w.registerValueCallback(yInternalGyroCallback));

                                case 18:
                                    context$2$0.next = 20;
                                    return _regeneratorRuntime.awrap(this._qt_x.registerValueCallback(yInternalGyroCallback));

                                case 20:
                                    context$2$0.next = 22;
                                    return _regeneratorRuntime.awrap(this._qt_y.registerValueCallback(yInternalGyroCallback));

                                case 22:
                                    context$2$0.next = 24;
                                    return _regeneratorRuntime.awrap(this._qt_z.registerValueCallback(yInternalGyroCallback));

                                case 24:
                                    context$2$0.next = 35;
                                    break;

                                case 26:
                                    if (this._quatCallback != null) {
                                        context$2$0.next = 35;
                                        break;
                                    }

                                    context$2$0.next = 29;
                                    return _regeneratorRuntime.awrap(this._qt_w.registerValueCallback(null));

                                case 29:
                                    context$2$0.next = 31;
                                    return _regeneratorRuntime.awrap(this._qt_x.registerValueCallback(null));

                                case 31:
                                    context$2$0.next = 33;
                                    return _regeneratorRuntime.awrap(this._qt_y.registerValueCallback(null));

                                case 33:
                                    context$2$0.next = 35;
                                    return _regeneratorRuntime.awrap(this._qt_z.registerValueCallback(null));

                                case 35:
                                    return context$2$0.abrupt('return', 0);

                                case 36:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_invokeGyroCallbacks',
                    value: function _invokeGyroCallbacks(qtIndex, qtValue) {
                        return _regeneratorRuntime.async(function _invokeGyroCallbacks$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.t0 = qtIndex - 1;
                                    context$2$0.next = context$2$0.t0 === 0 ? 3 : context$2$0.t0 === 1 ? 5 : context$2$0.t0 === 2 ? 7 : context$2$0.t0 === 3 ? 9 : 11;
                                    break;

                                case 3:
                                    this._w = qtValue;
                                    return context$2$0.abrupt('break', 11);

                                case 5:
                                    this._x = qtValue;
                                    return context$2$0.abrupt('break', 11);

                                case 7:
                                    this._y = qtValue;
                                    return context$2$0.abrupt('break', 11);

                                case 9:
                                    this._z = qtValue;
                                    return context$2$0.abrupt('break', 11);

                                case 11:
                                    if (!(qtIndex < 4)) {
                                        context$2$0.next = 13;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', 0);

                                case 13:
                                    this._qt_stamp = this._yapi.GetTickCount() & 0x7FFFFFFF;

                                    if (!(this._quatCallback != null)) {
                                        context$2$0.next = 17;
                                        break;
                                    }

                                    context$2$0.next = 17;
                                    return _regeneratorRuntime.awrap(this._quatCallback(this, this._w, this._x, this._y, this._z));

                                case 17:
                                    if (!(this._anglesCallback != null)) {
                                        context$2$0.next = 22;
                                        break;
                                    }

                                    context$2$0.next = 20;
                                    return _regeneratorRuntime.awrap(this._loadAngles());

                                case 20:
                                    context$2$0.next = 22;
                                    return _regeneratorRuntime.awrap(this._anglesCallback(this, this._roll, this._pitch, this._head));

                                case 22:
                                    return context$2$0.abrupt('return', 0);

                                case 23:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextGyro',
                    value: function nextGyro() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YGyro.FindGyroInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindGyro',
                    value: function FindGyro(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Gyro', func);
                        if (obj == null) {
                            obj = new YGyro(YAPI, func);
                            YFunction._AddToCache('Gyro', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindGyroInContext',
                    value: function FindGyroInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Gyro', func);
                        if (obj == null) {
                            obj = new YGyro(yctx, func);
                            YFunction._AddToCache('Gyro', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstGyro',
                    value: function FirstGyro() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Gyro');
                        if (next_hwid == null) return null;
                        return YGyro.FindGyro(next_hwid);
                    }
                }, {
                    key: 'FirstGyroInContext',
                    value: function FirstGyroInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Gyro');
                        if (next_hwid == null) return null;
                        return YGyro.FindGyroInContext(yctx, next_hwid);
                    }
                }]);

                return YGyro;
            })(YFunction);

            _export('YGyro', YGyro);
        }
    };
});
System.register('yoctolib-es/yocto_hubport.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_ENABLED_FALSE, Y_ENABLED_TRUE, Y_ENABLED_INVALID, Y_PORTSTATE_OFF, Y_PORTSTATE_OVRLD, Y_PORTSTATE_ON, Y_PORTSTATE_RUN, Y_PORTSTATE_PROG, Y_PORTSTATE_INVALID, Y_BAUDRATE_INVALID, YHubPort;

    function yFindHubPort(func) {
        return YHubPort.FindHubPort(func);
    }

    function yFirstHubPort() {
        return YHubPort.FirstHubPort();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindHubPort', yFindHubPort);

            _export('yFirstHubPort', yFirstHubPort);

            Y_ENABLED_FALSE = 0;

            _export('Y_ENABLED_FALSE', Y_ENABLED_FALSE);

            Y_ENABLED_TRUE = 1;

            _export('Y_ENABLED_TRUE', Y_ENABLED_TRUE);

            Y_ENABLED_INVALID = -1;

            _export('Y_ENABLED_INVALID', Y_ENABLED_INVALID);

            Y_PORTSTATE_OFF = 0;

            _export('Y_PORTSTATE_OFF', Y_PORTSTATE_OFF);

            Y_PORTSTATE_OVRLD = 1;

            _export('Y_PORTSTATE_OVRLD', Y_PORTSTATE_OVRLD);

            Y_PORTSTATE_ON = 2;

            _export('Y_PORTSTATE_ON', Y_PORTSTATE_ON);

            Y_PORTSTATE_RUN = 3;

            _export('Y_PORTSTATE_RUN', Y_PORTSTATE_RUN);

            Y_PORTSTATE_PROG = 4;

            _export('Y_PORTSTATE_PROG', Y_PORTSTATE_PROG);

            Y_PORTSTATE_INVALID = -1;

            _export('Y_PORTSTATE_INVALID', Y_PORTSTATE_INVALID);

            Y_BAUDRATE_INVALID = YAPI.INVALID_UINT;

            _export('Y_BAUDRATE_INVALID', Y_BAUDRATE_INVALID);

            YHubPort = (function (_YFunction) {
                _inherits(YHubPort, _YFunction);

                function YHubPort(obj_yapi, str_func) {
                    _classCallCheck(this, YHubPort);

                    _get(Object.getPrototypeOf(YHubPort.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'HubPort';

                    this._enabled = Y_ENABLED_INVALID;

                    this._portState = Y_PORTSTATE_INVALID;

                    this._baudRate = Y_BAUDRATE_INVALID;
                    this.imm_setConst({
                        ENABLED_FALSE: 0,
                        ENABLED_TRUE: 1,
                        ENABLED_INVALID: -1,
                        PORTSTATE_OFF: 0,
                        PORTSTATE_OVRLD: 1,
                        PORTSTATE_ON: 2,
                        PORTSTATE_RUN: 3,
                        PORTSTATE_PROG: 4,
                        PORTSTATE_INVALID: -1,
                        BAUDRATE_INVALID: YAPI.INVALID_UINT
                    });
                }

                _createClass(YHubPort, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'enabled':
                                this._enabled = parseInt(val);
                                return 1;
                            case 'portState':
                                this._portState = parseInt(val);
                                return 1;
                            case 'baudRate':
                                this._baudRate = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YHubPort.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_enabled',
                    value: function get_enabled() {
                        return _regeneratorRuntime.async(function get_enabled$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ENABLED_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._enabled);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_enabled',
                    value: function set_enabled(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_enabled$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('enabled', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_portState',
                    value: function get_portState() {
                        return _regeneratorRuntime.async(function get_portState$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PORTSTATE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._portState);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_baudRate',
                    value: function get_baudRate() {
                        return _regeneratorRuntime.async(function get_baudRate$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_BAUDRATE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._baudRate);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextHubPort',
                    value: function nextHubPort() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YHubPort.FindHubPortInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindHubPort',
                    value: function FindHubPort(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('HubPort', func);
                        if (obj == null) {
                            obj = new YHubPort(YAPI, func);
                            YFunction._AddToCache('HubPort', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindHubPortInContext',
                    value: function FindHubPortInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'HubPort', func);
                        if (obj == null) {
                            obj = new YHubPort(yctx, func);
                            YFunction._AddToCache('HubPort', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstHubPort',
                    value: function FirstHubPort() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('HubPort');
                        if (next_hwid == null) return null;
                        return YHubPort.FindHubPort(next_hwid);
                    }
                }, {
                    key: 'FirstHubPortInContext',
                    value: function FirstHubPortInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('HubPort');
                        if (next_hwid == null) return null;
                        return YHubPort.FindHubPortInContext(yctx, next_hwid);
                    }
                }]);

                return YHubPort;
            })(YFunction);

            _export('YHubPort', YHubPort);
        }
    };
});
System.register('yoctolib-es/yocto_humidity.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_RELHUM_INVALID, Y_ABSHUM_INVALID, YHumidity;

    function yFindHumidity(func) {
        return YHumidity.FindHumidity(func);
    }

    function yFirstHumidity() {
        return YHumidity.FirstHumidity();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindHumidity', yFindHumidity);

            _export('yFirstHumidity', yFirstHumidity);

            Y_RELHUM_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_RELHUM_INVALID', Y_RELHUM_INVALID);

            Y_ABSHUM_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_ABSHUM_INVALID', Y_ABSHUM_INVALID);

            YHumidity = (function (_YSensor) {
                _inherits(YHumidity, _YSensor);

                function YHumidity(obj_yapi, str_func) {
                    _classCallCheck(this, YHumidity);

                    _get(Object.getPrototypeOf(YHumidity.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Humidity';

                    this._relHum = Y_RELHUM_INVALID;

                    this._absHum = Y_ABSHUM_INVALID;
                    this.imm_setConst({
                        RELHUM_INVALID: YAPI.INVALID_DOUBLE,
                        ABSHUM_INVALID: YAPI.INVALID_DOUBLE
                    });
                }

                _createClass(YHumidity, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'relHum':
                                this._relHum = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'absHum':
                                this._absHum = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YHumidity.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'set_unit',
                    value: function set_unit(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_unit$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('unit', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_relHum',
                    value: function get_relHum() {
                        return _regeneratorRuntime.async(function get_relHum$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_RELHUM_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._relHum);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_absHum',
                    value: function get_absHum() {
                        return _regeneratorRuntime.async(function get_absHum$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ABSHUM_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._absHum);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextHumidity',
                    value: function nextHumidity() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YHumidity.FindHumidityInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindHumidity',
                    value: function FindHumidity(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Humidity', func);
                        if (obj == null) {
                            obj = new YHumidity(YAPI, func);
                            YFunction._AddToCache('Humidity', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindHumidityInContext',
                    value: function FindHumidityInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Humidity', func);
                        if (obj == null) {
                            obj = new YHumidity(yctx, func);
                            YFunction._AddToCache('Humidity', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstHumidity',
                    value: function FirstHumidity() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Humidity');
                        if (next_hwid == null) return null;
                        return YHumidity.FindHumidity(next_hwid);
                    }
                }, {
                    key: 'FirstHumidityInContext',
                    value: function FirstHumidityInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Humidity');
                        if (next_hwid == null) return null;
                        return YHumidity.FindHumidityInContext(yctx, next_hwid);
                    }
                }]);

                return YHumidity;
            })(YSensor);

            _export('YHumidity', YHumidity);
        }
    };
});
System.register('yoctolib-es/yocto_latitude.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, YLatitude;

    function yFindLatitude(func) {
        return YLatitude.FindLatitude(func);
    }

    function yFirstLatitude() {
        return YLatitude.FirstLatitude();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindLatitude', yFindLatitude);

            _export('yFirstLatitude', yFirstLatitude);

            YLatitude = (function (_YSensor) {
                _inherits(YLatitude, _YSensor);

                function YLatitude(obj_yapi, str_func) {
                    _classCallCheck(this, YLatitude);

                    _get(Object.getPrototypeOf(YLatitude.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Latitude';
                }

                _createClass(YLatitude, [{
                    key: 'nextLatitude',
                    value: function nextLatitude() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YLatitude.FindLatitudeInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindLatitude',
                    value: function FindLatitude(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Latitude', func);
                        if (obj == null) {
                            obj = new YLatitude(YAPI, func);
                            YFunction._AddToCache('Latitude', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindLatitudeInContext',
                    value: function FindLatitudeInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Latitude', func);
                        if (obj == null) {
                            obj = new YLatitude(yctx, func);
                            YFunction._AddToCache('Latitude', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstLatitude',
                    value: function FirstLatitude() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Latitude');
                        if (next_hwid == null) return null;
                        return YLatitude.FindLatitude(next_hwid);
                    }
                }, {
                    key: 'FirstLatitudeInContext',
                    value: function FirstLatitudeInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Latitude');
                        if (next_hwid == null) return null;
                        return YLatitude.FindLatitudeInContext(yctx, next_hwid);
                    }
                }]);

                return YLatitude;
            })(YSensor);

            _export('YLatitude', YLatitude);
        }
    };
});
System.register('yoctolib-es/yocto_led.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_POWER_OFF, Y_POWER_ON, Y_POWER_INVALID, Y_BLINKING_STILL, Y_BLINKING_RELAX, Y_BLINKING_AWARE, Y_BLINKING_RUN, Y_BLINKING_CALL, Y_BLINKING_PANIC, Y_BLINKING_INVALID, Y_LUMINOSITY_INVALID, YLed;

    function yFindLed(func) {
        return YLed.FindLed(func);
    }

    function yFirstLed() {
        return YLed.FirstLed();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindLed', yFindLed);

            _export('yFirstLed', yFirstLed);

            Y_POWER_OFF = 0;

            _export('Y_POWER_OFF', Y_POWER_OFF);

            Y_POWER_ON = 1;

            _export('Y_POWER_ON', Y_POWER_ON);

            Y_POWER_INVALID = -1;

            _export('Y_POWER_INVALID', Y_POWER_INVALID);

            Y_BLINKING_STILL = 0;

            _export('Y_BLINKING_STILL', Y_BLINKING_STILL);

            Y_BLINKING_RELAX = 1;

            _export('Y_BLINKING_RELAX', Y_BLINKING_RELAX);

            Y_BLINKING_AWARE = 2;

            _export('Y_BLINKING_AWARE', Y_BLINKING_AWARE);

            Y_BLINKING_RUN = 3;

            _export('Y_BLINKING_RUN', Y_BLINKING_RUN);

            Y_BLINKING_CALL = 4;

            _export('Y_BLINKING_CALL', Y_BLINKING_CALL);

            Y_BLINKING_PANIC = 5;

            _export('Y_BLINKING_PANIC', Y_BLINKING_PANIC);

            Y_BLINKING_INVALID = -1;

            _export('Y_BLINKING_INVALID', Y_BLINKING_INVALID);

            Y_LUMINOSITY_INVALID = YAPI.INVALID_UINT;

            _export('Y_LUMINOSITY_INVALID', Y_LUMINOSITY_INVALID);

            YLed = (function (_YFunction) {
                _inherits(YLed, _YFunction);

                function YLed(obj_yapi, str_func) {
                    _classCallCheck(this, YLed);

                    _get(Object.getPrototypeOf(YLed.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Led';

                    this._power = Y_POWER_INVALID;

                    this._luminosity = Y_LUMINOSITY_INVALID;

                    this._blinking = Y_BLINKING_INVALID;
                    this.imm_setConst({
                        POWER_OFF: 0,
                        POWER_ON: 1,
                        POWER_INVALID: -1,
                        LUMINOSITY_INVALID: YAPI.INVALID_UINT,
                        BLINKING_STILL: 0,
                        BLINKING_RELAX: 1,
                        BLINKING_AWARE: 2,
                        BLINKING_RUN: 3,
                        BLINKING_CALL: 4,
                        BLINKING_PANIC: 5,
                        BLINKING_INVALID: -1
                    });
                }

                _createClass(YLed, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'power':
                                this._power = parseInt(val);
                                return 1;
                            case 'luminosity':
                                this._luminosity = parseInt(val);
                                return 1;
                            case 'blinking':
                                this._blinking = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YLed.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_power',
                    value: function get_power() {
                        return _regeneratorRuntime.async(function get_power$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_POWER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._power);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_power',
                    value: function set_power(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_power$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('power', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_luminosity',
                    value: function get_luminosity() {
                        return _regeneratorRuntime.async(function get_luminosity$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LUMINOSITY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._luminosity);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_luminosity',
                    value: function set_luminosity(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_luminosity$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('luminosity', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_blinking',
                    value: function get_blinking() {
                        return _regeneratorRuntime.async(function get_blinking$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_BLINKING_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._blinking);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_blinking',
                    value: function set_blinking(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_blinking$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('blinking', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextLed',
                    value: function nextLed() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YLed.FindLedInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindLed',
                    value: function FindLed(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Led', func);
                        if (obj == null) {
                            obj = new YLed(YAPI, func);
                            YFunction._AddToCache('Led', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindLedInContext',
                    value: function FindLedInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Led', func);
                        if (obj == null) {
                            obj = new YLed(yctx, func);
                            YFunction._AddToCache('Led', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstLed',
                    value: function FirstLed() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Led');
                        if (next_hwid == null) return null;
                        return YLed.FindLed(next_hwid);
                    }
                }, {
                    key: 'FirstLedInContext',
                    value: function FirstLedInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Led');
                        if (next_hwid == null) return null;
                        return YLed.FindLedInContext(yctx, next_hwid);
                    }
                }]);

                return YLed;
            })(YFunction);

            _export('YLed', YLed);
        }
    };
});
System.register('yoctolib-es/yocto_lightsensor.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_MEASURETYPE_HUMAN_EYE, Y_MEASURETYPE_WIDE_SPECTRUM, Y_MEASURETYPE_INFRARED, Y_MEASURETYPE_HIGH_RATE, Y_MEASURETYPE_HIGH_ENERGY, Y_MEASURETYPE_INVALID, YLightSensor;

    function yFindLightSensor(func) {
        return YLightSensor.FindLightSensor(func);
    }

    function yFirstLightSensor() {
        return YLightSensor.FirstLightSensor();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindLightSensor', yFindLightSensor);

            _export('yFirstLightSensor', yFirstLightSensor);

            Y_MEASURETYPE_HUMAN_EYE = 0;

            _export('Y_MEASURETYPE_HUMAN_EYE', Y_MEASURETYPE_HUMAN_EYE);

            Y_MEASURETYPE_WIDE_SPECTRUM = 1;

            _export('Y_MEASURETYPE_WIDE_SPECTRUM', Y_MEASURETYPE_WIDE_SPECTRUM);

            Y_MEASURETYPE_INFRARED = 2;

            _export('Y_MEASURETYPE_INFRARED', Y_MEASURETYPE_INFRARED);

            Y_MEASURETYPE_HIGH_RATE = 3;

            _export('Y_MEASURETYPE_HIGH_RATE', Y_MEASURETYPE_HIGH_RATE);

            Y_MEASURETYPE_HIGH_ENERGY = 4;

            _export('Y_MEASURETYPE_HIGH_ENERGY', Y_MEASURETYPE_HIGH_ENERGY);

            Y_MEASURETYPE_INVALID = -1;

            _export('Y_MEASURETYPE_INVALID', Y_MEASURETYPE_INVALID);

            YLightSensor = (function (_YSensor) {
                _inherits(YLightSensor, _YSensor);

                function YLightSensor(obj_yapi, str_func) {
                    _classCallCheck(this, YLightSensor);

                    _get(Object.getPrototypeOf(YLightSensor.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'LightSensor';

                    this._measureType = Y_MEASURETYPE_INVALID;
                    this.imm_setConst({
                        MEASURETYPE_HUMAN_EYE: 0,
                        MEASURETYPE_WIDE_SPECTRUM: 1,
                        MEASURETYPE_INFRARED: 2,
                        MEASURETYPE_HIGH_RATE: 3,
                        MEASURETYPE_HIGH_ENERGY: 4,
                        MEASURETYPE_INVALID: -1
                    });
                }

                _createClass(YLightSensor, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'measureType':
                                this._measureType = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YLightSensor.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'set_currentValue',
                    value: function set_currentValue(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_currentValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('currentValue', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'calibrate',
                    value: function calibrate(calibratedVal) {
                        var rest_val;
                        return _regeneratorRuntime.async(function calibrate$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(calibratedVal * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('currentValue', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_measureType',
                    value: function get_measureType() {
                        return _regeneratorRuntime.async(function get_measureType$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MEASURETYPE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._measureType);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_measureType',
                    value: function set_measureType(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_measureType$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('measureType', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextLightSensor',
                    value: function nextLightSensor() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YLightSensor.FindLightSensorInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindLightSensor',
                    value: function FindLightSensor(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('LightSensor', func);
                        if (obj == null) {
                            obj = new YLightSensor(YAPI, func);
                            YFunction._AddToCache('LightSensor', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindLightSensorInContext',
                    value: function FindLightSensorInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'LightSensor', func);
                        if (obj == null) {
                            obj = new YLightSensor(yctx, func);
                            YFunction._AddToCache('LightSensor', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstLightSensor',
                    value: function FirstLightSensor() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('LightSensor');
                        if (next_hwid == null) return null;
                        return YLightSensor.FindLightSensor(next_hwid);
                    }
                }, {
                    key: 'FirstLightSensorInContext',
                    value: function FirstLightSensorInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('LightSensor');
                        if (next_hwid == null) return null;
                        return YLightSensor.FindLightSensorInContext(yctx, next_hwid);
                    }
                }]);

                return YLightSensor;
            })(YSensor);

            _export('YLightSensor', YLightSensor);
        }
    };
});
System.register('yoctolib-es/yocto_longitude.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, YLongitude;

    function yFindLongitude(func) {
        return YLongitude.FindLongitude(func);
    }

    function yFirstLongitude() {
        return YLongitude.FirstLongitude();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindLongitude', yFindLongitude);

            _export('yFirstLongitude', yFirstLongitude);

            YLongitude = (function (_YSensor) {
                _inherits(YLongitude, _YSensor);

                function YLongitude(obj_yapi, str_func) {
                    _classCallCheck(this, YLongitude);

                    _get(Object.getPrototypeOf(YLongitude.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Longitude';
                }

                _createClass(YLongitude, [{
                    key: 'nextLongitude',
                    value: function nextLongitude() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YLongitude.FindLongitudeInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindLongitude',
                    value: function FindLongitude(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Longitude', func);
                        if (obj == null) {
                            obj = new YLongitude(YAPI, func);
                            YFunction._AddToCache('Longitude', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindLongitudeInContext',
                    value: function FindLongitudeInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Longitude', func);
                        if (obj == null) {
                            obj = new YLongitude(yctx, func);
                            YFunction._AddToCache('Longitude', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstLongitude',
                    value: function FirstLongitude() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Longitude');
                        if (next_hwid == null) return null;
                        return YLongitude.FindLongitude(next_hwid);
                    }
                }, {
                    key: 'FirstLongitudeInContext',
                    value: function FirstLongitudeInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Longitude');
                        if (next_hwid == null) return null;
                        return YLongitude.FindLongitudeInContext(yctx, next_hwid);
                    }
                }]);

                return YLongitude;
            })(YSensor);

            _export('YLongitude', YLongitude);
        }
    };
});
System.register('yoctolib-es/yocto_magnetometer.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_XVALUE_INVALID, Y_YVALUE_INVALID, Y_ZVALUE_INVALID, YMagnetometer;

    function yFindMagnetometer(func) {
        return YMagnetometer.FindMagnetometer(func);
    }

    function yFirstMagnetometer() {
        return YMagnetometer.FirstMagnetometer();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindMagnetometer', yFindMagnetometer);

            _export('yFirstMagnetometer', yFirstMagnetometer);

            Y_XVALUE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_XVALUE_INVALID', Y_XVALUE_INVALID);

            Y_YVALUE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_YVALUE_INVALID', Y_YVALUE_INVALID);

            Y_ZVALUE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_ZVALUE_INVALID', Y_ZVALUE_INVALID);

            YMagnetometer = (function (_YSensor) {
                _inherits(YMagnetometer, _YSensor);

                function YMagnetometer(obj_yapi, str_func) {
                    _classCallCheck(this, YMagnetometer);

                    _get(Object.getPrototypeOf(YMagnetometer.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Magnetometer';

                    this._xValue = Y_XVALUE_INVALID;

                    this._yValue = Y_YVALUE_INVALID;

                    this._zValue = Y_ZVALUE_INVALID;
                    this.imm_setConst({
                        XVALUE_INVALID: YAPI.INVALID_DOUBLE,
                        YVALUE_INVALID: YAPI.INVALID_DOUBLE,
                        ZVALUE_INVALID: YAPI.INVALID_DOUBLE
                    });
                }

                _createClass(YMagnetometer, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'xValue':
                                this._xValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'yValue':
                                this._yValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'zValue':
                                this._zValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YMagnetometer.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_xValue',
                    value: function get_xValue() {
                        return _regeneratorRuntime.async(function get_xValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_XVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._xValue);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_yValue',
                    value: function get_yValue() {
                        return _regeneratorRuntime.async(function get_yValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_YVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._yValue);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_zValue',
                    value: function get_zValue() {
                        return _regeneratorRuntime.async(function get_zValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ZVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._zValue);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextMagnetometer',
                    value: function nextMagnetometer() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YMagnetometer.FindMagnetometerInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindMagnetometer',
                    value: function FindMagnetometer(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Magnetometer', func);
                        if (obj == null) {
                            obj = new YMagnetometer(YAPI, func);
                            YFunction._AddToCache('Magnetometer', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindMagnetometerInContext',
                    value: function FindMagnetometerInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Magnetometer', func);
                        if (obj == null) {
                            obj = new YMagnetometer(yctx, func);
                            YFunction._AddToCache('Magnetometer', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstMagnetometer',
                    value: function FirstMagnetometer() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Magnetometer');
                        if (next_hwid == null) return null;
                        return YMagnetometer.FindMagnetometer(next_hwid);
                    }
                }, {
                    key: 'FirstMagnetometerInContext',
                    value: function FirstMagnetometerInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Magnetometer');
                        if (next_hwid == null) return null;
                        return YMagnetometer.FindMagnetometerInContext(yctx, next_hwid);
                    }
                }]);

                return YMagnetometer;
            })(YSensor);

            _export('YMagnetometer', YMagnetometer);
        }
    };
});
System.register('yoctolib-es/yocto_motor.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_MOTORSTATUS_IDLE, Y_MOTORSTATUS_BRAKE, Y_MOTORSTATUS_FORWD, Y_MOTORSTATUS_BACKWD, Y_MOTORSTATUS_LOVOLT, Y_MOTORSTATUS_HICURR, Y_MOTORSTATUS_HIHEAT, Y_MOTORSTATUS_FAILSF, Y_MOTORSTATUS_INVALID, Y_DRIVINGFORCE_INVALID, Y_BRAKINGFORCE_INVALID, Y_CUTOFFVOLTAGE_INVALID, Y_OVERCURRENTLIMIT_INVALID, Y_FREQUENCY_INVALID, Y_STARTERTIME_INVALID, Y_FAILSAFETIMEOUT_INVALID, Y_COMMAND_INVALID, YMotor;

    function yFindMotor(func) {
        return YMotor.FindMotor(func);
    }

    function yFirstMotor() {
        return YMotor.FirstMotor();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindMotor', yFindMotor);

            _export('yFirstMotor', yFirstMotor);

            Y_MOTORSTATUS_IDLE = 0;

            _export('Y_MOTORSTATUS_IDLE', Y_MOTORSTATUS_IDLE);

            Y_MOTORSTATUS_BRAKE = 1;

            _export('Y_MOTORSTATUS_BRAKE', Y_MOTORSTATUS_BRAKE);

            Y_MOTORSTATUS_FORWD = 2;

            _export('Y_MOTORSTATUS_FORWD', Y_MOTORSTATUS_FORWD);

            Y_MOTORSTATUS_BACKWD = 3;

            _export('Y_MOTORSTATUS_BACKWD', Y_MOTORSTATUS_BACKWD);

            Y_MOTORSTATUS_LOVOLT = 4;

            _export('Y_MOTORSTATUS_LOVOLT', Y_MOTORSTATUS_LOVOLT);

            Y_MOTORSTATUS_HICURR = 5;

            _export('Y_MOTORSTATUS_HICURR', Y_MOTORSTATUS_HICURR);

            Y_MOTORSTATUS_HIHEAT = 6;

            _export('Y_MOTORSTATUS_HIHEAT', Y_MOTORSTATUS_HIHEAT);

            Y_MOTORSTATUS_FAILSF = 7;

            _export('Y_MOTORSTATUS_FAILSF', Y_MOTORSTATUS_FAILSF);

            Y_MOTORSTATUS_INVALID = -1;

            _export('Y_MOTORSTATUS_INVALID', Y_MOTORSTATUS_INVALID);

            Y_DRIVINGFORCE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_DRIVINGFORCE_INVALID', Y_DRIVINGFORCE_INVALID);

            Y_BRAKINGFORCE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_BRAKINGFORCE_INVALID', Y_BRAKINGFORCE_INVALID);

            Y_CUTOFFVOLTAGE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_CUTOFFVOLTAGE_INVALID', Y_CUTOFFVOLTAGE_INVALID);

            Y_OVERCURRENTLIMIT_INVALID = YAPI.INVALID_INT;

            _export('Y_OVERCURRENTLIMIT_INVALID', Y_OVERCURRENTLIMIT_INVALID);

            Y_FREQUENCY_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_FREQUENCY_INVALID', Y_FREQUENCY_INVALID);

            Y_STARTERTIME_INVALID = YAPI.INVALID_INT;

            _export('Y_STARTERTIME_INVALID', Y_STARTERTIME_INVALID);

            Y_FAILSAFETIMEOUT_INVALID = YAPI.INVALID_UINT;

            _export('Y_FAILSAFETIMEOUT_INVALID', Y_FAILSAFETIMEOUT_INVALID);

            Y_COMMAND_INVALID = YAPI.INVALID_STRING;

            _export('Y_COMMAND_INVALID', Y_COMMAND_INVALID);

            YMotor = (function (_YFunction) {
                _inherits(YMotor, _YFunction);

                function YMotor(obj_yapi, str_func) {
                    _classCallCheck(this, YMotor);

                    _get(Object.getPrototypeOf(YMotor.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Motor';

                    this._motorStatus = Y_MOTORSTATUS_INVALID;

                    this._drivingForce = Y_DRIVINGFORCE_INVALID;

                    this._brakingForce = Y_BRAKINGFORCE_INVALID;

                    this._cutOffVoltage = Y_CUTOFFVOLTAGE_INVALID;

                    this._overCurrentLimit = Y_OVERCURRENTLIMIT_INVALID;

                    this._frequency = Y_FREQUENCY_INVALID;

                    this._starterTime = Y_STARTERTIME_INVALID;

                    this._failSafeTimeout = Y_FAILSAFETIMEOUT_INVALID;

                    this._command = Y_COMMAND_INVALID;
                    this.imm_setConst({
                        MOTORSTATUS_IDLE: 0,
                        MOTORSTATUS_BRAKE: 1,
                        MOTORSTATUS_FORWD: 2,
                        MOTORSTATUS_BACKWD: 3,
                        MOTORSTATUS_LOVOLT: 4,
                        MOTORSTATUS_HICURR: 5,
                        MOTORSTATUS_HIHEAT: 6,
                        MOTORSTATUS_FAILSF: 7,
                        MOTORSTATUS_INVALID: -1,
                        DRIVINGFORCE_INVALID: YAPI.INVALID_DOUBLE,
                        BRAKINGFORCE_INVALID: YAPI.INVALID_DOUBLE,
                        CUTOFFVOLTAGE_INVALID: YAPI.INVALID_DOUBLE,
                        OVERCURRENTLIMIT_INVALID: YAPI.INVALID_INT,
                        FREQUENCY_INVALID: YAPI.INVALID_DOUBLE,
                        STARTERTIME_INVALID: YAPI.INVALID_INT,
                        FAILSAFETIMEOUT_INVALID: YAPI.INVALID_UINT,
                        COMMAND_INVALID: YAPI.INVALID_STRING
                    });
                }

                _createClass(YMotor, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'motorStatus':
                                this._motorStatus = parseInt(val);
                                return 1;
                            case 'drivingForce':
                                this._drivingForce = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'brakingForce':
                                this._brakingForce = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'cutOffVoltage':
                                this._cutOffVoltage = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'overCurrentLimit':
                                this._overCurrentLimit = parseInt(val);
                                return 1;
                            case 'frequency':
                                this._frequency = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'starterTime':
                                this._starterTime = parseInt(val);
                                return 1;
                            case 'failSafeTimeout':
                                this._failSafeTimeout = parseInt(val);
                                return 1;
                            case 'command':
                                this._command = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YMotor.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_motorStatus',
                    value: function get_motorStatus() {
                        return _regeneratorRuntime.async(function get_motorStatus$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MOTORSTATUS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._motorStatus);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_motorStatus',
                    value: function set_motorStatus(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_motorStatus$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('motorStatus', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_drivingForce',
                    value: function set_drivingForce(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_drivingForce$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('drivingForce', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_drivingForce',
                    value: function get_drivingForce() {
                        return _regeneratorRuntime.async(function get_drivingForce$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DRIVINGFORCE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._drivingForce);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_brakingForce',
                    value: function set_brakingForce(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_brakingForce$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('brakingForce', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_brakingForce',
                    value: function get_brakingForce() {
                        return _regeneratorRuntime.async(function get_brakingForce$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_BRAKINGFORCE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._brakingForce);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_cutOffVoltage',
                    value: function set_cutOffVoltage(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_cutOffVoltage$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('cutOffVoltage', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_cutOffVoltage',
                    value: function get_cutOffVoltage() {
                        return _regeneratorRuntime.async(function get_cutOffVoltage$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CUTOFFVOLTAGE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._cutOffVoltage);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_overCurrentLimit',
                    value: function get_overCurrentLimit() {
                        return _regeneratorRuntime.async(function get_overCurrentLimit$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_OVERCURRENTLIMIT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._overCurrentLimit);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_overCurrentLimit',
                    value: function set_overCurrentLimit(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_overCurrentLimit$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('overCurrentLimit', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_frequency',
                    value: function set_frequency(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_frequency$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('frequency', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_frequency',
                    value: function get_frequency() {
                        return _regeneratorRuntime.async(function get_frequency$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_FREQUENCY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._frequency);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_starterTime',
                    value: function get_starterTime() {
                        return _regeneratorRuntime.async(function get_starterTime$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_STARTERTIME_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._starterTime);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_starterTime',
                    value: function set_starterTime(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_starterTime$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('starterTime', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_failSafeTimeout',
                    value: function get_failSafeTimeout() {
                        return _regeneratorRuntime.async(function get_failSafeTimeout$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_FAILSAFETIMEOUT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._failSafeTimeout);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_failSafeTimeout',
                    value: function set_failSafeTimeout(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_failSafeTimeout$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('failSafeTimeout', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_command',
                    value: function get_command() {
                        return _regeneratorRuntime.async(function get_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COMMAND_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._command);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_command',
                    value: function set_command(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('command', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'keepALive',
                    value: function keepALive() {
                        return _regeneratorRuntime.async(function keepALive$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command('K'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'resetStatus',
                    value: function resetStatus() {
                        return _regeneratorRuntime.async(function resetStatus$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_motorStatus(Y_MOTORSTATUS_IDLE));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'drivingForceMove',
                    value: function drivingForceMove(targetPower, delay) {
                        return _regeneratorRuntime.async(function drivingForceMove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command('P' + String(Math.round(Math.round(targetPower * 10))) + ',' + String(Math.round(delay))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'brakingForceMove',
                    value: function brakingForceMove(targetPower, delay) {
                        return _regeneratorRuntime.async(function brakingForceMove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command('B' + String(Math.round(Math.round(targetPower * 10))) + ',' + String(Math.round(delay))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextMotor',
                    value: function nextMotor() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YMotor.FindMotorInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindMotor',
                    value: function FindMotor(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Motor', func);
                        if (obj == null) {
                            obj = new YMotor(YAPI, func);
                            YFunction._AddToCache('Motor', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindMotorInContext',
                    value: function FindMotorInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Motor', func);
                        if (obj == null) {
                            obj = new YMotor(yctx, func);
                            YFunction._AddToCache('Motor', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstMotor',
                    value: function FirstMotor() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Motor');
                        if (next_hwid == null) return null;
                        return YMotor.FindMotor(next_hwid);
                    }
                }, {
                    key: 'FirstMotorInContext',
                    value: function FirstMotorInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Motor');
                        if (next_hwid == null) return null;
                        return YMotor.FindMotorInContext(yctx, next_hwid);
                    }
                }]);

                return YMotor;
            })(YFunction);

            _export('YMotor', YMotor);
        }
    };
});
System.register('yoctolib-es/yocto_network.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_READINESS_DOWN, Y_READINESS_EXISTS, Y_READINESS_LINKED, Y_READINESS_LAN_OK, Y_READINESS_WWW_OK, Y_READINESS_INVALID, Y_DISCOVERABLE_FALSE, Y_DISCOVERABLE_TRUE, Y_DISCOVERABLE_INVALID, Y_CALLBACKMETHOD_POST, Y_CALLBACKMETHOD_GET, Y_CALLBACKMETHOD_PUT, Y_CALLBACKMETHOD_INVALID, Y_CALLBACKENCODING_FORM, Y_CALLBACKENCODING_JSON, Y_CALLBACKENCODING_JSON_ARRAY, Y_CALLBACKENCODING_CSV, Y_CALLBACKENCODING_YOCTO_API, Y_CALLBACKENCODING_JSON_NUM, Y_CALLBACKENCODING_EMONCMS, Y_CALLBACKENCODING_AZURE, Y_CALLBACKENCODING_INFLUXDB, Y_CALLBACKENCODING_INVALID, Y_MACADDRESS_INVALID, Y_IPADDRESS_INVALID, Y_SUBNETMASK_INVALID, Y_ROUTER_INVALID, Y_IPCONFIG_INVALID, Y_PRIMARYDNS_INVALID, Y_SECONDARYDNS_INVALID, Y_NTPSERVER_INVALID, Y_USERPASSWORD_INVALID, Y_ADMINPASSWORD_INVALID, Y_HTTPPORT_INVALID, Y_DEFAULTPAGE_INVALID, Y_WWWWATCHDOGDELAY_INVALID, Y_CALLBACKURL_INVALID, Y_CALLBACKCREDENTIALS_INVALID, Y_CALLBACKMINDELAY_INVALID, Y_CALLBACKMAXDELAY_INVALID, Y_POECURRENT_INVALID, YNetwork;

    function yFindNetwork(func) {
        return YNetwork.FindNetwork(func);
    }

    function yFirstNetwork() {
        return YNetwork.FirstNetwork();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindNetwork', yFindNetwork);

            _export('yFirstNetwork', yFirstNetwork);

            Y_READINESS_DOWN = 0;

            _export('Y_READINESS_DOWN', Y_READINESS_DOWN);

            Y_READINESS_EXISTS = 1;

            _export('Y_READINESS_EXISTS', Y_READINESS_EXISTS);

            Y_READINESS_LINKED = 2;

            _export('Y_READINESS_LINKED', Y_READINESS_LINKED);

            Y_READINESS_LAN_OK = 3;

            _export('Y_READINESS_LAN_OK', Y_READINESS_LAN_OK);

            Y_READINESS_WWW_OK = 4;

            _export('Y_READINESS_WWW_OK', Y_READINESS_WWW_OK);

            Y_READINESS_INVALID = -1;

            _export('Y_READINESS_INVALID', Y_READINESS_INVALID);

            Y_DISCOVERABLE_FALSE = 0;

            _export('Y_DISCOVERABLE_FALSE', Y_DISCOVERABLE_FALSE);

            Y_DISCOVERABLE_TRUE = 1;

            _export('Y_DISCOVERABLE_TRUE', Y_DISCOVERABLE_TRUE);

            Y_DISCOVERABLE_INVALID = -1;

            _export('Y_DISCOVERABLE_INVALID', Y_DISCOVERABLE_INVALID);

            Y_CALLBACKMETHOD_POST = 0;

            _export('Y_CALLBACKMETHOD_POST', Y_CALLBACKMETHOD_POST);

            Y_CALLBACKMETHOD_GET = 1;

            _export('Y_CALLBACKMETHOD_GET', Y_CALLBACKMETHOD_GET);

            Y_CALLBACKMETHOD_PUT = 2;

            _export('Y_CALLBACKMETHOD_PUT', Y_CALLBACKMETHOD_PUT);

            Y_CALLBACKMETHOD_INVALID = -1;

            _export('Y_CALLBACKMETHOD_INVALID', Y_CALLBACKMETHOD_INVALID);

            Y_CALLBACKENCODING_FORM = 0;

            _export('Y_CALLBACKENCODING_FORM', Y_CALLBACKENCODING_FORM);

            Y_CALLBACKENCODING_JSON = 1;

            _export('Y_CALLBACKENCODING_JSON', Y_CALLBACKENCODING_JSON);

            Y_CALLBACKENCODING_JSON_ARRAY = 2;

            _export('Y_CALLBACKENCODING_JSON_ARRAY', Y_CALLBACKENCODING_JSON_ARRAY);

            Y_CALLBACKENCODING_CSV = 3;

            _export('Y_CALLBACKENCODING_CSV', Y_CALLBACKENCODING_CSV);

            Y_CALLBACKENCODING_YOCTO_API = 4;

            _export('Y_CALLBACKENCODING_YOCTO_API', Y_CALLBACKENCODING_YOCTO_API);

            Y_CALLBACKENCODING_JSON_NUM = 5;

            _export('Y_CALLBACKENCODING_JSON_NUM', Y_CALLBACKENCODING_JSON_NUM);

            Y_CALLBACKENCODING_EMONCMS = 6;

            _export('Y_CALLBACKENCODING_EMONCMS', Y_CALLBACKENCODING_EMONCMS);

            Y_CALLBACKENCODING_AZURE = 7;

            _export('Y_CALLBACKENCODING_AZURE', Y_CALLBACKENCODING_AZURE);

            Y_CALLBACKENCODING_INFLUXDB = 8;

            _export('Y_CALLBACKENCODING_INFLUXDB', Y_CALLBACKENCODING_INFLUXDB);

            Y_CALLBACKENCODING_INVALID = -1;

            _export('Y_CALLBACKENCODING_INVALID', Y_CALLBACKENCODING_INVALID);

            Y_MACADDRESS_INVALID = YAPI.INVALID_STRING;

            _export('Y_MACADDRESS_INVALID', Y_MACADDRESS_INVALID);

            Y_IPADDRESS_INVALID = YAPI.INVALID_STRING;

            _export('Y_IPADDRESS_INVALID', Y_IPADDRESS_INVALID);

            Y_SUBNETMASK_INVALID = YAPI.INVALID_STRING;

            _export('Y_SUBNETMASK_INVALID', Y_SUBNETMASK_INVALID);

            Y_ROUTER_INVALID = YAPI.INVALID_STRING;

            _export('Y_ROUTER_INVALID', Y_ROUTER_INVALID);

            Y_IPCONFIG_INVALID = YAPI.INVALID_STRING;

            _export('Y_IPCONFIG_INVALID', Y_IPCONFIG_INVALID);

            Y_PRIMARYDNS_INVALID = YAPI.INVALID_STRING;

            _export('Y_PRIMARYDNS_INVALID', Y_PRIMARYDNS_INVALID);

            Y_SECONDARYDNS_INVALID = YAPI.INVALID_STRING;

            _export('Y_SECONDARYDNS_INVALID', Y_SECONDARYDNS_INVALID);

            Y_NTPSERVER_INVALID = YAPI.INVALID_STRING;

            _export('Y_NTPSERVER_INVALID', Y_NTPSERVER_INVALID);

            Y_USERPASSWORD_INVALID = YAPI.INVALID_STRING;

            _export('Y_USERPASSWORD_INVALID', Y_USERPASSWORD_INVALID);

            Y_ADMINPASSWORD_INVALID = YAPI.INVALID_STRING;

            _export('Y_ADMINPASSWORD_INVALID', Y_ADMINPASSWORD_INVALID);

            Y_HTTPPORT_INVALID = YAPI.INVALID_UINT;

            _export('Y_HTTPPORT_INVALID', Y_HTTPPORT_INVALID);

            Y_DEFAULTPAGE_INVALID = YAPI.INVALID_STRING;

            _export('Y_DEFAULTPAGE_INVALID', Y_DEFAULTPAGE_INVALID);

            Y_WWWWATCHDOGDELAY_INVALID = YAPI.INVALID_UINT;

            _export('Y_WWWWATCHDOGDELAY_INVALID', Y_WWWWATCHDOGDELAY_INVALID);

            Y_CALLBACKURL_INVALID = YAPI.INVALID_STRING;

            _export('Y_CALLBACKURL_INVALID', Y_CALLBACKURL_INVALID);

            Y_CALLBACKCREDENTIALS_INVALID = YAPI.INVALID_STRING;

            _export('Y_CALLBACKCREDENTIALS_INVALID', Y_CALLBACKCREDENTIALS_INVALID);

            Y_CALLBACKMINDELAY_INVALID = YAPI.INVALID_UINT;

            _export('Y_CALLBACKMINDELAY_INVALID', Y_CALLBACKMINDELAY_INVALID);

            Y_CALLBACKMAXDELAY_INVALID = YAPI.INVALID_UINT;

            _export('Y_CALLBACKMAXDELAY_INVALID', Y_CALLBACKMAXDELAY_INVALID);

            Y_POECURRENT_INVALID = YAPI.INVALID_UINT;

            _export('Y_POECURRENT_INVALID', Y_POECURRENT_INVALID);

            YNetwork = (function (_YFunction) {
                _inherits(YNetwork, _YFunction);

                function YNetwork(obj_yapi, str_func) {
                    _classCallCheck(this, YNetwork);

                    _get(Object.getPrototypeOf(YNetwork.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Network';

                    this._readiness = Y_READINESS_INVALID;

                    this._macAddress = Y_MACADDRESS_INVALID;

                    this._ipAddress = Y_IPADDRESS_INVALID;

                    this._subnetMask = Y_SUBNETMASK_INVALID;

                    this._router = Y_ROUTER_INVALID;

                    this._ipConfig = Y_IPCONFIG_INVALID;

                    this._primaryDNS = Y_PRIMARYDNS_INVALID;

                    this._secondaryDNS = Y_SECONDARYDNS_INVALID;

                    this._ntpServer = Y_NTPSERVER_INVALID;

                    this._userPassword = Y_USERPASSWORD_INVALID;

                    this._adminPassword = Y_ADMINPASSWORD_INVALID;

                    this._httpPort = Y_HTTPPORT_INVALID;

                    this._defaultPage = Y_DEFAULTPAGE_INVALID;

                    this._discoverable = Y_DISCOVERABLE_INVALID;

                    this._wwwWatchdogDelay = Y_WWWWATCHDOGDELAY_INVALID;

                    this._callbackUrl = Y_CALLBACKURL_INVALID;

                    this._callbackMethod = Y_CALLBACKMETHOD_INVALID;

                    this._callbackEncoding = Y_CALLBACKENCODING_INVALID;

                    this._callbackCredentials = Y_CALLBACKCREDENTIALS_INVALID;

                    this._callbackMinDelay = Y_CALLBACKMINDELAY_INVALID;

                    this._callbackMaxDelay = Y_CALLBACKMAXDELAY_INVALID;

                    this._poeCurrent = Y_POECURRENT_INVALID;
                    this.imm_setConst({
                        READINESS_DOWN: 0,
                        READINESS_EXISTS: 1,
                        READINESS_LINKED: 2,
                        READINESS_LAN_OK: 3,
                        READINESS_WWW_OK: 4,
                        READINESS_INVALID: -1,
                        MACADDRESS_INVALID: YAPI.INVALID_STRING,
                        IPADDRESS_INVALID: YAPI.INVALID_STRING,
                        SUBNETMASK_INVALID: YAPI.INVALID_STRING,
                        ROUTER_INVALID: YAPI.INVALID_STRING,
                        IPCONFIG_INVALID: YAPI.INVALID_STRING,
                        PRIMARYDNS_INVALID: YAPI.INVALID_STRING,
                        SECONDARYDNS_INVALID: YAPI.INVALID_STRING,
                        NTPSERVER_INVALID: YAPI.INVALID_STRING,
                        USERPASSWORD_INVALID: YAPI.INVALID_STRING,
                        ADMINPASSWORD_INVALID: YAPI.INVALID_STRING,
                        HTTPPORT_INVALID: YAPI.INVALID_UINT,
                        DEFAULTPAGE_INVALID: YAPI.INVALID_STRING,
                        DISCOVERABLE_FALSE: 0,
                        DISCOVERABLE_TRUE: 1,
                        DISCOVERABLE_INVALID: -1,
                        WWWWATCHDOGDELAY_INVALID: YAPI.INVALID_UINT,
                        CALLBACKURL_INVALID: YAPI.INVALID_STRING,
                        CALLBACKMETHOD_POST: 0,
                        CALLBACKMETHOD_GET: 1,
                        CALLBACKMETHOD_PUT: 2,
                        CALLBACKMETHOD_INVALID: -1,
                        CALLBACKENCODING_FORM: 0,
                        CALLBACKENCODING_JSON: 1,
                        CALLBACKENCODING_JSON_ARRAY: 2,
                        CALLBACKENCODING_CSV: 3,
                        CALLBACKENCODING_YOCTO_API: 4,
                        CALLBACKENCODING_JSON_NUM: 5,
                        CALLBACKENCODING_EMONCMS: 6,
                        CALLBACKENCODING_AZURE: 7,
                        CALLBACKENCODING_INFLUXDB: 8,
                        CALLBACKENCODING_INVALID: -1,
                        CALLBACKCREDENTIALS_INVALID: YAPI.INVALID_STRING,
                        CALLBACKMINDELAY_INVALID: YAPI.INVALID_UINT,
                        CALLBACKMAXDELAY_INVALID: YAPI.INVALID_UINT,
                        POECURRENT_INVALID: YAPI.INVALID_UINT
                    });
                }

                _createClass(YNetwork, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'readiness':
                                this._readiness = parseInt(val);
                                return 1;
                            case 'macAddress':
                                this._macAddress = val;
                                return 1;
                            case 'ipAddress':
                                this._ipAddress = val;
                                return 1;
                            case 'subnetMask':
                                this._subnetMask = val;
                                return 1;
                            case 'router':
                                this._router = val;
                                return 1;
                            case 'ipConfig':
                                this._ipConfig = val;
                                return 1;
                            case 'primaryDNS':
                                this._primaryDNS = val;
                                return 1;
                            case 'secondaryDNS':
                                this._secondaryDNS = val;
                                return 1;
                            case 'ntpServer':
                                this._ntpServer = val;
                                return 1;
                            case 'userPassword':
                                this._userPassword = val;
                                return 1;
                            case 'adminPassword':
                                this._adminPassword = val;
                                return 1;
                            case 'httpPort':
                                this._httpPort = parseInt(val);
                                return 1;
                            case 'defaultPage':
                                this._defaultPage = val;
                                return 1;
                            case 'discoverable':
                                this._discoverable = parseInt(val);
                                return 1;
                            case 'wwwWatchdogDelay':
                                this._wwwWatchdogDelay = parseInt(val);
                                return 1;
                            case 'callbackUrl':
                                this._callbackUrl = val;
                                return 1;
                            case 'callbackMethod':
                                this._callbackMethod = parseInt(val);
                                return 1;
                            case 'callbackEncoding':
                                this._callbackEncoding = parseInt(val);
                                return 1;
                            case 'callbackCredentials':
                                this._callbackCredentials = val;
                                return 1;
                            case 'callbackMinDelay':
                                this._callbackMinDelay = parseInt(val);
                                return 1;
                            case 'callbackMaxDelay':
                                this._callbackMaxDelay = parseInt(val);
                                return 1;
                            case 'poeCurrent':
                                this._poeCurrent = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YNetwork.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_readiness',
                    value: function get_readiness() {
                        return _regeneratorRuntime.async(function get_readiness$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_READINESS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._readiness);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_macAddress',
                    value: function get_macAddress() {
                        return _regeneratorRuntime.async(function get_macAddress$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration == 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MACADDRESS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._macAddress);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_ipAddress',
                    value: function get_ipAddress() {
                        return _regeneratorRuntime.async(function get_ipAddress$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_IPADDRESS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._ipAddress);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_subnetMask',
                    value: function get_subnetMask() {
                        return _regeneratorRuntime.async(function get_subnetMask$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SUBNETMASK_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._subnetMask);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_router',
                    value: function get_router() {
                        return _regeneratorRuntime.async(function get_router$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ROUTER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._router);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_ipConfig',
                    value: function get_ipConfig() {
                        return _regeneratorRuntime.async(function get_ipConfig$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_IPCONFIG_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._ipConfig);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_ipConfig',
                    value: function set_ipConfig(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_ipConfig$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('ipConfig', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_primaryDNS',
                    value: function get_primaryDNS() {
                        return _regeneratorRuntime.async(function get_primaryDNS$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PRIMARYDNS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._primaryDNS);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_primaryDNS',
                    value: function set_primaryDNS(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_primaryDNS$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('primaryDNS', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_secondaryDNS',
                    value: function get_secondaryDNS() {
                        return _regeneratorRuntime.async(function get_secondaryDNS$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SECONDARYDNS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._secondaryDNS);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_secondaryDNS',
                    value: function set_secondaryDNS(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_secondaryDNS$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('secondaryDNS', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_ntpServer',
                    value: function get_ntpServer() {
                        return _regeneratorRuntime.async(function get_ntpServer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_NTPSERVER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._ntpServer);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_ntpServer',
                    value: function set_ntpServer(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_ntpServer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('ntpServer', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_userPassword',
                    value: function get_userPassword() {
                        return _regeneratorRuntime.async(function get_userPassword$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_USERPASSWORD_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._userPassword);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_userPassword',
                    value: function set_userPassword(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_userPassword$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('userPassword', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_adminPassword',
                    value: function get_adminPassword() {
                        return _regeneratorRuntime.async(function get_adminPassword$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ADMINPASSWORD_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._adminPassword);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_adminPassword',
                    value: function set_adminPassword(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_adminPassword$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('adminPassword', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_httpPort',
                    value: function get_httpPort() {
                        return _regeneratorRuntime.async(function get_httpPort$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_HTTPPORT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._httpPort);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_httpPort',
                    value: function set_httpPort(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_httpPort$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('httpPort', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_defaultPage',
                    value: function get_defaultPage() {
                        return _regeneratorRuntime.async(function get_defaultPage$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DEFAULTPAGE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._defaultPage);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_defaultPage',
                    value: function set_defaultPage(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_defaultPage$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('defaultPage', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_discoverable',
                    value: function get_discoverable() {
                        return _regeneratorRuntime.async(function get_discoverable$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DISCOVERABLE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._discoverable);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_discoverable',
                    value: function set_discoverable(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_discoverable$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('discoverable', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_wwwWatchdogDelay',
                    value: function get_wwwWatchdogDelay() {
                        return _regeneratorRuntime.async(function get_wwwWatchdogDelay$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_WWWWATCHDOGDELAY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._wwwWatchdogDelay);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_wwwWatchdogDelay',
                    value: function set_wwwWatchdogDelay(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_wwwWatchdogDelay$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('wwwWatchdogDelay', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_callbackUrl',
                    value: function get_callbackUrl() {
                        return _regeneratorRuntime.async(function get_callbackUrl$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CALLBACKURL_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._callbackUrl);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_callbackUrl',
                    value: function set_callbackUrl(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_callbackUrl$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('callbackUrl', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_callbackMethod',
                    value: function get_callbackMethod() {
                        return _regeneratorRuntime.async(function get_callbackMethod$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CALLBACKMETHOD_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._callbackMethod);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_callbackMethod',
                    value: function set_callbackMethod(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_callbackMethod$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('callbackMethod', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_callbackEncoding',
                    value: function get_callbackEncoding() {
                        return _regeneratorRuntime.async(function get_callbackEncoding$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CALLBACKENCODING_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._callbackEncoding);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_callbackEncoding',
                    value: function set_callbackEncoding(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_callbackEncoding$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('callbackEncoding', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_callbackCredentials',
                    value: function get_callbackCredentials() {
                        return _regeneratorRuntime.async(function get_callbackCredentials$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CALLBACKCREDENTIALS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._callbackCredentials);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_callbackCredentials',
                    value: function set_callbackCredentials(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_callbackCredentials$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('callbackCredentials', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'callbackLogin',
                    value: function callbackLogin(username, password) {
                        var rest_val;
                        return _regeneratorRuntime.async(function callbackLogin$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = username + ':' + password;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('callbackCredentials', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_callbackMinDelay',
                    value: function get_callbackMinDelay() {
                        return _regeneratorRuntime.async(function get_callbackMinDelay$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CALLBACKMINDELAY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._callbackMinDelay);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_callbackMinDelay',
                    value: function set_callbackMinDelay(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_callbackMinDelay$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('callbackMinDelay', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_callbackMaxDelay',
                    value: function get_callbackMaxDelay() {
                        return _regeneratorRuntime.async(function get_callbackMaxDelay$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CALLBACKMAXDELAY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._callbackMaxDelay);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_callbackMaxDelay',
                    value: function set_callbackMaxDelay(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_callbackMaxDelay$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('callbackMaxDelay', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_poeCurrent',
                    value: function get_poeCurrent() {
                        return _regeneratorRuntime.async(function get_poeCurrent$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_POECURRENT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._poeCurrent);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'useDHCP',
                    value: function useDHCP(fallbackIpAddr, fallbackSubnetMaskLen, fallbackRouter) {
                        return _regeneratorRuntime.async(function useDHCP$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_ipConfig('DHCP:' + fallbackIpAddr + '/' + String(Math.round(fallbackSubnetMaskLen)) + '/' + fallbackRouter));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'useStaticIP',
                    value: function useStaticIP(ipAddress, subnetMaskLen, router) {
                        return _regeneratorRuntime.async(function useStaticIP$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_ipConfig('STATIC:' + ipAddress + '/' + String(Math.round(subnetMaskLen)) + '/' + router));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'ping',
                    value: function ping(host) {
                        var content;
                        return _regeneratorRuntime.async(function ping$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    content = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this._download('ping.txt?host=' + host));

                                case 3:
                                    content = context$2$0.sent;
                                    return context$2$0.abrupt('return', this._yapi.imm_bin2str(content));

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextNetwork',
                    value: function nextNetwork() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YNetwork.FindNetworkInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindNetwork',
                    value: function FindNetwork(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Network', func);
                        if (obj == null) {
                            obj = new YNetwork(YAPI, func);
                            YFunction._AddToCache('Network', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindNetworkInContext',
                    value: function FindNetworkInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Network', func);
                        if (obj == null) {
                            obj = new YNetwork(yctx, func);
                            YFunction._AddToCache('Network', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstNetwork',
                    value: function FirstNetwork() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Network');
                        if (next_hwid == null) return null;
                        return YNetwork.FindNetwork(next_hwid);
                    }
                }, {
                    key: 'FirstNetworkInContext',
                    value: function FirstNetworkInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Network');
                        if (next_hwid == null) return null;
                        return YNetwork.FindNetworkInContext(yctx, next_hwid);
                    }
                }]);

                return YNetwork;
            })(YFunction);

            _export('YNetwork', YNetwork);
        }
    };
});
System.register('yoctolib-es/yocto_oscontrol.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_SHUTDOWNCOUNTDOWN_INVALID, YOsControl;

    function yFindOsControl(func) {
        return YOsControl.FindOsControl(func);
    }

    function yFirstOsControl() {
        return YOsControl.FirstOsControl();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindOsControl', yFindOsControl);

            _export('yFirstOsControl', yFirstOsControl);

            Y_SHUTDOWNCOUNTDOWN_INVALID = YAPI.INVALID_UINT;

            _export('Y_SHUTDOWNCOUNTDOWN_INVALID', Y_SHUTDOWNCOUNTDOWN_INVALID);

            YOsControl = (function (_YFunction) {
                _inherits(YOsControl, _YFunction);

                function YOsControl(obj_yapi, str_func) {
                    _classCallCheck(this, YOsControl);

                    _get(Object.getPrototypeOf(YOsControl.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'OsControl';

                    this._shutdownCountdown = Y_SHUTDOWNCOUNTDOWN_INVALID;
                    this.imm_setConst({
                        SHUTDOWNCOUNTDOWN_INVALID: YAPI.INVALID_UINT
                    });
                }

                _createClass(YOsControl, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'shutdownCountdown':
                                this._shutdownCountdown = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YOsControl.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_shutdownCountdown',
                    value: function get_shutdownCountdown() {
                        return _regeneratorRuntime.async(function get_shutdownCountdown$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SHUTDOWNCOUNTDOWN_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._shutdownCountdown);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_shutdownCountdown',
                    value: function set_shutdownCountdown(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_shutdownCountdown$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('shutdownCountdown', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'shutdown',
                    value: function shutdown(secBeforeShutDown) {
                        return _regeneratorRuntime.async(function shutdown$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_shutdownCountdown(secBeforeShutDown));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextOsControl',
                    value: function nextOsControl() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YOsControl.FindOsControlInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindOsControl',
                    value: function FindOsControl(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('OsControl', func);
                        if (obj == null) {
                            obj = new YOsControl(YAPI, func);
                            YFunction._AddToCache('OsControl', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindOsControlInContext',
                    value: function FindOsControlInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'OsControl', func);
                        if (obj == null) {
                            obj = new YOsControl(yctx, func);
                            YFunction._AddToCache('OsControl', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstOsControl',
                    value: function FirstOsControl() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('OsControl');
                        if (next_hwid == null) return null;
                        return YOsControl.FindOsControl(next_hwid);
                    }
                }, {
                    key: 'FirstOsControlInContext',
                    value: function FirstOsControlInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('OsControl');
                        if (next_hwid == null) return null;
                        return YOsControl.FindOsControlInContext(yctx, next_hwid);
                    }
                }]);

                return YOsControl;
            })(YFunction);

            _export('YOsControl', YOsControl);
        }
    };
});
System.register('yoctolib-es/yocto_power.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_COSPHI_INVALID, Y_METER_INVALID, Y_METERTIMER_INVALID, YPower;

    function yFindPower(func) {
        return YPower.FindPower(func);
    }

    function yFirstPower() {
        return YPower.FirstPower();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindPower', yFindPower);

            _export('yFirstPower', yFirstPower);

            Y_COSPHI_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_COSPHI_INVALID', Y_COSPHI_INVALID);

            Y_METER_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_METER_INVALID', Y_METER_INVALID);

            Y_METERTIMER_INVALID = YAPI.INVALID_UINT;

            _export('Y_METERTIMER_INVALID', Y_METERTIMER_INVALID);

            YPower = (function (_YSensor) {
                _inherits(YPower, _YSensor);

                function YPower(obj_yapi, str_func) {
                    _classCallCheck(this, YPower);

                    _get(Object.getPrototypeOf(YPower.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Power';

                    this._cosPhi = Y_COSPHI_INVALID;

                    this._meter = Y_METER_INVALID;

                    this._meterTimer = Y_METERTIMER_INVALID;
                    this.imm_setConst({
                        COSPHI_INVALID: YAPI.INVALID_DOUBLE,
                        METER_INVALID: YAPI.INVALID_DOUBLE,
                        METERTIMER_INVALID: YAPI.INVALID_UINT
                    });
                }

                _createClass(YPower, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'cosPhi':
                                this._cosPhi = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'meter':
                                this._meter = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'meterTimer':
                                this._meterTimer = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YPower.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_cosPhi',
                    value: function get_cosPhi() {
                        return _regeneratorRuntime.async(function get_cosPhi$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COSPHI_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._cosPhi);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_meter',
                    value: function set_meter(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_meter$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('meter', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_meter',
                    value: function get_meter() {
                        return _regeneratorRuntime.async(function get_meter$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_METER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._meter);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_meterTimer',
                    value: function get_meterTimer() {
                        return _regeneratorRuntime.async(function get_meterTimer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_METERTIMER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._meterTimer);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'reset',
                    value: function reset() {
                        return _regeneratorRuntime.async(function reset$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_meter(0));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextPower',
                    value: function nextPower() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YPower.FindPowerInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindPower',
                    value: function FindPower(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Power', func);
                        if (obj == null) {
                            obj = new YPower(YAPI, func);
                            YFunction._AddToCache('Power', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindPowerInContext',
                    value: function FindPowerInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Power', func);
                        if (obj == null) {
                            obj = new YPower(yctx, func);
                            YFunction._AddToCache('Power', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstPower',
                    value: function FirstPower() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Power');
                        if (next_hwid == null) return null;
                        return YPower.FindPower(next_hwid);
                    }
                }, {
                    key: 'FirstPowerInContext',
                    value: function FirstPowerInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Power');
                        if (next_hwid == null) return null;
                        return YPower.FindPowerInContext(yctx, next_hwid);
                    }
                }]);

                return YPower;
            })(YSensor);

            _export('YPower', YPower);
        }
    };
});
System.register('yoctolib-es/yocto_poweroutput.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_VOLTAGE_OFF, Y_VOLTAGE_OUT3V3, Y_VOLTAGE_OUT5V, Y_VOLTAGE_INVALID, YPowerOutput;

    function yFindPowerOutput(func) {
        return YPowerOutput.FindPowerOutput(func);
    }

    function yFirstPowerOutput() {
        return YPowerOutput.FirstPowerOutput();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindPowerOutput', yFindPowerOutput);

            _export('yFirstPowerOutput', yFirstPowerOutput);

            Y_VOLTAGE_OFF = 0;

            _export('Y_VOLTAGE_OFF', Y_VOLTAGE_OFF);

            Y_VOLTAGE_OUT3V3 = 1;

            _export('Y_VOLTAGE_OUT3V3', Y_VOLTAGE_OUT3V3);

            Y_VOLTAGE_OUT5V = 2;

            _export('Y_VOLTAGE_OUT5V', Y_VOLTAGE_OUT5V);

            Y_VOLTAGE_INVALID = -1;

            _export('Y_VOLTAGE_INVALID', Y_VOLTAGE_INVALID);

            YPowerOutput = (function (_YFunction) {
                _inherits(YPowerOutput, _YFunction);

                function YPowerOutput(obj_yapi, str_func) {
                    _classCallCheck(this, YPowerOutput);

                    _get(Object.getPrototypeOf(YPowerOutput.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'PowerOutput';

                    this._voltage = Y_VOLTAGE_INVALID;
                    this.imm_setConst({
                        VOLTAGE_OFF: 0,
                        VOLTAGE_OUT3V3: 1,
                        VOLTAGE_OUT5V: 2,
                        VOLTAGE_INVALID: -1
                    });
                }

                _createClass(YPowerOutput, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'voltage':
                                this._voltage = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YPowerOutput.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_voltage',
                    value: function get_voltage() {
                        return _regeneratorRuntime.async(function get_voltage$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_VOLTAGE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._voltage);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_voltage',
                    value: function set_voltage(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_voltage$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('voltage', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextPowerOutput',
                    value: function nextPowerOutput() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YPowerOutput.FindPowerOutputInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindPowerOutput',
                    value: function FindPowerOutput(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('PowerOutput', func);
                        if (obj == null) {
                            obj = new YPowerOutput(YAPI, func);
                            YFunction._AddToCache('PowerOutput', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindPowerOutputInContext',
                    value: function FindPowerOutputInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'PowerOutput', func);
                        if (obj == null) {
                            obj = new YPowerOutput(yctx, func);
                            YFunction._AddToCache('PowerOutput', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstPowerOutput',
                    value: function FirstPowerOutput() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('PowerOutput');
                        if (next_hwid == null) return null;
                        return YPowerOutput.FindPowerOutput(next_hwid);
                    }
                }, {
                    key: 'FirstPowerOutputInContext',
                    value: function FirstPowerOutputInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('PowerOutput');
                        if (next_hwid == null) return null;
                        return YPowerOutput.FindPowerOutputInContext(yctx, next_hwid);
                    }
                }]);

                return YPowerOutput;
            })(YFunction);

            _export('YPowerOutput', YPowerOutput);
        }
    };
});
System.register('yoctolib-es/yocto_pressure.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, YPressure;

    function yFindPressure(func) {
        return YPressure.FindPressure(func);
    }

    function yFirstPressure() {
        return YPressure.FirstPressure();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindPressure', yFindPressure);

            _export('yFirstPressure', yFirstPressure);

            YPressure = (function (_YSensor) {
                _inherits(YPressure, _YSensor);

                function YPressure(obj_yapi, str_func) {
                    _classCallCheck(this, YPressure);

                    _get(Object.getPrototypeOf(YPressure.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Pressure';
                }

                _createClass(YPressure, [{
                    key: 'nextPressure',
                    value: function nextPressure() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YPressure.FindPressureInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindPressure',
                    value: function FindPressure(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Pressure', func);
                        if (obj == null) {
                            obj = new YPressure(YAPI, func);
                            YFunction._AddToCache('Pressure', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindPressureInContext',
                    value: function FindPressureInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Pressure', func);
                        if (obj == null) {
                            obj = new YPressure(yctx, func);
                            YFunction._AddToCache('Pressure', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstPressure',
                    value: function FirstPressure() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Pressure');
                        if (next_hwid == null) return null;
                        return YPressure.FindPressure(next_hwid);
                    }
                }, {
                    key: 'FirstPressureInContext',
                    value: function FirstPressureInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Pressure');
                        if (next_hwid == null) return null;
                        return YPressure.FindPressureInContext(yctx, next_hwid);
                    }
                }]);

                return YPressure;
            })(YSensor);

            _export('YPressure', YPressure);
        }
    };
});
System.register('yoctolib-es/yocto_pwminput.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_PWMREPORTMODE_PWM_DUTYCYCLE, Y_PWMREPORTMODE_PWM_FREQUENCY, Y_PWMREPORTMODE_PWM_PULSEDURATION, Y_PWMREPORTMODE_PWM_EDGECOUNT, Y_PWMREPORTMODE_INVALID, Y_DUTYCYCLE_INVALID, Y_PULSEDURATION_INVALID, Y_FREQUENCY_INVALID, Y_PERIOD_INVALID, Y_PULSECOUNTER_INVALID, Y_PULSETIMER_INVALID, YPwmInput;

    function yFindPwmInput(func) {
        return YPwmInput.FindPwmInput(func);
    }

    function yFirstPwmInput() {
        return YPwmInput.FirstPwmInput();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindPwmInput', yFindPwmInput);

            _export('yFirstPwmInput', yFirstPwmInput);

            Y_PWMREPORTMODE_PWM_DUTYCYCLE = 0;

            _export('Y_PWMREPORTMODE_PWM_DUTYCYCLE', Y_PWMREPORTMODE_PWM_DUTYCYCLE);

            Y_PWMREPORTMODE_PWM_FREQUENCY = 1;

            _export('Y_PWMREPORTMODE_PWM_FREQUENCY', Y_PWMREPORTMODE_PWM_FREQUENCY);

            Y_PWMREPORTMODE_PWM_PULSEDURATION = 2;

            _export('Y_PWMREPORTMODE_PWM_PULSEDURATION', Y_PWMREPORTMODE_PWM_PULSEDURATION);

            Y_PWMREPORTMODE_PWM_EDGECOUNT = 3;

            _export('Y_PWMREPORTMODE_PWM_EDGECOUNT', Y_PWMREPORTMODE_PWM_EDGECOUNT);

            Y_PWMREPORTMODE_INVALID = -1;

            _export('Y_PWMREPORTMODE_INVALID', Y_PWMREPORTMODE_INVALID);

            Y_DUTYCYCLE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_DUTYCYCLE_INVALID', Y_DUTYCYCLE_INVALID);

            Y_PULSEDURATION_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_PULSEDURATION_INVALID', Y_PULSEDURATION_INVALID);

            Y_FREQUENCY_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_FREQUENCY_INVALID', Y_FREQUENCY_INVALID);

            Y_PERIOD_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_PERIOD_INVALID', Y_PERIOD_INVALID);

            Y_PULSECOUNTER_INVALID = YAPI.INVALID_LONG;

            _export('Y_PULSECOUNTER_INVALID', Y_PULSECOUNTER_INVALID);

            Y_PULSETIMER_INVALID = YAPI.INVALID_LONG;

            _export('Y_PULSETIMER_INVALID', Y_PULSETIMER_INVALID);

            YPwmInput = (function (_YSensor) {
                _inherits(YPwmInput, _YSensor);

                function YPwmInput(obj_yapi, str_func) {
                    _classCallCheck(this, YPwmInput);

                    _get(Object.getPrototypeOf(YPwmInput.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'PwmInput';

                    this._dutyCycle = Y_DUTYCYCLE_INVALID;

                    this._pulseDuration = Y_PULSEDURATION_INVALID;

                    this._frequency = Y_FREQUENCY_INVALID;

                    this._period = Y_PERIOD_INVALID;

                    this._pulseCounter = Y_PULSECOUNTER_INVALID;

                    this._pulseTimer = Y_PULSETIMER_INVALID;

                    this._pwmReportMode = Y_PWMREPORTMODE_INVALID;
                    this.imm_setConst({
                        DUTYCYCLE_INVALID: YAPI.INVALID_DOUBLE,
                        PULSEDURATION_INVALID: YAPI.INVALID_DOUBLE,
                        FREQUENCY_INVALID: YAPI.INVALID_DOUBLE,
                        PERIOD_INVALID: YAPI.INVALID_DOUBLE,
                        PULSECOUNTER_INVALID: YAPI.INVALID_LONG,
                        PULSETIMER_INVALID: YAPI.INVALID_LONG,
                        PWMREPORTMODE_PWM_DUTYCYCLE: 0,
                        PWMREPORTMODE_PWM_FREQUENCY: 1,
                        PWMREPORTMODE_PWM_PULSEDURATION: 2,
                        PWMREPORTMODE_PWM_EDGECOUNT: 3,
                        PWMREPORTMODE_INVALID: -1
                    });
                }

                _createClass(YPwmInput, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'dutyCycle':
                                this._dutyCycle = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'pulseDuration':
                                this._pulseDuration = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'frequency':
                                this._frequency = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'period':
                                this._period = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'pulseCounter':
                                this._pulseCounter = parseInt(val);
                                return 1;
                            case 'pulseTimer':
                                this._pulseTimer = parseInt(val);
                                return 1;
                            case 'pwmReportMode':
                                this._pwmReportMode = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YPwmInput.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_dutyCycle',
                    value: function get_dutyCycle() {
                        return _regeneratorRuntime.async(function get_dutyCycle$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DUTYCYCLE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._dutyCycle);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_pulseDuration',
                    value: function get_pulseDuration() {
                        return _regeneratorRuntime.async(function get_pulseDuration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PULSEDURATION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._pulseDuration);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_frequency',
                    value: function get_frequency() {
                        return _regeneratorRuntime.async(function get_frequency$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_FREQUENCY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._frequency);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_period',
                    value: function get_period() {
                        return _regeneratorRuntime.async(function get_period$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PERIOD_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._period);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_pulseCounter',
                    value: function get_pulseCounter() {
                        return _regeneratorRuntime.async(function get_pulseCounter$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PULSECOUNTER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._pulseCounter);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_pulseCounter',
                    value: function set_pulseCounter(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_pulseCounter$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('pulseCounter', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_pulseTimer',
                    value: function get_pulseTimer() {
                        return _regeneratorRuntime.async(function get_pulseTimer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PULSETIMER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._pulseTimer);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_pwmReportMode',
                    value: function get_pwmReportMode() {
                        return _regeneratorRuntime.async(function get_pwmReportMode$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PWMREPORTMODE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._pwmReportMode);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_pwmReportMode',
                    value: function set_pwmReportMode(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_pwmReportMode$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('pwmReportMode', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'resetCounter',
                    value: function resetCounter() {
                        return _regeneratorRuntime.async(function resetCounter$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_pulseCounter(0));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextPwmInput',
                    value: function nextPwmInput() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YPwmInput.FindPwmInputInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindPwmInput',
                    value: function FindPwmInput(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('PwmInput', func);
                        if (obj == null) {
                            obj = new YPwmInput(YAPI, func);
                            YFunction._AddToCache('PwmInput', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindPwmInputInContext',
                    value: function FindPwmInputInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'PwmInput', func);
                        if (obj == null) {
                            obj = new YPwmInput(yctx, func);
                            YFunction._AddToCache('PwmInput', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstPwmInput',
                    value: function FirstPwmInput() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('PwmInput');
                        if (next_hwid == null) return null;
                        return YPwmInput.FindPwmInput(next_hwid);
                    }
                }, {
                    key: 'FirstPwmInputInContext',
                    value: function FirstPwmInputInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('PwmInput');
                        if (next_hwid == null) return null;
                        return YPwmInput.FindPwmInputInContext(yctx, next_hwid);
                    }
                }]);

                return YPwmInput;
            })(YSensor);

            _export('YPwmInput', YPwmInput);
        }
    };
});
System.register('yoctolib-es/yocto_pwmoutput.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_ENABLED_FALSE, Y_ENABLED_TRUE, Y_ENABLED_INVALID, Y_ENABLEDATPOWERON_FALSE, Y_ENABLEDATPOWERON_TRUE, Y_ENABLEDATPOWERON_INVALID, Y_FREQUENCY_INVALID, Y_PERIOD_INVALID, Y_DUTYCYCLE_INVALID, Y_PULSEDURATION_INVALID, Y_PWMTRANSITION_INVALID, Y_DUTYCYCLEATPOWERON_INVALID, YPwmOutput;

    function yFindPwmOutput(func) {
        return YPwmOutput.FindPwmOutput(func);
    }

    function yFirstPwmOutput() {
        return YPwmOutput.FirstPwmOutput();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindPwmOutput', yFindPwmOutput);

            _export('yFirstPwmOutput', yFirstPwmOutput);

            Y_ENABLED_FALSE = 0;

            _export('Y_ENABLED_FALSE', Y_ENABLED_FALSE);

            Y_ENABLED_TRUE = 1;

            _export('Y_ENABLED_TRUE', Y_ENABLED_TRUE);

            Y_ENABLED_INVALID = -1;

            _export('Y_ENABLED_INVALID', Y_ENABLED_INVALID);

            Y_ENABLEDATPOWERON_FALSE = 0;

            _export('Y_ENABLEDATPOWERON_FALSE', Y_ENABLEDATPOWERON_FALSE);

            Y_ENABLEDATPOWERON_TRUE = 1;

            _export('Y_ENABLEDATPOWERON_TRUE', Y_ENABLEDATPOWERON_TRUE);

            Y_ENABLEDATPOWERON_INVALID = -1;

            _export('Y_ENABLEDATPOWERON_INVALID', Y_ENABLEDATPOWERON_INVALID);

            Y_FREQUENCY_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_FREQUENCY_INVALID', Y_FREQUENCY_INVALID);

            Y_PERIOD_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_PERIOD_INVALID', Y_PERIOD_INVALID);

            Y_DUTYCYCLE_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_DUTYCYCLE_INVALID', Y_DUTYCYCLE_INVALID);

            Y_PULSEDURATION_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_PULSEDURATION_INVALID', Y_PULSEDURATION_INVALID);

            Y_PWMTRANSITION_INVALID = YAPI.INVALID_STRING;

            _export('Y_PWMTRANSITION_INVALID', Y_PWMTRANSITION_INVALID);

            Y_DUTYCYCLEATPOWERON_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_DUTYCYCLEATPOWERON_INVALID', Y_DUTYCYCLEATPOWERON_INVALID);

            YPwmOutput = (function (_YFunction) {
                _inherits(YPwmOutput, _YFunction);

                function YPwmOutput(obj_yapi, str_func) {
                    _classCallCheck(this, YPwmOutput);

                    _get(Object.getPrototypeOf(YPwmOutput.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'PwmOutput';

                    this._enabled = Y_ENABLED_INVALID;

                    this._frequency = Y_FREQUENCY_INVALID;

                    this._period = Y_PERIOD_INVALID;

                    this._dutyCycle = Y_DUTYCYCLE_INVALID;

                    this._pulseDuration = Y_PULSEDURATION_INVALID;

                    this._pwmTransition = Y_PWMTRANSITION_INVALID;

                    this._enabledAtPowerOn = Y_ENABLEDATPOWERON_INVALID;

                    this._dutyCycleAtPowerOn = Y_DUTYCYCLEATPOWERON_INVALID;
                    this.imm_setConst({
                        ENABLED_FALSE: 0,
                        ENABLED_TRUE: 1,
                        ENABLED_INVALID: -1,
                        FREQUENCY_INVALID: YAPI.INVALID_DOUBLE,
                        PERIOD_INVALID: YAPI.INVALID_DOUBLE,
                        DUTYCYCLE_INVALID: YAPI.INVALID_DOUBLE,
                        PULSEDURATION_INVALID: YAPI.INVALID_DOUBLE,
                        PWMTRANSITION_INVALID: YAPI.INVALID_STRING,
                        ENABLEDATPOWERON_FALSE: 0,
                        ENABLEDATPOWERON_TRUE: 1,
                        ENABLEDATPOWERON_INVALID: -1,
                        DUTYCYCLEATPOWERON_INVALID: YAPI.INVALID_DOUBLE
                    });
                }

                _createClass(YPwmOutput, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'enabled':
                                this._enabled = parseInt(val);
                                return 1;
                            case 'frequency':
                                this._frequency = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'period':
                                this._period = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'dutyCycle':
                                this._dutyCycle = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'pulseDuration':
                                this._pulseDuration = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'pwmTransition':
                                this._pwmTransition = val;
                                return 1;
                            case 'enabledAtPowerOn':
                                this._enabledAtPowerOn = parseInt(val);
                                return 1;
                            case 'dutyCycleAtPowerOn':
                                this._dutyCycleAtPowerOn = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YPwmOutput.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_enabled',
                    value: function get_enabled() {
                        return _regeneratorRuntime.async(function get_enabled$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ENABLED_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._enabled);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_enabled',
                    value: function set_enabled(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_enabled$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('enabled', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_frequency',
                    value: function set_frequency(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_frequency$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('frequency', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_frequency',
                    value: function get_frequency() {
                        return _regeneratorRuntime.async(function get_frequency$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_FREQUENCY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._frequency);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_period',
                    value: function set_period(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_period$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('period', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_period',
                    value: function get_period() {
                        return _regeneratorRuntime.async(function get_period$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PERIOD_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._period);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_dutyCycle',
                    value: function set_dutyCycle(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_dutyCycle$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('dutyCycle', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_dutyCycle',
                    value: function get_dutyCycle() {
                        return _regeneratorRuntime.async(function get_dutyCycle$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DUTYCYCLE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._dutyCycle);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_pulseDuration',
                    value: function set_pulseDuration(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_pulseDuration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('pulseDuration', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_pulseDuration',
                    value: function get_pulseDuration() {
                        return _regeneratorRuntime.async(function get_pulseDuration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PULSEDURATION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._pulseDuration);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_pwmTransition',
                    value: function get_pwmTransition() {
                        return _regeneratorRuntime.async(function get_pwmTransition$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PWMTRANSITION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._pwmTransition);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_pwmTransition',
                    value: function set_pwmTransition(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_pwmTransition$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('pwmTransition', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_enabledAtPowerOn',
                    value: function get_enabledAtPowerOn() {
                        return _regeneratorRuntime.async(function get_enabledAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ENABLEDATPOWERON_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._enabledAtPowerOn);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_enabledAtPowerOn',
                    value: function set_enabledAtPowerOn(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_enabledAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('enabledAtPowerOn', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_dutyCycleAtPowerOn',
                    value: function set_dutyCycleAtPowerOn(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_dutyCycleAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('dutyCycleAtPowerOn', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_dutyCycleAtPowerOn',
                    value: function get_dutyCycleAtPowerOn() {
                        return _regeneratorRuntime.async(function get_dutyCycleAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DUTYCYCLEATPOWERON_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._dutyCycleAtPowerOn);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'pulseDurationMove',
                    value: function pulseDurationMove(ms_target, ms_duration) {
                        var newval;
                        return _regeneratorRuntime.async(function pulseDurationMove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    newval = undefined;

                                    if (ms_target < 0.0) {
                                        ms_target = 0.0;
                                    }
                                    newval = String(Math.round(Math.round(ms_target * 65536))) + 'ms:' + String(Math.round(ms_duration));
                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this.set_pwmTransition(newval));

                                case 5:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 6:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'dutyCycleMove',
                    value: function dutyCycleMove(target, ms_duration) {
                        var newval;
                        return _regeneratorRuntime.async(function dutyCycleMove$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    newval = undefined;

                                    if (target < 0.0) {
                                        target = 0.0;
                                    }
                                    if (target > 100.0) {
                                        target = 100.0;
                                    }
                                    newval = String(Math.round(Math.round(target * 65536))) + ':' + String(Math.round(ms_duration));
                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this.set_pwmTransition(newval));

                                case 6:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextPwmOutput',
                    value: function nextPwmOutput() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YPwmOutput.FindPwmOutputInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindPwmOutput',
                    value: function FindPwmOutput(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('PwmOutput', func);
                        if (obj == null) {
                            obj = new YPwmOutput(YAPI, func);
                            YFunction._AddToCache('PwmOutput', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindPwmOutputInContext',
                    value: function FindPwmOutputInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'PwmOutput', func);
                        if (obj == null) {
                            obj = new YPwmOutput(yctx, func);
                            YFunction._AddToCache('PwmOutput', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstPwmOutput',
                    value: function FirstPwmOutput() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('PwmOutput');
                        if (next_hwid == null) return null;
                        return YPwmOutput.FindPwmOutput(next_hwid);
                    }
                }, {
                    key: 'FirstPwmOutputInContext',
                    value: function FirstPwmOutputInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('PwmOutput');
                        if (next_hwid == null) return null;
                        return YPwmOutput.FindPwmOutputInContext(yctx, next_hwid);
                    }
                }]);

                return YPwmOutput;
            })(YFunction);

            _export('YPwmOutput', YPwmOutput);
        }
    };
});
System.register('yoctolib-es/yocto_pwmpowersource.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_POWERMODE_USB_5V, Y_POWERMODE_USB_3V, Y_POWERMODE_EXT_V, Y_POWERMODE_OPNDRN, Y_POWERMODE_INVALID, YPwmPowerSource;

    function yFindPwmPowerSource(func) {
        return YPwmPowerSource.FindPwmPowerSource(func);
    }

    function yFirstPwmPowerSource() {
        return YPwmPowerSource.FirstPwmPowerSource();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindPwmPowerSource', yFindPwmPowerSource);

            _export('yFirstPwmPowerSource', yFirstPwmPowerSource);

            Y_POWERMODE_USB_5V = 0;

            _export('Y_POWERMODE_USB_5V', Y_POWERMODE_USB_5V);

            Y_POWERMODE_USB_3V = 1;

            _export('Y_POWERMODE_USB_3V', Y_POWERMODE_USB_3V);

            Y_POWERMODE_EXT_V = 2;

            _export('Y_POWERMODE_EXT_V', Y_POWERMODE_EXT_V);

            Y_POWERMODE_OPNDRN = 3;

            _export('Y_POWERMODE_OPNDRN', Y_POWERMODE_OPNDRN);

            Y_POWERMODE_INVALID = -1;

            _export('Y_POWERMODE_INVALID', Y_POWERMODE_INVALID);

            YPwmPowerSource = (function (_YFunction) {
                _inherits(YPwmPowerSource, _YFunction);

                function YPwmPowerSource(obj_yapi, str_func) {
                    _classCallCheck(this, YPwmPowerSource);

                    _get(Object.getPrototypeOf(YPwmPowerSource.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'PwmPowerSource';

                    this._powerMode = Y_POWERMODE_INVALID;
                    this.imm_setConst({
                        POWERMODE_USB_5V: 0,
                        POWERMODE_USB_3V: 1,
                        POWERMODE_EXT_V: 2,
                        POWERMODE_OPNDRN: 3,
                        POWERMODE_INVALID: -1
                    });
                }

                _createClass(YPwmPowerSource, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'powerMode':
                                this._powerMode = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YPwmPowerSource.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_powerMode',
                    value: function get_powerMode() {
                        return _regeneratorRuntime.async(function get_powerMode$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_POWERMODE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._powerMode);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_powerMode',
                    value: function set_powerMode(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_powerMode$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('powerMode', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextPwmPowerSource',
                    value: function nextPwmPowerSource() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YPwmPowerSource.FindPwmPowerSourceInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindPwmPowerSource',
                    value: function FindPwmPowerSource(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('PwmPowerSource', func);
                        if (obj == null) {
                            obj = new YPwmPowerSource(YAPI, func);
                            YFunction._AddToCache('PwmPowerSource', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindPwmPowerSourceInContext',
                    value: function FindPwmPowerSourceInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'PwmPowerSource', func);
                        if (obj == null) {
                            obj = new YPwmPowerSource(yctx, func);
                            YFunction._AddToCache('PwmPowerSource', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstPwmPowerSource',
                    value: function FirstPwmPowerSource() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('PwmPowerSource');
                        if (next_hwid == null) return null;
                        return YPwmPowerSource.FindPwmPowerSource(next_hwid);
                    }
                }, {
                    key: 'FirstPwmPowerSourceInContext',
                    value: function FirstPwmPowerSourceInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('PwmPowerSource');
                        if (next_hwid == null) return null;
                        return YPwmPowerSource.FindPwmPowerSourceInContext(yctx, next_hwid);
                    }
                }]);

                return YPwmPowerSource;
            })(YFunction);

            _export('YPwmPowerSource', YPwmPowerSource);
        }
    };
});
System.register('yoctolib-es/yocto_quadraturedecoder.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_DECODING_OFF, Y_DECODING_ON, Y_DECODING_INVALID, Y_SPEED_INVALID, YQuadratureDecoder;

    function yFindQuadratureDecoder(func) {
        return YQuadratureDecoder.FindQuadratureDecoder(func);
    }

    function yFirstQuadratureDecoder() {
        return YQuadratureDecoder.FirstQuadratureDecoder();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindQuadratureDecoder', yFindQuadratureDecoder);

            _export('yFirstQuadratureDecoder', yFirstQuadratureDecoder);

            Y_DECODING_OFF = 0;

            _export('Y_DECODING_OFF', Y_DECODING_OFF);

            Y_DECODING_ON = 1;

            _export('Y_DECODING_ON', Y_DECODING_ON);

            Y_DECODING_INVALID = -1;

            _export('Y_DECODING_INVALID', Y_DECODING_INVALID);

            Y_SPEED_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_SPEED_INVALID', Y_SPEED_INVALID);

            YQuadratureDecoder = (function (_YSensor) {
                _inherits(YQuadratureDecoder, _YSensor);

                function YQuadratureDecoder(obj_yapi, str_func) {
                    _classCallCheck(this, YQuadratureDecoder);

                    _get(Object.getPrototypeOf(YQuadratureDecoder.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'QuadratureDecoder';

                    this._speed = Y_SPEED_INVALID;

                    this._decoding = Y_DECODING_INVALID;
                    this.imm_setConst({
                        SPEED_INVALID: YAPI.INVALID_DOUBLE,
                        DECODING_OFF: 0,
                        DECODING_ON: 1,
                        DECODING_INVALID: -1
                    });
                }

                _createClass(YQuadratureDecoder, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'speed':
                                this._speed = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'decoding':
                                this._decoding = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YQuadratureDecoder.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'set_currentValue',
                    value: function set_currentValue(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_currentValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('currentValue', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_speed',
                    value: function get_speed() {
                        return _regeneratorRuntime.async(function get_speed$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SPEED_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._speed);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_decoding',
                    value: function get_decoding() {
                        return _regeneratorRuntime.async(function get_decoding$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DECODING_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._decoding);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_decoding',
                    value: function set_decoding(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_decoding$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('decoding', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextQuadratureDecoder',
                    value: function nextQuadratureDecoder() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YQuadratureDecoder.FindQuadratureDecoderInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindQuadratureDecoder',
                    value: function FindQuadratureDecoder(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('QuadratureDecoder', func);
                        if (obj == null) {
                            obj = new YQuadratureDecoder(YAPI, func);
                            YFunction._AddToCache('QuadratureDecoder', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindQuadratureDecoderInContext',
                    value: function FindQuadratureDecoderInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'QuadratureDecoder', func);
                        if (obj == null) {
                            obj = new YQuadratureDecoder(yctx, func);
                            YFunction._AddToCache('QuadratureDecoder', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstQuadratureDecoder',
                    value: function FirstQuadratureDecoder() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('QuadratureDecoder');
                        if (next_hwid == null) return null;
                        return YQuadratureDecoder.FindQuadratureDecoder(next_hwid);
                    }
                }, {
                    key: 'FirstQuadratureDecoderInContext',
                    value: function FirstQuadratureDecoderInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('QuadratureDecoder');
                        if (next_hwid == null) return null;
                        return YQuadratureDecoder.FindQuadratureDecoderInContext(yctx, next_hwid);
                    }
                }]);

                return YQuadratureDecoder;
            })(YSensor);

            _export('YQuadratureDecoder', YQuadratureDecoder);
        }
    };
});
System.register('yoctolib-es/yocto_realtimeclock.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_TIMESET_FALSE, Y_TIMESET_TRUE, Y_TIMESET_INVALID, Y_UNIXTIME_INVALID, Y_DATETIME_INVALID, Y_UTCOFFSET_INVALID, YRealTimeClock;

    function yFindRealTimeClock(func) {
        return YRealTimeClock.FindRealTimeClock(func);
    }

    function yFirstRealTimeClock() {
        return YRealTimeClock.FirstRealTimeClock();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindRealTimeClock', yFindRealTimeClock);

            _export('yFirstRealTimeClock', yFirstRealTimeClock);

            Y_TIMESET_FALSE = 0;

            _export('Y_TIMESET_FALSE', Y_TIMESET_FALSE);

            Y_TIMESET_TRUE = 1;

            _export('Y_TIMESET_TRUE', Y_TIMESET_TRUE);

            Y_TIMESET_INVALID = -1;

            _export('Y_TIMESET_INVALID', Y_TIMESET_INVALID);

            Y_UNIXTIME_INVALID = YAPI.INVALID_LONG;

            _export('Y_UNIXTIME_INVALID', Y_UNIXTIME_INVALID);

            Y_DATETIME_INVALID = YAPI.INVALID_STRING;

            _export('Y_DATETIME_INVALID', Y_DATETIME_INVALID);

            Y_UTCOFFSET_INVALID = YAPI.INVALID_INT;

            _export('Y_UTCOFFSET_INVALID', Y_UTCOFFSET_INVALID);

            YRealTimeClock = (function (_YFunction) {
                _inherits(YRealTimeClock, _YFunction);

                function YRealTimeClock(obj_yapi, str_func) {
                    _classCallCheck(this, YRealTimeClock);

                    _get(Object.getPrototypeOf(YRealTimeClock.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'RealTimeClock';

                    this._unixTime = Y_UNIXTIME_INVALID;

                    this._dateTime = Y_DATETIME_INVALID;

                    this._utcOffset = Y_UTCOFFSET_INVALID;

                    this._timeSet = Y_TIMESET_INVALID;
                    this.imm_setConst({
                        UNIXTIME_INVALID: YAPI.INVALID_LONG,
                        DATETIME_INVALID: YAPI.INVALID_STRING,
                        UTCOFFSET_INVALID: YAPI.INVALID_INT,
                        TIMESET_FALSE: 0,
                        TIMESET_TRUE: 1,
                        TIMESET_INVALID: -1
                    });
                }

                _createClass(YRealTimeClock, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'unixTime':
                                this._unixTime = parseInt(val);
                                return 1;
                            case 'dateTime':
                                this._dateTime = val;
                                return 1;
                            case 'utcOffset':
                                this._utcOffset = parseInt(val);
                                return 1;
                            case 'timeSet':
                                this._timeSet = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YRealTimeClock.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_unixTime',
                    value: function get_unixTime() {
                        return _regeneratorRuntime.async(function get_unixTime$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_UNIXTIME_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._unixTime);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_unixTime',
                    value: function set_unixTime(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_unixTime$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('unixTime', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_dateTime',
                    value: function get_dateTime() {
                        return _regeneratorRuntime.async(function get_dateTime$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DATETIME_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._dateTime);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_utcOffset',
                    value: function get_utcOffset() {
                        return _regeneratorRuntime.async(function get_utcOffset$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_UTCOFFSET_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._utcOffset);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_utcOffset',
                    value: function set_utcOffset(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_utcOffset$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('utcOffset', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_timeSet',
                    value: function get_timeSet() {
                        return _regeneratorRuntime.async(function get_timeSet$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_TIMESET_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._timeSet);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextRealTimeClock',
                    value: function nextRealTimeClock() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YRealTimeClock.FindRealTimeClockInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindRealTimeClock',
                    value: function FindRealTimeClock(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('RealTimeClock', func);
                        if (obj == null) {
                            obj = new YRealTimeClock(YAPI, func);
                            YFunction._AddToCache('RealTimeClock', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindRealTimeClockInContext',
                    value: function FindRealTimeClockInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'RealTimeClock', func);
                        if (obj == null) {
                            obj = new YRealTimeClock(yctx, func);
                            YFunction._AddToCache('RealTimeClock', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstRealTimeClock',
                    value: function FirstRealTimeClock() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('RealTimeClock');
                        if (next_hwid == null) return null;
                        return YRealTimeClock.FindRealTimeClock(next_hwid);
                    }
                }, {
                    key: 'FirstRealTimeClockInContext',
                    value: function FirstRealTimeClockInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('RealTimeClock');
                        if (next_hwid == null) return null;
                        return YRealTimeClock.FindRealTimeClockInContext(yctx, next_hwid);
                    }
                }]);

                return YRealTimeClock;
            })(YFunction);

            _export('YRealTimeClock', YRealTimeClock);
        }
    };
});
System.register('yoctolib-es/yocto_refframe.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_MOUNTPOSITION_BOTTOM, Y_MOUNTPOSITION_TOP, Y_MOUNTPOSITION_FRONT, Y_MOUNTPOSITION_REAR, Y_MOUNTPOSITION_RIGHT, Y_MOUNTPOSITION_LEFT, Y_MOUNTORIENTATION_TWELVE, Y_MOUNTORIENTATION_THREE, Y_MOUNTORIENTATION_SIX, Y_MOUNTORIENTATION_NINE, Y_MOUNTPOS_INVALID, Y_BEARING_INVALID, Y_CALIBRATIONPARAM_INVALID, YRefFrame;

    function yFindRefFrame(func) {
        return YRefFrame.FindRefFrame(func);
    }

    function yFirstRefFrame() {
        return YRefFrame.FirstRefFrame();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindRefFrame', yFindRefFrame);

            _export('yFirstRefFrame', yFirstRefFrame);

            Y_MOUNTPOSITION_BOTTOM = 0;

            _export('Y_MOUNTPOSITION_BOTTOM', Y_MOUNTPOSITION_BOTTOM);

            Y_MOUNTPOSITION_TOP = 1;

            _export('Y_MOUNTPOSITION_TOP', Y_MOUNTPOSITION_TOP);

            Y_MOUNTPOSITION_FRONT = 2;

            _export('Y_MOUNTPOSITION_FRONT', Y_MOUNTPOSITION_FRONT);

            Y_MOUNTPOSITION_REAR = 3;

            _export('Y_MOUNTPOSITION_REAR', Y_MOUNTPOSITION_REAR);

            Y_MOUNTPOSITION_RIGHT = 4;

            _export('Y_MOUNTPOSITION_RIGHT', Y_MOUNTPOSITION_RIGHT);

            Y_MOUNTPOSITION_LEFT = 5;

            _export('Y_MOUNTPOSITION_LEFT', Y_MOUNTPOSITION_LEFT);

            Y_MOUNTORIENTATION_TWELVE = 0;

            _export('Y_MOUNTORIENTATION_TWELVE', Y_MOUNTORIENTATION_TWELVE);

            Y_MOUNTORIENTATION_THREE = 1;

            _export('Y_MOUNTORIENTATION_THREE', Y_MOUNTORIENTATION_THREE);

            Y_MOUNTORIENTATION_SIX = 2;

            _export('Y_MOUNTORIENTATION_SIX', Y_MOUNTORIENTATION_SIX);

            Y_MOUNTORIENTATION_NINE = 3;

            _export('Y_MOUNTORIENTATION_NINE', Y_MOUNTORIENTATION_NINE);

            Y_MOUNTPOS_INVALID = YAPI.INVALID_UINT;

            _export('Y_MOUNTPOS_INVALID', Y_MOUNTPOS_INVALID);

            Y_BEARING_INVALID = YAPI.INVALID_DOUBLE;

            _export('Y_BEARING_INVALID', Y_BEARING_INVALID);

            Y_CALIBRATIONPARAM_INVALID = YAPI.INVALID_STRING;

            _export('Y_CALIBRATIONPARAM_INVALID', Y_CALIBRATIONPARAM_INVALID);

            YRefFrame = (function (_YFunction) {
                _inherits(YRefFrame, _YFunction);

                function YRefFrame(obj_yapi, str_func) {
                    _classCallCheck(this, YRefFrame);

                    _get(Object.getPrototypeOf(YRefFrame.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'RefFrame';

                    this._mountPos = Y_MOUNTPOS_INVALID;

                    this._bearing = Y_BEARING_INVALID;

                    this._calibrationParam = Y_CALIBRATIONPARAM_INVALID;

                    this._calibStage = 0;

                    this._calibStageHint = '';

                    this._calibStageProgress = 0;

                    this._calibProgress = 0;

                    this._calibLogMsg = '';

                    this._calibSavedParams = '';

                    this._calibCount = 0;

                    this._calibInternalPos = 0;

                    this._calibPrevTick = 0;

                    this._calibOrient = [];

                    this._calibDataAccX = [];

                    this._calibDataAccY = [];

                    this._calibDataAccZ = [];

                    this._calibDataAcc = [];

                    this._calibAccXOfs = 0;

                    this._calibAccYOfs = 0;

                    this._calibAccZOfs = 0;

                    this._calibAccXScale = 0;

                    this._calibAccYScale = 0;

                    this._calibAccZScale = 0;
                    this.imm_setConst({
                        MOUNTPOS_INVALID: YAPI.INVALID_UINT,
                        BEARING_INVALID: YAPI.INVALID_DOUBLE,
                        CALIBRATIONPARAM_INVALID: YAPI.INVALID_STRING,
                        MOUNTPOSITION_BOTTOM: 0,
                        MOUNTPOSITION_TOP: 1,
                        MOUNTPOSITION_FRONT: 2,
                        MOUNTPOSITION_REAR: 3,
                        MOUNTPOSITION_RIGHT: 4,
                        MOUNTPOSITION_LEFT: 5,
                        MOUNTORIENTATION_TWELVE: 0,
                        MOUNTORIENTATION_THREE: 1,
                        MOUNTORIENTATION_SIX: 2,
                        MOUNTORIENTATION_NINE: 3
                    });
                }

                _createClass(YRefFrame, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'mountPos':
                                this._mountPos = parseInt(val);
                                return 1;
                            case 'bearing':
                                this._bearing = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'calibrationParam':
                                this._calibrationParam = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YRefFrame.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_mountPos',
                    value: function get_mountPos() {
                        return _regeneratorRuntime.async(function get_mountPos$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MOUNTPOS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._mountPos);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_mountPos',
                    value: function set_mountPos(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_mountPos$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('mountPos', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_bearing',
                    value: function set_bearing(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_bearing$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('bearing', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_bearing',
                    value: function get_bearing() {
                        return _regeneratorRuntime.async(function get_bearing$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_BEARING_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._bearing);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_calibrationParam',
                    value: function get_calibrationParam() {
                        return _regeneratorRuntime.async(function get_calibrationParam$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CALIBRATIONPARAM_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._calibrationParam);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_calibrationParam',
                    value: function set_calibrationParam(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_calibrationParam$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('calibrationParam', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_mountPosition',
                    value: function get_mountPosition() {
                        var position;
                        return _regeneratorRuntime.async(function get_mountPosition$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    position = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.get_mountPos());

                                case 3:
                                    position = context$2$0.sent;
                                    return context$2$0.abrupt('return', position >> 2);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_mountOrientation',
                    value: function get_mountOrientation() {
                        var position;
                        return _regeneratorRuntime.async(function get_mountOrientation$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    position = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.get_mountPos());

                                case 3:
                                    position = context$2$0.sent;
                                    return context$2$0.abrupt('return', position & 3);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_mountPosition',
                    value: function set_mountPosition(position, orientation) {
                        var mixedPos;
                        return _regeneratorRuntime.async(function set_mountPosition$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    mixedPos = undefined;

                                    mixedPos = (position << 2) + orientation;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.set_mountPos(mixedPos));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_calibSort',
                    value: function _calibSort(start, stopidx) {
                        var idx, changed, a, b, xa, xb;
                        return _regeneratorRuntime.async(function _calibSort$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    idx = undefined;
                                    changed = undefined;
                                    a = undefined;
                                    b = undefined;
                                    xa = undefined;
                                    xb = undefined;

                                    changed = 1;
                                    while (changed > 0) {
                                        changed = 0;
                                        a = this._calibDataAcc[start];
                                        idx = start + 1;
                                        while (idx < stopidx) {
                                            b = this._calibDataAcc[idx];
                                            if (a > b) {
                                                this._calibDataAcc[idx - 1] = b;
                                                this._calibDataAcc[idx] = a;
                                                xa = this._calibDataAccX[idx - 1];
                                                xb = this._calibDataAccX[idx];
                                                this._calibDataAccX[idx - 1] = xb;
                                                this._calibDataAccX[idx] = xa;
                                                xa = this._calibDataAccY[idx - 1];
                                                xb = this._calibDataAccY[idx];
                                                this._calibDataAccY[idx - 1] = xb;
                                                this._calibDataAccY[idx] = xa;
                                                xa = this._calibDataAccZ[idx - 1];
                                                xb = this._calibDataAccZ[idx];
                                                this._calibDataAccZ[idx - 1] = xb;
                                                this._calibDataAccZ[idx] = xa;
                                                changed = changed + 1;
                                            } else {
                                                a = b;
                                            }
                                            idx = idx + 1;
                                        }
                                    }
                                    return context$2$0.abrupt('return', 0);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'start3DCalibration',
                    value: function start3DCalibration() {
                        return _regeneratorRuntime.async(function start3DCalibration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.isOnline());

                                case 2:
                                    if (context$2$0.sent) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_DEVICE_NOT_FOUND);

                                case 4:
                                    if (!(this._calibStage != 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this.cancel3DCalibration());

                                case 7:
                                    context$2$0.next = 9;
                                    return _regeneratorRuntime.awrap(this.get_calibrationParam());

                                case 9:
                                    this._calibSavedParams = context$2$0.sent;
                                    context$2$0.next = 12;
                                    return _regeneratorRuntime.awrap(this.set_calibrationParam('0'));

                                case 12:
                                    this._calibCount = 50;
                                    this._calibStage = 1;
                                    this._calibStageHint = 'Set down the device on a steady horizontal surface';
                                    this._calibStageProgress = 0;
                                    this._calibProgress = 1;
                                    this._calibInternalPos = 0;
                                    this._calibPrevTick = this._yapi.GetTickCount() & 0x7FFFFFFF;
                                    this._calibOrient.length = 0;
                                    this._calibDataAccX.length = 0;
                                    this._calibDataAccY.length = 0;
                                    this._calibDataAccZ.length = 0;
                                    this._calibDataAcc.length = 0;
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 25:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'more3DCalibration',
                    value: function more3DCalibration() {
                        var currTick, jsonData, xVal, yVal, zVal, xSq, ySq, zSq, norm, orient, idx, intpos, err;
                        return _regeneratorRuntime.async(function more3DCalibration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    currTick = undefined;
                                    jsonData = undefined;
                                    xVal = undefined;
                                    yVal = undefined;
                                    zVal = undefined;
                                    xSq = undefined;
                                    ySq = undefined;
                                    zSq = undefined;
                                    norm = undefined;
                                    orient = undefined;
                                    idx = undefined;
                                    intpos = undefined;
                                    err = undefined;

                                    if (!(this._calibStage == 0)) {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_INVALID_ARGUMENT);

                                case 15:
                                    if (!(this._calibProgress == 100)) {
                                        context$2$0.next = 17;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 17:
                                    currTick = this._yapi.GetTickCount() & 0x7FFFFFFF;

                                    if (!((currTick - this._calibPrevTick & 0x7FFFFFFF) < 160)) {
                                        context$2$0.next = 20;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 20:
                                    this._calibStageHint = 'Set down the device on a steady horizontal surface';
                                    this._calibPrevTick = currTick + 500 & 0x7FFFFFFF;
                                    context$2$0.next = 24;
                                    return _regeneratorRuntime.awrap(this._download('api/accelerometer.json'));

                                case 24:
                                    jsonData = context$2$0.sent;

                                    xVal = this._yapi.imm_atoi(this.imm_json_get_key(jsonData, 'xValue')) / 65536.0;
                                    yVal = this._yapi.imm_atoi(this.imm_json_get_key(jsonData, 'yValue')) / 65536.0;
                                    zVal = this._yapi.imm_atoi(this.imm_json_get_key(jsonData, 'zValue')) / 65536.0;
                                    xSq = xVal * xVal;

                                    if (!(xSq >= 0.04 && xSq < 0.64)) {
                                        context$2$0.next = 31;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 31:
                                    if (!(xSq >= 1.44)) {
                                        context$2$0.next = 33;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 33:
                                    ySq = yVal * yVal;

                                    if (!(ySq >= 0.04 && ySq < 0.64)) {
                                        context$2$0.next = 36;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 36:
                                    if (!(ySq >= 1.44)) {
                                        context$2$0.next = 38;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 38:
                                    zSq = zVal * zVal;

                                    if (!(zSq >= 0.04 && zSq < 0.64)) {
                                        context$2$0.next = 41;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 41:
                                    if (!(zSq >= 1.44)) {
                                        context$2$0.next = 43;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 43:
                                    norm = Math.sqrt(xSq + ySq + zSq);

                                    if (!(norm < 0.8 || norm > 1.2)) {
                                        context$2$0.next = 46;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 46:
                                    this._calibPrevTick = currTick;

                                    orient = 0;
                                    if (zSq > 0.5) {
                                        if (zVal > 0) {
                                            orient = 0;
                                        } else {
                                            orient = 1;
                                        }
                                    }
                                    if (xSq > 0.5) {
                                        if (xVal > 0) {
                                            orient = 2;
                                        } else {
                                            orient = 3;
                                        }
                                    }
                                    if (ySq > 0.5) {
                                        if (yVal > 0) {
                                            orient = 4;
                                        } else {
                                            orient = 5;
                                        }
                                    }

                                    if (!(this._calibStageProgress == 0)) {
                                        context$2$0.next = 61;
                                        break;
                                    }

                                    idx = 0;
                                    err = 0;
                                    while (idx + 1 < this._calibStage) {
                                        if (this._calibOrient[idx] == orient) {
                                            err = 1;
                                        }
                                        idx = idx + 1;
                                    }

                                    if (!(err != 0)) {
                                        context$2$0.next = 58;
                                        break;
                                    }

                                    this._calibStageHint = 'Turn the device on another face';
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 58:
                                    this._calibOrient.push(orient);
                                    context$2$0.next = 64;
                                    break;

                                case 61:
                                    if (!(orient != this._calibOrient[this._calibStage - 1])) {
                                        context$2$0.next = 64;
                                        break;
                                    }

                                    this._calibStageHint = 'Not yet done, please move back to the previous face';
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 64:
                                    this._calibStageHint = 'calibrating..';
                                    this._calibDataAccX.push(xVal);
                                    this._calibDataAccY.push(yVal);
                                    this._calibDataAccZ.push(zVal);
                                    this._calibDataAcc.push(norm);
                                    this._calibInternalPos = this._calibInternalPos + 1;
                                    this._calibProgress = 1 + 16 * (this._calibStage - 1) + parseInt(16 * this._calibInternalPos / this._calibCount, 10);

                                    if (!(this._calibInternalPos < this._calibCount)) {
                                        context$2$0.next = 74;
                                        break;
                                    }

                                    this._calibStageProgress = 1 + parseInt(99 * this._calibInternalPos / this._calibCount, 10);
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 74:
                                    intpos = (this._calibStage - 1) * this._calibCount;
                                    context$2$0.next = 77;
                                    return _regeneratorRuntime.awrap(this._calibSort(intpos, intpos + this._calibCount));

                                case 77:
                                    intpos = intpos + parseInt(this._calibCount / 2, 10);
                                    this._calibLogMsg = 'Stage ' + String(Math.round(this._calibStage)) + ': median is ' + String(Math.round(Math.round(1000 * this._calibDataAccX[intpos]))) + ',' + String(Math.round(Math.round(1000 * this._calibDataAccY[intpos]))) + ',' + String(Math.round(Math.round(1000 * this._calibDataAccZ[intpos])));

                                    this._calibStage = this._calibStage + 1;

                                    if (!(this._calibStage < 7)) {
                                        context$2$0.next = 86;
                                        break;
                                    }

                                    this._calibStageHint = 'Turn the device on another face';
                                    this._calibPrevTick = currTick + 500 & 0x7FFFFFFF;
                                    this._calibStageProgress = 0;
                                    this._calibInternalPos = 0;
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 86:
                                    xVal = 0;
                                    yVal = 0;
                                    zVal = 0;
                                    idx = 0;
                                    while (idx < 6) {
                                        intpos = idx * this._calibCount + parseInt(this._calibCount / 2, 10);
                                        orient = this._calibOrient[idx];
                                        if (orient == 0 || orient == 1) {
                                            zVal = zVal + this._calibDataAccZ[intpos];
                                        }
                                        if (orient == 2 || orient == 3) {
                                            xVal = xVal + this._calibDataAccX[intpos];
                                        }
                                        if (orient == 4 || orient == 5) {
                                            yVal = yVal + this._calibDataAccY[intpos];
                                        }
                                        idx = idx + 1;
                                    }
                                    this._calibAccXOfs = xVal / 2.0;
                                    this._calibAccYOfs = yVal / 2.0;
                                    this._calibAccZOfs = zVal / 2.0;

                                    intpos = 0;
                                    while (intpos < this._calibDataAcc.length) {
                                        xVal = this._calibDataAccX[intpos] - this._calibAccXOfs;
                                        yVal = this._calibDataAccY[intpos] - this._calibAccYOfs;
                                        zVal = this._calibDataAccZ[intpos] - this._calibAccZOfs;
                                        norm = Math.sqrt(xVal * xVal + yVal * yVal + zVal * zVal);
                                        this._calibDataAcc[intpos] = norm;
                                        intpos = intpos + 1;
                                    }
                                    idx = 0;

                                case 97:
                                    if (!(idx < 6)) {
                                        context$2$0.next = 104;
                                        break;
                                    }

                                    intpos = idx * this._calibCount;
                                    context$2$0.next = 101;
                                    return _regeneratorRuntime.awrap(this._calibSort(intpos, intpos + this._calibCount));

                                case 101:
                                    idx = idx + 1;
                                    context$2$0.next = 97;
                                    break;

                                case 104:
                                    xVal = 0;
                                    yVal = 0;
                                    zVal = 0;
                                    idx = 0;
                                    while (idx < 6) {
                                        intpos = idx * this._calibCount + parseInt(this._calibCount / 2, 10);
                                        orient = this._calibOrient[idx];
                                        if (orient == 0 || orient == 1) {
                                            zVal = zVal + this._calibDataAcc[intpos];
                                        }
                                        if (orient == 2 || orient == 3) {
                                            xVal = xVal + this._calibDataAcc[intpos];
                                        }
                                        if (orient == 4 || orient == 5) {
                                            yVal = yVal + this._calibDataAcc[intpos];
                                        }
                                        idx = idx + 1;
                                    }
                                    this._calibAccXScale = xVal / 2.0;
                                    this._calibAccYScale = yVal / 2.0;
                                    this._calibAccZScale = zVal / 2.0;

                                    this._calibProgress = 100;
                                    this._calibStageHint = 'Calibration data ready for saving';
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 115:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_3DCalibrationHint',
                    value: function get_3DCalibrationHint() {
                        return _regeneratorRuntime.async(function get_3DCalibrationHint$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._calibStageHint);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_3DCalibrationProgress',
                    value: function get_3DCalibrationProgress() {
                        return _regeneratorRuntime.async(function get_3DCalibrationProgress$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._calibProgress);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_3DCalibrationStage',
                    value: function get_3DCalibrationStage() {
                        return _regeneratorRuntime.async(function get_3DCalibrationStage$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._calibStage);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_3DCalibrationStageProgress',
                    value: function get_3DCalibrationStageProgress() {
                        return _regeneratorRuntime.async(function get_3DCalibrationStageProgress$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._calibStageProgress);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_3DCalibrationLogMsg',
                    value: function get_3DCalibrationLogMsg() {
                        var msg;
                        return _regeneratorRuntime.async(function get_3DCalibrationLogMsg$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    msg = undefined;

                                    msg = this._calibLogMsg;
                                    this._calibLogMsg = '';
                                    return context$2$0.abrupt('return', msg);

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'save3DCalibration',
                    value: function save3DCalibration() {
                        var shiftX, shiftY, shiftZ, scaleExp, scaleX, scaleY, scaleZ, scaleLo, scaleHi, newcalib;
                        return _regeneratorRuntime.async(function save3DCalibration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    shiftX = undefined;
                                    shiftY = undefined;
                                    shiftZ = undefined;
                                    scaleExp = undefined;
                                    scaleX = undefined;
                                    scaleY = undefined;
                                    scaleZ = undefined;
                                    scaleLo = undefined;
                                    scaleHi = undefined;
                                    newcalib = undefined;

                                    if (!(this._calibProgress != 100)) {
                                        context$2$0.next = 12;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_INVALID_ARGUMENT);

                                case 12:
                                    shiftX = -Math.round(this._calibAccXOfs / 0.000732);
                                    if (shiftX < 0) {
                                        shiftX = shiftX + 65536;
                                    }
                                    shiftY = -Math.round(this._calibAccYOfs / 0.000732);
                                    if (shiftY < 0) {
                                        shiftY = shiftY + 65536;
                                    }
                                    shiftZ = -Math.round(this._calibAccZOfs / 0.000732);
                                    if (shiftZ < 0) {
                                        shiftZ = shiftZ + 65536;
                                    }
                                    scaleX = Math.round(2048.0 / this._calibAccXScale) - 2048;
                                    scaleY = Math.round(2048.0 / this._calibAccYScale) - 2048;
                                    scaleZ = Math.round(2048.0 / this._calibAccZScale) - 2048;
                                    if (scaleX < -2048 || scaleX >= 2048 || scaleY < -2048 || scaleY >= 2048 || scaleZ < -2048 || scaleZ >= 2048) {
                                        scaleExp = 3;
                                    } else {
                                        if (scaleX < -1024 || scaleX >= 1024 || scaleY < -1024 || scaleY >= 1024 || scaleZ < -1024 || scaleZ >= 1024) {
                                            scaleExp = 2;
                                        } else {
                                            if (scaleX < -512 || scaleX >= 512 || scaleY < -512 || scaleY >= 512 || scaleZ < -512 || scaleZ >= 512) {
                                                scaleExp = 1;
                                            } else {
                                                scaleExp = 0;
                                            }
                                        }
                                    }
                                    if (scaleExp > 0) {
                                        scaleX = scaleX >> scaleExp;
                                        scaleY = scaleY >> scaleExp;
                                        scaleZ = scaleZ >> scaleExp;
                                    }
                                    if (scaleX < 0) {
                                        scaleX = scaleX + 1024;
                                    }
                                    if (scaleY < 0) {
                                        scaleY = scaleY + 1024;
                                    }
                                    if (scaleZ < 0) {
                                        scaleZ = scaleZ + 1024;
                                    }
                                    scaleLo = ((scaleY & 15) << 12) + (scaleX << 2) + scaleExp;
                                    scaleHi = (scaleZ << 6) + (scaleY >> 4);

                                    newcalib = '5,' + String(Math.round(shiftX)) + ',' + String(Math.round(shiftY)) + ',' + String(Math.round(shiftZ)) + ',' + String(Math.round(scaleLo)) + ',' + String(Math.round(scaleHi));
                                    this._calibStage = 0;
                                    context$2$0.next = 32;
                                    return _regeneratorRuntime.awrap(this.set_calibrationParam(newcalib));

                                case 32:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 33:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'cancel3DCalibration',
                    value: function cancel3DCalibration() {
                        return _regeneratorRuntime.async(function cancel3DCalibration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._calibStage == 0)) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 2:
                                    this._calibStage = 0;
                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this.set_calibrationParam(this._calibSavedParams));

                                case 5:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 6:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextRefFrame',
                    value: function nextRefFrame() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YRefFrame.FindRefFrameInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindRefFrame',
                    value: function FindRefFrame(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('RefFrame', func);
                        if (obj == null) {
                            obj = new YRefFrame(YAPI, func);
                            YFunction._AddToCache('RefFrame', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindRefFrameInContext',
                    value: function FindRefFrameInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'RefFrame', func);
                        if (obj == null) {
                            obj = new YRefFrame(yctx, func);
                            YFunction._AddToCache('RefFrame', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstRefFrame',
                    value: function FirstRefFrame() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('RefFrame');
                        if (next_hwid == null) return null;
                        return YRefFrame.FindRefFrame(next_hwid);
                    }
                }, {
                    key: 'FirstRefFrameInContext',
                    value: function FirstRefFrameInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('RefFrame');
                        if (next_hwid == null) return null;
                        return YRefFrame.FindRefFrameInContext(yctx, next_hwid);
                    }
                }]);

                return YRefFrame;
            })(YFunction);

            _export('YRefFrame', YRefFrame);
        }
    };
});
System.register('yoctolib-es/yocto_relay.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_STATE_A, Y_STATE_B, Y_STATE_INVALID, Y_STATEATPOWERON_UNCHANGED, Y_STATEATPOWERON_A, Y_STATEATPOWERON_B, Y_STATEATPOWERON_INVALID, Y_OUTPUT_OFF, Y_OUTPUT_ON, Y_OUTPUT_INVALID, Y_MAXTIMEONSTATEA_INVALID, Y_MAXTIMEONSTATEB_INVALID, Y_PULSETIMER_INVALID, Y_DELAYEDPULSETIMER_INVALID, Y_COUNTDOWN_INVALID, YRelay;

    function yFindRelay(func) {
        return YRelay.FindRelay(func);
    }

    function yFirstRelay() {
        return YRelay.FirstRelay();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindRelay', yFindRelay);

            _export('yFirstRelay', yFirstRelay);

            Y_STATE_A = 0;

            _export('Y_STATE_A', Y_STATE_A);

            Y_STATE_B = 1;

            _export('Y_STATE_B', Y_STATE_B);

            Y_STATE_INVALID = -1;

            _export('Y_STATE_INVALID', Y_STATE_INVALID);

            Y_STATEATPOWERON_UNCHANGED = 0;

            _export('Y_STATEATPOWERON_UNCHANGED', Y_STATEATPOWERON_UNCHANGED);

            Y_STATEATPOWERON_A = 1;

            _export('Y_STATEATPOWERON_A', Y_STATEATPOWERON_A);

            Y_STATEATPOWERON_B = 2;

            _export('Y_STATEATPOWERON_B', Y_STATEATPOWERON_B);

            Y_STATEATPOWERON_INVALID = -1;

            _export('Y_STATEATPOWERON_INVALID', Y_STATEATPOWERON_INVALID);

            Y_OUTPUT_OFF = 0;

            _export('Y_OUTPUT_OFF', Y_OUTPUT_OFF);

            Y_OUTPUT_ON = 1;

            _export('Y_OUTPUT_ON', Y_OUTPUT_ON);

            Y_OUTPUT_INVALID = -1;

            _export('Y_OUTPUT_INVALID', Y_OUTPUT_INVALID);

            Y_MAXTIMEONSTATEA_INVALID = YAPI.INVALID_LONG;

            _export('Y_MAXTIMEONSTATEA_INVALID', Y_MAXTIMEONSTATEA_INVALID);

            Y_MAXTIMEONSTATEB_INVALID = YAPI.INVALID_LONG;

            _export('Y_MAXTIMEONSTATEB_INVALID', Y_MAXTIMEONSTATEB_INVALID);

            Y_PULSETIMER_INVALID = YAPI.INVALID_LONG;

            _export('Y_PULSETIMER_INVALID', Y_PULSETIMER_INVALID);

            Y_DELAYEDPULSETIMER_INVALID = null;

            _export('Y_DELAYEDPULSETIMER_INVALID', Y_DELAYEDPULSETIMER_INVALID);

            Y_COUNTDOWN_INVALID = YAPI.INVALID_LONG;

            _export('Y_COUNTDOWN_INVALID', Y_COUNTDOWN_INVALID);

            YRelay = (function (_YFunction) {
                _inherits(YRelay, _YFunction);

                function YRelay(obj_yapi, str_func) {
                    _classCallCheck(this, YRelay);

                    _get(Object.getPrototypeOf(YRelay.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Relay';

                    this._state = Y_STATE_INVALID;

                    this._stateAtPowerOn = Y_STATEATPOWERON_INVALID;

                    this._maxTimeOnStateA = Y_MAXTIMEONSTATEA_INVALID;

                    this._maxTimeOnStateB = Y_MAXTIMEONSTATEB_INVALID;

                    this._output = Y_OUTPUT_INVALID;

                    this._pulseTimer = Y_PULSETIMER_INVALID;

                    this._delayedPulseTimer = Y_DELAYEDPULSETIMER_INVALID;

                    this._countdown = Y_COUNTDOWN_INVALID;
                    this.imm_setConst({
                        STATE_A: 0,
                        STATE_B: 1,
                        STATE_INVALID: -1,
                        STATEATPOWERON_UNCHANGED: 0,
                        STATEATPOWERON_A: 1,
                        STATEATPOWERON_B: 2,
                        STATEATPOWERON_INVALID: -1,
                        MAXTIMEONSTATEA_INVALID: YAPI.INVALID_LONG,
                        MAXTIMEONSTATEB_INVALID: YAPI.INVALID_LONG,
                        OUTPUT_OFF: 0,
                        OUTPUT_ON: 1,
                        OUTPUT_INVALID: -1,
                        PULSETIMER_INVALID: YAPI.INVALID_LONG,
                        COUNTDOWN_INVALID: YAPI.INVALID_LONG
                    });
                }

                _createClass(YRelay, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'state':
                                this._state = parseInt(val);
                                return 1;
                            case 'stateAtPowerOn':
                                this._stateAtPowerOn = parseInt(val);
                                return 1;
                            case 'maxTimeOnStateA':
                                this._maxTimeOnStateA = parseInt(val);
                                return 1;
                            case 'maxTimeOnStateB':
                                this._maxTimeOnStateB = parseInt(val);
                                return 1;
                            case 'output':
                                this._output = parseInt(val);
                                return 1;
                            case 'pulseTimer':
                                this._pulseTimer = parseInt(val);
                                return 1;
                            case 'delayedPulseTimer':
                                this._delayedPulseTimer = val;
                                return 1;
                            case 'countdown':
                                this._countdown = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YRelay.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_state',
                    value: function get_state() {
                        return _regeneratorRuntime.async(function get_state$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_STATE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._state);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_state',
                    value: function set_state(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_state$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('state', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_stateAtPowerOn',
                    value: function get_stateAtPowerOn() {
                        return _regeneratorRuntime.async(function get_stateAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_STATEATPOWERON_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._stateAtPowerOn);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_stateAtPowerOn',
                    value: function set_stateAtPowerOn(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_stateAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('stateAtPowerOn', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_maxTimeOnStateA',
                    value: function get_maxTimeOnStateA() {
                        return _regeneratorRuntime.async(function get_maxTimeOnStateA$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MAXTIMEONSTATEA_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._maxTimeOnStateA);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_maxTimeOnStateA',
                    value: function set_maxTimeOnStateA(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_maxTimeOnStateA$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('maxTimeOnStateA', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_maxTimeOnStateB',
                    value: function get_maxTimeOnStateB() {
                        return _regeneratorRuntime.async(function get_maxTimeOnStateB$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MAXTIMEONSTATEB_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._maxTimeOnStateB);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_maxTimeOnStateB',
                    value: function set_maxTimeOnStateB(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_maxTimeOnStateB$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('maxTimeOnStateB', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_output',
                    value: function get_output() {
                        return _regeneratorRuntime.async(function get_output$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_OUTPUT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._output);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_output',
                    value: function set_output(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_output$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('output', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_pulseTimer',
                    value: function get_pulseTimer() {
                        return _regeneratorRuntime.async(function get_pulseTimer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PULSETIMER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._pulseTimer);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_pulseTimer',
                    value: function set_pulseTimer(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_pulseTimer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('pulseTimer', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'pulse',
                    value: function pulse(ms_duration) {
                        var rest_val;
                        return _regeneratorRuntime.async(function pulse$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(ms_duration);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('pulseTimer', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_delayedPulseTimer',
                    value: function get_delayedPulseTimer() {
                        return _regeneratorRuntime.async(function get_delayedPulseTimer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DELAYEDPULSETIMER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._delayedPulseTimer);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_delayedPulseTimer',
                    value: function set_delayedPulseTimer(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_delayedPulseTimer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval.target) + ':' + String(newval.ms);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('delayedPulseTimer', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'delayedPulse',
                    value: function delayedPulse(ms_delay, ms_duration) {
                        var rest_val;
                        return _regeneratorRuntime.async(function delayedPulse$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(ms_delay) + ':' + String(ms_duration);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('delayedPulseTimer', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_countdown',
                    value: function get_countdown() {
                        return _regeneratorRuntime.async(function get_countdown$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COUNTDOWN_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._countdown);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextRelay',
                    value: function nextRelay() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YRelay.FindRelayInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindRelay',
                    value: function FindRelay(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Relay', func);
                        if (obj == null) {
                            obj = new YRelay(YAPI, func);
                            YFunction._AddToCache('Relay', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindRelayInContext',
                    value: function FindRelayInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Relay', func);
                        if (obj == null) {
                            obj = new YRelay(yctx, func);
                            YFunction._AddToCache('Relay', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstRelay',
                    value: function FirstRelay() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Relay');
                        if (next_hwid == null) return null;
                        return YRelay.FindRelay(next_hwid);
                    }
                }, {
                    key: 'FirstRelayInContext',
                    value: function FirstRelayInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Relay');
                        if (next_hwid == null) return null;
                        return YRelay.FindRelayInContext(yctx, next_hwid);
                    }
                }]);

                return YRelay;
            })(YFunction);

            _export('YRelay', YRelay);
        }
    };
});
System.register('yoctolib-es/yocto_segmenteddisplay.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_DISPLAYMODE_DISCONNECTED, Y_DISPLAYMODE_MANUAL, Y_DISPLAYMODE_AUTO1, Y_DISPLAYMODE_AUTO60, Y_DISPLAYMODE_INVALID, Y_DISPLAYEDTEXT_INVALID, YSegmentedDisplay;

    function yFindSegmentedDisplay(func) {
        return YSegmentedDisplay.FindSegmentedDisplay(func);
    }

    function yFirstSegmentedDisplay() {
        return YSegmentedDisplay.FirstSegmentedDisplay();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindSegmentedDisplay', yFindSegmentedDisplay);

            _export('yFirstSegmentedDisplay', yFirstSegmentedDisplay);

            Y_DISPLAYMODE_DISCONNECTED = 0;

            _export('Y_DISPLAYMODE_DISCONNECTED', Y_DISPLAYMODE_DISCONNECTED);

            Y_DISPLAYMODE_MANUAL = 1;

            _export('Y_DISPLAYMODE_MANUAL', Y_DISPLAYMODE_MANUAL);

            Y_DISPLAYMODE_AUTO1 = 2;

            _export('Y_DISPLAYMODE_AUTO1', Y_DISPLAYMODE_AUTO1);

            Y_DISPLAYMODE_AUTO60 = 3;

            _export('Y_DISPLAYMODE_AUTO60', Y_DISPLAYMODE_AUTO60);

            Y_DISPLAYMODE_INVALID = -1;

            _export('Y_DISPLAYMODE_INVALID', Y_DISPLAYMODE_INVALID);

            Y_DISPLAYEDTEXT_INVALID = YAPI.INVALID_STRING;

            _export('Y_DISPLAYEDTEXT_INVALID', Y_DISPLAYEDTEXT_INVALID);

            YSegmentedDisplay = (function (_YFunction) {
                _inherits(YSegmentedDisplay, _YFunction);

                function YSegmentedDisplay(obj_yapi, str_func) {
                    _classCallCheck(this, YSegmentedDisplay);

                    _get(Object.getPrototypeOf(YSegmentedDisplay.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'SegmentedDisplay';

                    this._displayedText = Y_DISPLAYEDTEXT_INVALID;

                    this._displayMode = Y_DISPLAYMODE_INVALID;
                    this.imm_setConst({
                        DISPLAYEDTEXT_INVALID: YAPI.INVALID_STRING,
                        DISPLAYMODE_DISCONNECTED: 0,
                        DISPLAYMODE_MANUAL: 1,
                        DISPLAYMODE_AUTO1: 2,
                        DISPLAYMODE_AUTO60: 3,
                        DISPLAYMODE_INVALID: -1
                    });
                }

                _createClass(YSegmentedDisplay, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'displayedText':
                                this._displayedText = val;
                                return 1;
                            case 'displayMode':
                                this._displayMode = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YSegmentedDisplay.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_displayedText',
                    value: function get_displayedText() {
                        return _regeneratorRuntime.async(function get_displayedText$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DISPLAYEDTEXT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._displayedText);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_displayedText',
                    value: function set_displayedText(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_displayedText$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('displayedText', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_displayMode',
                    value: function get_displayMode() {
                        return _regeneratorRuntime.async(function get_displayMode$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DISPLAYMODE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._displayMode);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_displayMode',
                    value: function set_displayMode(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_displayMode$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('displayMode', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextSegmentedDisplay',
                    value: function nextSegmentedDisplay() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YSegmentedDisplay.FindSegmentedDisplayInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindSegmentedDisplay',
                    value: function FindSegmentedDisplay(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('SegmentedDisplay', func);
                        if (obj == null) {
                            obj = new YSegmentedDisplay(YAPI, func);
                            YFunction._AddToCache('SegmentedDisplay', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindSegmentedDisplayInContext',
                    value: function FindSegmentedDisplayInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'SegmentedDisplay', func);
                        if (obj == null) {
                            obj = new YSegmentedDisplay(yctx, func);
                            YFunction._AddToCache('SegmentedDisplay', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstSegmentedDisplay',
                    value: function FirstSegmentedDisplay() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('SegmentedDisplay');
                        if (next_hwid == null) return null;
                        return YSegmentedDisplay.FindSegmentedDisplay(next_hwid);
                    }
                }, {
                    key: 'FirstSegmentedDisplayInContext',
                    value: function FirstSegmentedDisplayInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('SegmentedDisplay');
                        if (next_hwid == null) return null;
                        return YSegmentedDisplay.FindSegmentedDisplayInContext(yctx, next_hwid);
                    }
                }]);

                return YSegmentedDisplay;
            })(YFunction);

            _export('YSegmentedDisplay', YSegmentedDisplay);
        }
    };
});
System.register('yoctolib-es/yocto_serialport.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_VOLTAGELEVEL_OFF, Y_VOLTAGELEVEL_TTL3V, Y_VOLTAGELEVEL_TTL3VR, Y_VOLTAGELEVEL_TTL5V, Y_VOLTAGELEVEL_TTL5VR, Y_VOLTAGELEVEL_RS232, Y_VOLTAGELEVEL_RS485, Y_VOLTAGELEVEL_INVALID, Y_SERIALMODE_INVALID, Y_PROTOCOL_INVALID, Y_RXCOUNT_INVALID, Y_TXCOUNT_INVALID, Y_ERRCOUNT_INVALID, Y_RXMSGCOUNT_INVALID, Y_TXMSGCOUNT_INVALID, Y_LASTMSG_INVALID, Y_CURRENTJOB_INVALID, Y_STARTUPJOB_INVALID, Y_COMMAND_INVALID, YSerialPort;

    function yFindSerialPort(func) {
        return YSerialPort.FindSerialPort(func);
    }

    function yFirstSerialPort() {
        return YSerialPort.FirstSerialPort();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindSerialPort', yFindSerialPort);

            _export('yFirstSerialPort', yFirstSerialPort);

            Y_VOLTAGELEVEL_OFF = 0;

            _export('Y_VOLTAGELEVEL_OFF', Y_VOLTAGELEVEL_OFF);

            Y_VOLTAGELEVEL_TTL3V = 1;

            _export('Y_VOLTAGELEVEL_TTL3V', Y_VOLTAGELEVEL_TTL3V);

            Y_VOLTAGELEVEL_TTL3VR = 2;

            _export('Y_VOLTAGELEVEL_TTL3VR', Y_VOLTAGELEVEL_TTL3VR);

            Y_VOLTAGELEVEL_TTL5V = 3;

            _export('Y_VOLTAGELEVEL_TTL5V', Y_VOLTAGELEVEL_TTL5V);

            Y_VOLTAGELEVEL_TTL5VR = 4;

            _export('Y_VOLTAGELEVEL_TTL5VR', Y_VOLTAGELEVEL_TTL5VR);

            Y_VOLTAGELEVEL_RS232 = 5;

            _export('Y_VOLTAGELEVEL_RS232', Y_VOLTAGELEVEL_RS232);

            Y_VOLTAGELEVEL_RS485 = 6;

            _export('Y_VOLTAGELEVEL_RS485', Y_VOLTAGELEVEL_RS485);

            Y_VOLTAGELEVEL_INVALID = -1;

            _export('Y_VOLTAGELEVEL_INVALID', Y_VOLTAGELEVEL_INVALID);

            Y_SERIALMODE_INVALID = YAPI.INVALID_STRING;

            _export('Y_SERIALMODE_INVALID', Y_SERIALMODE_INVALID);

            Y_PROTOCOL_INVALID = YAPI.INVALID_STRING;

            _export('Y_PROTOCOL_INVALID', Y_PROTOCOL_INVALID);

            Y_RXCOUNT_INVALID = YAPI.INVALID_UINT;

            _export('Y_RXCOUNT_INVALID', Y_RXCOUNT_INVALID);

            Y_TXCOUNT_INVALID = YAPI.INVALID_UINT;

            _export('Y_TXCOUNT_INVALID', Y_TXCOUNT_INVALID);

            Y_ERRCOUNT_INVALID = YAPI.INVALID_UINT;

            _export('Y_ERRCOUNT_INVALID', Y_ERRCOUNT_INVALID);

            Y_RXMSGCOUNT_INVALID = YAPI.INVALID_UINT;

            _export('Y_RXMSGCOUNT_INVALID', Y_RXMSGCOUNT_INVALID);

            Y_TXMSGCOUNT_INVALID = YAPI.INVALID_UINT;

            _export('Y_TXMSGCOUNT_INVALID', Y_TXMSGCOUNT_INVALID);

            Y_LASTMSG_INVALID = YAPI.INVALID_STRING;

            _export('Y_LASTMSG_INVALID', Y_LASTMSG_INVALID);

            Y_CURRENTJOB_INVALID = YAPI.INVALID_STRING;

            _export('Y_CURRENTJOB_INVALID', Y_CURRENTJOB_INVALID);

            Y_STARTUPJOB_INVALID = YAPI.INVALID_STRING;

            _export('Y_STARTUPJOB_INVALID', Y_STARTUPJOB_INVALID);

            Y_COMMAND_INVALID = YAPI.INVALID_STRING;

            _export('Y_COMMAND_INVALID', Y_COMMAND_INVALID);

            YSerialPort = (function (_YFunction) {
                _inherits(YSerialPort, _YFunction);

                function YSerialPort(obj_yapi, str_func) {
                    _classCallCheck(this, YSerialPort);

                    _get(Object.getPrototypeOf(YSerialPort.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'SerialPort';

                    this._serialMode = Y_SERIALMODE_INVALID;

                    this._protocol = Y_PROTOCOL_INVALID;

                    this._voltageLevel = Y_VOLTAGELEVEL_INVALID;

                    this._rxCount = Y_RXCOUNT_INVALID;

                    this._txCount = Y_TXCOUNT_INVALID;

                    this._errCount = Y_ERRCOUNT_INVALID;

                    this._rxMsgCount = Y_RXMSGCOUNT_INVALID;

                    this._txMsgCount = Y_TXMSGCOUNT_INVALID;

                    this._lastMsg = Y_LASTMSG_INVALID;

                    this._currentJob = Y_CURRENTJOB_INVALID;

                    this._startupJob = Y_STARTUPJOB_INVALID;

                    this._command = Y_COMMAND_INVALID;

                    this._rxptr = 0;
                    this.imm_setConst({
                        SERIALMODE_INVALID: YAPI.INVALID_STRING,
                        PROTOCOL_INVALID: YAPI.INVALID_STRING,
                        VOLTAGELEVEL_OFF: 0,
                        VOLTAGELEVEL_TTL3V: 1,
                        VOLTAGELEVEL_TTL3VR: 2,
                        VOLTAGELEVEL_TTL5V: 3,
                        VOLTAGELEVEL_TTL5VR: 4,
                        VOLTAGELEVEL_RS232: 5,
                        VOLTAGELEVEL_RS485: 6,
                        VOLTAGELEVEL_INVALID: -1,
                        RXCOUNT_INVALID: YAPI.INVALID_UINT,
                        TXCOUNT_INVALID: YAPI.INVALID_UINT,
                        ERRCOUNT_INVALID: YAPI.INVALID_UINT,
                        RXMSGCOUNT_INVALID: YAPI.INVALID_UINT,
                        TXMSGCOUNT_INVALID: YAPI.INVALID_UINT,
                        LASTMSG_INVALID: YAPI.INVALID_STRING,
                        CURRENTJOB_INVALID: YAPI.INVALID_STRING,
                        STARTUPJOB_INVALID: YAPI.INVALID_STRING,
                        COMMAND_INVALID: YAPI.INVALID_STRING
                    });
                }

                _createClass(YSerialPort, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'serialMode':
                                this._serialMode = val;
                                return 1;
                            case 'protocol':
                                this._protocol = val;
                                return 1;
                            case 'voltageLevel':
                                this._voltageLevel = parseInt(val);
                                return 1;
                            case 'rxCount':
                                this._rxCount = parseInt(val);
                                return 1;
                            case 'txCount':
                                this._txCount = parseInt(val);
                                return 1;
                            case 'errCount':
                                this._errCount = parseInt(val);
                                return 1;
                            case 'rxMsgCount':
                                this._rxMsgCount = parseInt(val);
                                return 1;
                            case 'txMsgCount':
                                this._txMsgCount = parseInt(val);
                                return 1;
                            case 'lastMsg':
                                this._lastMsg = val;
                                return 1;
                            case 'currentJob':
                                this._currentJob = val;
                                return 1;
                            case 'startupJob':
                                this._startupJob = val;
                                return 1;
                            case 'command':
                                this._command = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YSerialPort.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_serialMode',
                    value: function get_serialMode() {
                        return _regeneratorRuntime.async(function get_serialMode$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SERIALMODE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._serialMode);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_serialMode',
                    value: function set_serialMode(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_serialMode$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('serialMode', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_protocol',
                    value: function get_protocol() {
                        return _regeneratorRuntime.async(function get_protocol$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PROTOCOL_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._protocol);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_protocol',
                    value: function set_protocol(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_protocol$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('protocol', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_voltageLevel',
                    value: function get_voltageLevel() {
                        return _regeneratorRuntime.async(function get_voltageLevel$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_VOLTAGELEVEL_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._voltageLevel);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_voltageLevel',
                    value: function set_voltageLevel(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_voltageLevel$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('voltageLevel', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_rxCount',
                    value: function get_rxCount() {
                        return _regeneratorRuntime.async(function get_rxCount$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_RXCOUNT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._rxCount);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_txCount',
                    value: function get_txCount() {
                        return _regeneratorRuntime.async(function get_txCount$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_TXCOUNT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._txCount);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_errCount',
                    value: function get_errCount() {
                        return _regeneratorRuntime.async(function get_errCount$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ERRCOUNT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._errCount);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_rxMsgCount',
                    value: function get_rxMsgCount() {
                        return _regeneratorRuntime.async(function get_rxMsgCount$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_RXMSGCOUNT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._rxMsgCount);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_txMsgCount',
                    value: function get_txMsgCount() {
                        return _regeneratorRuntime.async(function get_txMsgCount$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_TXMSGCOUNT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._txMsgCount);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_lastMsg',
                    value: function get_lastMsg() {
                        return _regeneratorRuntime.async(function get_lastMsg$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LASTMSG_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._lastMsg);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_currentJob',
                    value: function get_currentJob() {
                        return _regeneratorRuntime.async(function get_currentJob$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CURRENTJOB_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._currentJob);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_currentJob',
                    value: function set_currentJob(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_currentJob$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('currentJob', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_startupJob',
                    value: function get_startupJob() {
                        return _regeneratorRuntime.async(function get_startupJob$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_STARTUPJOB_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._startupJob);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_startupJob',
                    value: function set_startupJob(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_startupJob$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('startupJob', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_command',
                    value: function get_command() {
                        return _regeneratorRuntime.async(function get_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COMMAND_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._command);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_command',
                    value: function set_command(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('command', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'sendCommand',
                    value: function sendCommand(text) {
                        return _regeneratorRuntime.async(function sendCommand$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_command(text));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'reset',
                    value: function reset() {
                        return _regeneratorRuntime.async(function reset$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._rxptr = 0;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.sendCommand('Z'));

                                case 3:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_RTS',
                    value: function set_RTS(val) {
                        return _regeneratorRuntime.async(function set_RTS$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand('R' + String(Math.round(val))));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_CTS',
                    value: function get_CTS() {
                        var buff, res;
                        return _regeneratorRuntime.async(function get_CTS$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    buff = undefined;
                                    res = undefined;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._download('cts.txt'));

                                case 4:
                                    buff = context$2$0.sent;

                                    if (buff.length == 1) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_IO_ERROR, 'invalid CTS reply', YAPI_IO_ERROR));

                                case 7:
                                    res = buff[0] - 48;
                                    return context$2$0.abrupt('return', res);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'writeByte',
                    value: function writeByte(code) {
                        return _regeneratorRuntime.async(function writeByte$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand('$' + ('00' + code.toString(16)).slice(-2)));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'writeStr',
                    value: function writeStr(text) {
                        var buff, bufflen, idx, ch;
                        return _regeneratorRuntime.async(function writeStr$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    buff = undefined;
                                    bufflen = undefined;
                                    idx = undefined;
                                    ch = undefined;

                                    buff = this._yapi.imm_str2bin(text);
                                    bufflen = buff.length;

                                    if (!(bufflen < 100)) {
                                        context$2$0.next = 14;
                                        break;
                                    }

                                    ch = 0x20;
                                    idx = 0;
                                    while (idx < bufflen && ch != 0) {
                                        ch = buff[idx];
                                        if (ch >= 0x20 && ch < 0x7f) {
                                            idx = idx + 1;
                                        } else {
                                            ch = 0;
                                        }
                                    }

                                    if (!(idx >= bufflen)) {
                                        context$2$0.next = 14;
                                        break;
                                    }

                                    context$2$0.next = 13;
                                    return _regeneratorRuntime.awrap(this.sendCommand('+' + text));

                                case 13:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 14:
                                    context$2$0.next = 16;
                                    return _regeneratorRuntime.awrap(this._upload('txdata', buff));

                                case 16:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 17:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'writeBin',
                    value: function writeBin(buff) {
                        return _regeneratorRuntime.async(function writeBin$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._upload('txdata', buff));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'writeArray',
                    value: function writeArray(byteList) {
                        var buff, bufflen, idx, hexb, res;
                        return _regeneratorRuntime.async(function writeArray$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    buff = undefined;
                                    bufflen = undefined;
                                    idx = undefined;
                                    hexb = undefined;
                                    res = undefined;

                                    bufflen = byteList.length;
                                    buff = new Uint8Array(bufflen);
                                    idx = 0;
                                    while (idx < bufflen) {
                                        hexb = byteList[idx];
                                        buff.set([hexb], idx);
                                        idx = idx + 1;
                                    }
                                    context$2$0.next = 11;
                                    return _regeneratorRuntime.awrap(this._upload('txdata', buff));

                                case 11:
                                    res = context$2$0.sent;
                                    return context$2$0.abrupt('return', res);

                                case 13:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'writeHex',
                    value: function writeHex(hexString) {
                        var buff, bufflen, idx, hexb, res;
                        return _regeneratorRuntime.async(function writeHex$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    buff = undefined;
                                    bufflen = undefined;
                                    idx = undefined;
                                    hexb = undefined;
                                    res = undefined;

                                    bufflen = hexString.length;

                                    if (!(bufflen < 100)) {
                                        context$2$0.next = 10;
                                        break;
                                    }

                                    context$2$0.next = 9;
                                    return _regeneratorRuntime.awrap(this.sendCommand('$' + hexString));

                                case 9:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 10:
                                    bufflen = bufflen >> 1;
                                    buff = new Uint8Array(bufflen);
                                    idx = 0;
                                    while (idx < bufflen) {
                                        hexb = parseInt(hexString.substr(2 * idx, 2), 16);
                                        buff.set([hexb], idx);
                                        idx = idx + 1;
                                    }
                                    context$2$0.next = 16;
                                    return _regeneratorRuntime.awrap(this._upload('txdata', buff));

                                case 16:
                                    res = context$2$0.sent;
                                    return context$2$0.abrupt('return', res);

                                case 18:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'writeLine',
                    value: function writeLine(text) {
                        var buff, bufflen, idx, ch;
                        return _regeneratorRuntime.async(function writeLine$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    buff = undefined;
                                    bufflen = undefined;
                                    idx = undefined;
                                    ch = undefined;

                                    buff = this._yapi.imm_str2bin(text + '\r\n');
                                    bufflen = buff.length - 2;

                                    if (!(bufflen < 100)) {
                                        context$2$0.next = 14;
                                        break;
                                    }

                                    ch = 0x20;
                                    idx = 0;
                                    while (idx < bufflen && ch != 0) {
                                        ch = buff[idx];
                                        if (ch >= 0x20 && ch < 0x7f) {
                                            idx = idx + 1;
                                        } else {
                                            ch = 0;
                                        }
                                    }

                                    if (!(idx >= bufflen)) {
                                        context$2$0.next = 14;
                                        break;
                                    }

                                    context$2$0.next = 13;
                                    return _regeneratorRuntime.awrap(this.sendCommand('!' + text));

                                case 13:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 14:
                                    context$2$0.next = 16;
                                    return _regeneratorRuntime.awrap(this._upload('txdata', buff));

                                case 16:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 17:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'writeMODBUS',
                    value: function writeMODBUS(hexString) {
                        return _regeneratorRuntime.async(function writeMODBUS$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.sendCommand(':' + hexString));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'readByte',
                    value: function readByte() {
                        var buff, bufflen, mult, endpos, res;
                        return _regeneratorRuntime.async(function readByte$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    buff = undefined;
                                    bufflen = undefined;
                                    mult = undefined;
                                    endpos = undefined;
                                    res = undefined;
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this._download('rxdata.bin?pos=' + String(Math.round(this._rxptr)) + '&len=1'));

                                case 7:
                                    buff = context$2$0.sent;

                                    bufflen = buff.length - 1;
                                    endpos = 0;
                                    mult = 1;
                                    while (bufflen > 0 && buff[bufflen] != 64) {
                                        endpos = endpos + mult * (buff[bufflen] - 48);
                                        mult = mult * 10;
                                        bufflen = bufflen - 1;
                                    }
                                    this._rxptr = endpos;

                                    if (!(bufflen == 0)) {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_NO_MORE_DATA);

                                case 15:
                                    res = buff[0];
                                    return context$2$0.abrupt('return', res);

                                case 17:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'readStr',
                    value: function readStr(nChars) {
                        var buff, bufflen, mult, endpos, res;
                        return _regeneratorRuntime.async(function readStr$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    buff = undefined;
                                    bufflen = undefined;
                                    mult = undefined;
                                    endpos = undefined;
                                    res = undefined;

                                    if (nChars > 65535) {
                                        nChars = 65535;
                                    }
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(this._download('rxdata.bin?pos=' + String(Math.round(this._rxptr)) + '&len=' + String(Math.round(nChars))));

                                case 8:
                                    buff = context$2$0.sent;

                                    bufflen = buff.length - 1;
                                    endpos = 0;
                                    mult = 1;
                                    while (bufflen > 0 && buff[bufflen] != 64) {
                                        endpos = endpos + mult * (buff[bufflen] - 48);
                                        mult = mult * 10;
                                        bufflen = bufflen - 1;
                                    }
                                    this._rxptr = endpos;
                                    res = this._yapi.imm_bin2str(buff).substr(0, bufflen);
                                    return context$2$0.abrupt('return', res);

                                case 16:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'readBin',
                    value: function readBin(nChars) {
                        var buff, bufflen, mult, endpos, idx, res;
                        return _regeneratorRuntime.async(function readBin$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    buff = undefined;
                                    bufflen = undefined;
                                    mult = undefined;
                                    endpos = undefined;
                                    idx = undefined;
                                    res = undefined;

                                    if (nChars > 65535) {
                                        nChars = 65535;
                                    }
                                    context$2$0.next = 9;
                                    return _regeneratorRuntime.awrap(this._download('rxdata.bin?pos=' + String(Math.round(this._rxptr)) + '&len=' + String(Math.round(nChars))));

                                case 9:
                                    buff = context$2$0.sent;

                                    bufflen = buff.length - 1;
                                    endpos = 0;
                                    mult = 1;
                                    while (bufflen > 0 && buff[bufflen] != 64) {
                                        endpos = endpos + mult * (buff[bufflen] - 48);
                                        mult = mult * 10;
                                        bufflen = bufflen - 1;
                                    }
                                    this._rxptr = endpos;
                                    res = new Uint8Array(bufflen);
                                    idx = 0;
                                    while (idx < bufflen) {
                                        res.set([buff[idx]], idx);
                                        idx = idx + 1;
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 19:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'readArray',
                    value: function readArray(nChars) {
                        var buff, bufflen, mult, endpos, idx, b, res;
                        return _regeneratorRuntime.async(function readArray$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    buff = undefined;
                                    bufflen = undefined;
                                    mult = undefined;
                                    endpos = undefined;
                                    idx = undefined;
                                    b = undefined;
                                    res = [];

                                    if (nChars > 65535) {
                                        nChars = 65535;
                                    }
                                    context$2$0.next = 10;
                                    return _regeneratorRuntime.awrap(this._download('rxdata.bin?pos=' + String(Math.round(this._rxptr)) + '&len=' + String(Math.round(nChars))));

                                case 10:
                                    buff = context$2$0.sent;

                                    bufflen = buff.length - 1;
                                    endpos = 0;
                                    mult = 1;
                                    while (bufflen > 0 && buff[bufflen] != 64) {
                                        endpos = endpos + mult * (buff[bufflen] - 48);
                                        mult = mult * 10;
                                        bufflen = bufflen - 1;
                                    }
                                    this._rxptr = endpos;
                                    res.length = 0;
                                    idx = 0;
                                    while (idx < bufflen) {
                                        b = buff[idx];
                                        res.push(b);
                                        idx = idx + 1;
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 20:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'readHex',
                    value: function readHex(nBytes) {
                        var buff, bufflen, mult, endpos, ofs, res;
                        return _regeneratorRuntime.async(function readHex$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    buff = undefined;
                                    bufflen = undefined;
                                    mult = undefined;
                                    endpos = undefined;
                                    ofs = undefined;
                                    res = undefined;

                                    if (nBytes > 65535) {
                                        nBytes = 65535;
                                    }
                                    context$2$0.next = 9;
                                    return _regeneratorRuntime.awrap(this._download('rxdata.bin?pos=' + String(Math.round(this._rxptr)) + '&len=' + String(Math.round(nBytes))));

                                case 9:
                                    buff = context$2$0.sent;

                                    bufflen = buff.length - 1;
                                    endpos = 0;
                                    mult = 1;
                                    while (bufflen > 0 && buff[bufflen] != 64) {
                                        endpos = endpos + mult * (buff[bufflen] - 48);
                                        mult = mult * 10;
                                        bufflen = bufflen - 1;
                                    }
                                    this._rxptr = endpos;
                                    res = '';
                                    ofs = 0;
                                    while (ofs + 3 < bufflen) {
                                        res = res + '' + ('00' + buff[ofs].toString(16)).slice(-2) + '' + ('00' + buff[ofs + 1].toString(16)).slice(-2) + '' + ('00' + buff[ofs + 2].toString(16)).slice(-2) + '' + ('00' + buff[ofs + 3].toString(16)).slice(-2);
                                        ofs = ofs + 4;
                                    }
                                    while (ofs < bufflen) {
                                        res = res + '' + ('00' + buff[ofs].toString(16)).slice(-2);
                                        ofs = ofs + 1;
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 20:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'readLine',
                    value: function readLine() {
                        var url, msgbin, msgarr, msglen, res;
                        return _regeneratorRuntime.async(function readLine$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    url = undefined;
                                    msgbin = undefined;
                                    msgarr = [];
                                    msglen = undefined;
                                    res = undefined;

                                    url = 'rxmsg.json?pos=' + String(Math.round(this._rxptr)) + '&len=1&maxw=1';
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(this._download(url));

                                case 8:
                                    msgbin = context$2$0.sent;

                                    msgarr = this.imm_json_get_array(msgbin);
                                    msglen = msgarr.length;

                                    if (!(msglen == 0)) {
                                        context$2$0.next = 13;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', '');

                                case 13:
                                    msglen = msglen - 1;
                                    this._rxptr = this._yapi.imm_atoi(msgarr[msglen]);

                                    if (!(msglen == 0)) {
                                        context$2$0.next = 17;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', '');

                                case 17:
                                    res = this.imm_json_get_string(this._yapi.imm_str2bin(msgarr[0]));
                                    return context$2$0.abrupt('return', res);

                                case 19:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'readMessages',
                    value: function readMessages(pattern, maxWait) {
                        var url, msgbin, msgarr, msglen, res, idx;
                        return _regeneratorRuntime.async(function readMessages$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    url = undefined;
                                    msgbin = undefined;
                                    msgarr = [];
                                    msglen = undefined;
                                    res = [];
                                    idx = undefined;

                                    url = 'rxmsg.json?pos=' + String(Math.round(this._rxptr)) + '&maxw=' + String(Math.round(maxWait)) + '&pat=' + pattern;
                                    context$2$0.next = 9;
                                    return _regeneratorRuntime.awrap(this._download(url));

                                case 9:
                                    msgbin = context$2$0.sent;

                                    msgarr = this.imm_json_get_array(msgbin);
                                    msglen = msgarr.length;

                                    if (!(msglen == 0)) {
                                        context$2$0.next = 14;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 14:
                                    msglen = msglen - 1;
                                    this._rxptr = this._yapi.imm_atoi(msgarr[msglen]);
                                    idx = 0;
                                    while (idx < msglen) {
                                        res.push(this.imm_json_get_string(this._yapi.imm_str2bin(msgarr[idx])));
                                        idx = idx + 1;
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 19:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'read_seek',
                    value: function read_seek(absPos) {
                        return _regeneratorRuntime.async(function read_seek$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._rxptr = absPos;
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 2:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'read_tell',
                    value: function read_tell() {
                        return _regeneratorRuntime.async(function read_tell$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._rxptr);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'read_avail',
                    value: function read_avail() {
                        var buff, bufflen, res;
                        return _regeneratorRuntime.async(function read_avail$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    buff = undefined;
                                    bufflen = undefined;
                                    res = undefined;
                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this._download('rxcnt.bin?pos=' + String(Math.round(this._rxptr))));

                                case 5:
                                    buff = context$2$0.sent;

                                    bufflen = buff.length - 1;
                                    while (bufflen > 0 && buff[bufflen] != 64) {
                                        bufflen = bufflen - 1;
                                    }
                                    res = this._yapi.imm_atoi(this._yapi.imm_bin2str(buff).substr(0, bufflen));
                                    return context$2$0.abrupt('return', res);

                                case 10:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'queryLine',
                    value: function queryLine(query, maxWait) {
                        var url, msgbin, msgarr, msglen, res;
                        return _regeneratorRuntime.async(function queryLine$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    url = undefined;
                                    msgbin = undefined;
                                    msgarr = [];
                                    msglen = undefined;
                                    res = undefined;

                                    url = 'rxmsg.json?len=1&maxw=' + String(Math.round(maxWait)) + '&cmd=!' + query;
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(this._download(url));

                                case 8:
                                    msgbin = context$2$0.sent;

                                    msgarr = this.imm_json_get_array(msgbin);
                                    msglen = msgarr.length;

                                    if (!(msglen == 0)) {
                                        context$2$0.next = 13;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', '');

                                case 13:
                                    msglen = msglen - 1;
                                    this._rxptr = this._yapi.imm_atoi(msgarr[msglen]);

                                    if (!(msglen == 0)) {
                                        context$2$0.next = 17;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', '');

                                case 17:
                                    res = this.imm_json_get_string(this._yapi.imm_str2bin(msgarr[0]));
                                    return context$2$0.abrupt('return', res);

                                case 19:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'queryMODBUS',
                    value: function queryMODBUS(slaveNo, pduBytes) {
                        var funCode, nib, i, cmd, url, pat, msgs, reps, rep, res, replen, hexb;
                        return _regeneratorRuntime.async(function queryMODBUS$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    funCode = undefined;
                                    nib = undefined;
                                    i = undefined;
                                    cmd = undefined;
                                    url = undefined;
                                    pat = undefined;
                                    msgs = undefined;
                                    reps = [];
                                    rep = undefined;
                                    res = [];
                                    replen = undefined;
                                    hexb = undefined;

                                    funCode = pduBytes[0];
                                    nib = funCode >> 4;
                                    pat = ('00' + slaveNo.toString(16)).slice(-2) + '[' + nib.toString(16) + '' + (nib + 8).toString(16) + ']' + (funCode & 15).toString(16) + '.*';
                                    cmd = ('00' + slaveNo.toString(16)).slice(-2) + '' + ('00' + funCode.toString(16)).slice(-2);
                                    i = 1;
                                    while (i < pduBytes.length) {
                                        cmd = cmd + '' + ('00' + (pduBytes[i] & 0xff).toString(16)).slice(-2);
                                        i = i + 1;
                                    }

                                    url = 'rxmsg.json?cmd=:' + cmd + '&pat=:' + pat;
                                    context$2$0.next = 21;
                                    return _regeneratorRuntime.awrap(this._download(url));

                                case 21:
                                    msgs = context$2$0.sent;

                                    reps = this.imm_json_get_array(msgs);

                                    if (reps.length > 1) {
                                        context$2$0.next = 25;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_IO_ERROR, 'no reply from slave', res));

                                case 25:
                                    if (!(reps.length > 1)) {
                                        context$2$0.next = 40;
                                        break;
                                    }

                                    rep = this.imm_json_get_string(this._yapi.imm_str2bin(reps[0]));
                                    replen = rep.length - 3 >> 1;
                                    i = 0;
                                    while (i < replen) {
                                        hexb = parseInt(rep.substr(2 * i + 3, 2), 16);
                                        res.push(hexb);
                                        i = i + 1;
                                    }

                                    if (!(res[0] != funCode)) {
                                        context$2$0.next = 40;
                                        break;
                                    }

                                    i = res[1];

                                    if (i > 1) {
                                        context$2$0.next = 34;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_NOT_SUPPORTED, 'MODBUS error: unsupported function code', res));

                                case 34:
                                    if (i > 2) {
                                        context$2$0.next = 36;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'MODBUS error: illegal data address', res));

                                case 36:
                                    if (i > 3) {
                                        context$2$0.next = 38;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'MODBUS error: illegal data value', res));

                                case 38:
                                    if (i > 4) {
                                        context$2$0.next = 40;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'MODBUS error: failed to execute function', res));

                                case 40:
                                    return context$2$0.abrupt('return', res);

                                case 41:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'modbusReadBits',
                    value: function modbusReadBits(slaveNo, pduAddr, nBits) {
                        var pdu, reply, res, bitpos, idx, val, mask;
                        return _regeneratorRuntime.async(function modbusReadBits$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    pdu = [];
                                    reply = [];
                                    res = [];
                                    bitpos = undefined;
                                    idx = undefined;
                                    val = undefined;
                                    mask = undefined;

                                    pdu.push(0x01);
                                    pdu.push(pduAddr >> 8);
                                    pdu.push(pduAddr & 0xff);
                                    pdu.push(nBits >> 8);
                                    pdu.push(nBits & 0xff);
                                    context$2$0.next = 14;
                                    return _regeneratorRuntime.awrap(this.queryMODBUS(slaveNo, pdu));

                                case 14:
                                    reply = context$2$0.sent;

                                    if (!(reply.length == 0)) {
                                        context$2$0.next = 17;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 17:
                                    if (!(reply[0] != pdu[0])) {
                                        context$2$0.next = 19;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 19:
                                    bitpos = 0;
                                    idx = 2;
                                    val = reply[idx];
                                    mask = 1;
                                    while (bitpos < nBits) {
                                        if ((val & mask) == 0) {
                                            res.push(0);
                                        } else {
                                            res.push(1);
                                        }
                                        bitpos = bitpos + 1;
                                        if (mask == 0x80) {
                                            idx = idx + 1;
                                            val = reply[idx];
                                            mask = 1;
                                        } else {
                                            mask = mask << 1;
                                        }
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 25:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'modbusReadInputBits',
                    value: function modbusReadInputBits(slaveNo, pduAddr, nBits) {
                        var pdu, reply, res, bitpos, idx, val, mask;
                        return _regeneratorRuntime.async(function modbusReadInputBits$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    pdu = [];
                                    reply = [];
                                    res = [];
                                    bitpos = undefined;
                                    idx = undefined;
                                    val = undefined;
                                    mask = undefined;

                                    pdu.push(0x02);
                                    pdu.push(pduAddr >> 8);
                                    pdu.push(pduAddr & 0xff);
                                    pdu.push(nBits >> 8);
                                    pdu.push(nBits & 0xff);
                                    context$2$0.next = 14;
                                    return _regeneratorRuntime.awrap(this.queryMODBUS(slaveNo, pdu));

                                case 14:
                                    reply = context$2$0.sent;

                                    if (!(reply.length == 0)) {
                                        context$2$0.next = 17;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 17:
                                    if (!(reply[0] != pdu[0])) {
                                        context$2$0.next = 19;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 19:
                                    bitpos = 0;
                                    idx = 2;
                                    val = reply[idx];
                                    mask = 1;
                                    while (bitpos < nBits) {
                                        if ((val & mask) == 0) {
                                            res.push(0);
                                        } else {
                                            res.push(1);
                                        }
                                        bitpos = bitpos + 1;
                                        if (mask == 0x80) {
                                            idx = idx + 1;
                                            val = reply[idx];
                                            mask = 1;
                                        } else {
                                            mask = mask << 1;
                                        }
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 25:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'modbusReadRegisters',
                    value: function modbusReadRegisters(slaveNo, pduAddr, nWords) {
                        var pdu, reply, res, regpos, idx, val;
                        return _regeneratorRuntime.async(function modbusReadRegisters$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    pdu = [];
                                    reply = [];
                                    res = [];
                                    regpos = undefined;
                                    idx = undefined;
                                    val = undefined;

                                    pdu.push(0x03);
                                    pdu.push(pduAddr >> 8);
                                    pdu.push(pduAddr & 0xff);
                                    pdu.push(nWords >> 8);
                                    pdu.push(nWords & 0xff);
                                    context$2$0.next = 13;
                                    return _regeneratorRuntime.awrap(this.queryMODBUS(slaveNo, pdu));

                                case 13:
                                    reply = context$2$0.sent;

                                    if (!(reply.length == 0)) {
                                        context$2$0.next = 16;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 16:
                                    if (!(reply[0] != pdu[0])) {
                                        context$2$0.next = 18;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 18:
                                    regpos = 0;
                                    idx = 2;
                                    while (regpos < nWords) {
                                        val = reply[idx] << 8;
                                        idx = idx + 1;
                                        val = val + reply[idx];
                                        idx = idx + 1;
                                        res.push(val);
                                        regpos = regpos + 1;
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 22:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'modbusReadInputRegisters',
                    value: function modbusReadInputRegisters(slaveNo, pduAddr, nWords) {
                        var pdu, reply, res, regpos, idx, val;
                        return _regeneratorRuntime.async(function modbusReadInputRegisters$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    pdu = [];
                                    reply = [];
                                    res = [];
                                    regpos = undefined;
                                    idx = undefined;
                                    val = undefined;

                                    pdu.push(0x04);
                                    pdu.push(pduAddr >> 8);
                                    pdu.push(pduAddr & 0xff);
                                    pdu.push(nWords >> 8);
                                    pdu.push(nWords & 0xff);
                                    context$2$0.next = 13;
                                    return _regeneratorRuntime.awrap(this.queryMODBUS(slaveNo, pdu));

                                case 13:
                                    reply = context$2$0.sent;

                                    if (!(reply.length == 0)) {
                                        context$2$0.next = 16;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 16:
                                    if (!(reply[0] != pdu[0])) {
                                        context$2$0.next = 18;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 18:
                                    regpos = 0;
                                    idx = 2;
                                    while (regpos < nWords) {
                                        val = reply[idx] << 8;
                                        idx = idx + 1;
                                        val = val + reply[idx];
                                        idx = idx + 1;
                                        res.push(val);
                                        regpos = regpos + 1;
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 22:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'modbusWriteBit',
                    value: function modbusWriteBit(slaveNo, pduAddr, value) {
                        var pdu, reply, res;
                        return _regeneratorRuntime.async(function modbusWriteBit$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    pdu = [];
                                    reply = [];
                                    res = undefined;

                                    res = 0;
                                    if (value != 0) {
                                        value = 0xff;
                                    }
                                    pdu.push(0x05);
                                    pdu.push(pduAddr >> 8);
                                    pdu.push(pduAddr & 0xff);
                                    pdu.push(value);
                                    pdu.push(0x00);
                                    context$2$0.next = 12;
                                    return _regeneratorRuntime.awrap(this.queryMODBUS(slaveNo, pdu));

                                case 12:
                                    reply = context$2$0.sent;

                                    if (!(reply.length == 0)) {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 15:
                                    if (!(reply[0] != pdu[0])) {
                                        context$2$0.next = 17;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 17:
                                    res = 1;
                                    return context$2$0.abrupt('return', res);

                                case 19:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'modbusWriteBits',
                    value: function modbusWriteBits(slaveNo, pduAddr, bits) {
                        var nBits, nBytes, bitpos, val, mask, pdu, reply, res;
                        return _regeneratorRuntime.async(function modbusWriteBits$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    nBits = undefined;
                                    nBytes = undefined;
                                    bitpos = undefined;
                                    val = undefined;
                                    mask = undefined;
                                    pdu = [];
                                    reply = [];
                                    res = undefined;

                                    res = 0;
                                    nBits = bits.length;
                                    nBytes = nBits + 7 >> 3;
                                    pdu.push(0x0f);
                                    pdu.push(pduAddr >> 8);
                                    pdu.push(pduAddr & 0xff);
                                    pdu.push(nBits >> 8);
                                    pdu.push(nBits & 0xff);
                                    pdu.push(nBytes);
                                    bitpos = 0;
                                    val = 0;
                                    mask = 1;
                                    while (bitpos < nBits) {
                                        if (bits[bitpos] != 0) {
                                            val = val | mask;
                                        }
                                        bitpos = bitpos + 1;
                                        if (mask == 0x80) {
                                            pdu.push(val);
                                            val = 0;
                                            mask = 1;
                                        } else {
                                            mask = mask << 1;
                                        }
                                    }
                                    if (mask != 1) {
                                        pdu.push(val);
                                    }
                                    context$2$0.next = 24;
                                    return _regeneratorRuntime.awrap(this.queryMODBUS(slaveNo, pdu));

                                case 24:
                                    reply = context$2$0.sent;

                                    if (!(reply.length == 0)) {
                                        context$2$0.next = 27;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 27:
                                    if (!(reply[0] != pdu[0])) {
                                        context$2$0.next = 29;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 29:
                                    res = reply[3] << 8;
                                    res = res + reply[4];
                                    return context$2$0.abrupt('return', res);

                                case 32:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'modbusWriteRegister',
                    value: function modbusWriteRegister(slaveNo, pduAddr, value) {
                        var pdu, reply, res;
                        return _regeneratorRuntime.async(function modbusWriteRegister$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    pdu = [];
                                    reply = [];
                                    res = undefined;

                                    res = 0;
                                    if (value != 0) {
                                        value = 0xff;
                                    }
                                    pdu.push(0x06);
                                    pdu.push(pduAddr >> 8);
                                    pdu.push(pduAddr & 0xff);
                                    pdu.push(value >> 8);
                                    pdu.push(value & 0xff);
                                    context$2$0.next = 12;
                                    return _regeneratorRuntime.awrap(this.queryMODBUS(slaveNo, pdu));

                                case 12:
                                    reply = context$2$0.sent;

                                    if (!(reply.length == 0)) {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 15:
                                    if (!(reply[0] != pdu[0])) {
                                        context$2$0.next = 17;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 17:
                                    res = 1;
                                    return context$2$0.abrupt('return', res);

                                case 19:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'modbusWriteRegisters',
                    value: function modbusWriteRegisters(slaveNo, pduAddr, values) {
                        var nWords, nBytes, regpos, val, pdu, reply, res;
                        return _regeneratorRuntime.async(function modbusWriteRegisters$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    nWords = undefined;
                                    nBytes = undefined;
                                    regpos = undefined;
                                    val = undefined;
                                    pdu = [];
                                    reply = [];
                                    res = undefined;

                                    res = 0;
                                    nWords = values.length;
                                    nBytes = 2 * nWords;
                                    pdu.push(0x10);
                                    pdu.push(pduAddr >> 8);
                                    pdu.push(pduAddr & 0xff);
                                    pdu.push(nWords >> 8);
                                    pdu.push(nWords & 0xff);
                                    pdu.push(nBytes);
                                    regpos = 0;
                                    while (regpos < nWords) {
                                        val = values[regpos];
                                        pdu.push(val >> 8);
                                        pdu.push(val & 0xff);
                                        regpos = regpos + 1;
                                    }
                                    context$2$0.next = 20;
                                    return _regeneratorRuntime.awrap(this.queryMODBUS(slaveNo, pdu));

                                case 20:
                                    reply = context$2$0.sent;

                                    if (!(reply.length == 0)) {
                                        context$2$0.next = 23;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 23:
                                    if (!(reply[0] != pdu[0])) {
                                        context$2$0.next = 25;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 25:
                                    res = reply[3] << 8;
                                    res = res + reply[4];
                                    return context$2$0.abrupt('return', res);

                                case 28:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'modbusWriteAndReadRegisters',
                    value: function modbusWriteAndReadRegisters(slaveNo, pduWriteAddr, values, pduReadAddr, nReadWords) {
                        var nWriteWords, nBytes, regpos, val, idx, pdu, reply, res;
                        return _regeneratorRuntime.async(function modbusWriteAndReadRegisters$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    nWriteWords = undefined;
                                    nBytes = undefined;
                                    regpos = undefined;
                                    val = undefined;
                                    idx = undefined;
                                    pdu = [];
                                    reply = [];
                                    res = [];

                                    nWriteWords = values.length;
                                    nBytes = 2 * nWriteWords;
                                    pdu.push(0x17);
                                    pdu.push(pduReadAddr >> 8);
                                    pdu.push(pduReadAddr & 0xff);
                                    pdu.push(nReadWords >> 8);
                                    pdu.push(nReadWords & 0xff);
                                    pdu.push(pduWriteAddr >> 8);
                                    pdu.push(pduWriteAddr & 0xff);
                                    pdu.push(nWriteWords >> 8);
                                    pdu.push(nWriteWords & 0xff);
                                    pdu.push(nBytes);
                                    regpos = 0;
                                    while (regpos < nWriteWords) {
                                        val = values[regpos];
                                        pdu.push(val >> 8);
                                        pdu.push(val & 0xff);
                                        regpos = regpos + 1;
                                    }
                                    context$2$0.next = 24;
                                    return _regeneratorRuntime.awrap(this.queryMODBUS(slaveNo, pdu));

                                case 24:
                                    reply = context$2$0.sent;

                                    if (!(reply.length == 0)) {
                                        context$2$0.next = 27;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 27:
                                    if (!(reply[0] != pdu[0])) {
                                        context$2$0.next = 29;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', res);

                                case 29:
                                    regpos = 0;
                                    idx = 2;
                                    while (regpos < nReadWords) {
                                        val = reply[idx] << 8;
                                        idx = idx + 1;
                                        val = val + reply[idx];
                                        idx = idx + 1;
                                        res.push(val);
                                        regpos = regpos + 1;
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 33:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'uploadJob',
                    value: function uploadJob(jobfile, jsonDef) {
                        return _regeneratorRuntime.async(function uploadJob$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._upload(jobfile, this._yapi.imm_str2bin(jsonDef)));

                                case 2:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'selectJob',
                    value: function selectJob(jobfile) {
                        return _regeneratorRuntime.async(function selectJob$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_currentJob(jobfile));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextSerialPort',
                    value: function nextSerialPort() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YSerialPort.FindSerialPortInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindSerialPort',
                    value: function FindSerialPort(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('SerialPort', func);
                        if (obj == null) {
                            obj = new YSerialPort(YAPI, func);
                            YFunction._AddToCache('SerialPort', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindSerialPortInContext',
                    value: function FindSerialPortInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'SerialPort', func);
                        if (obj == null) {
                            obj = new YSerialPort(yctx, func);
                            YFunction._AddToCache('SerialPort', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstSerialPort',
                    value: function FirstSerialPort() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('SerialPort');
                        if (next_hwid == null) return null;
                        return YSerialPort.FindSerialPort(next_hwid);
                    }
                }, {
                    key: 'FirstSerialPortInContext',
                    value: function FirstSerialPortInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('SerialPort');
                        if (next_hwid == null) return null;
                        return YSerialPort.FindSerialPortInContext(yctx, next_hwid);
                    }
                }]);

                return YSerialPort;
            })(YFunction);

            _export('YSerialPort', YSerialPort);
        }
    };
});
System.register('yoctolib-es/yocto_servo.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_ENABLED_FALSE, Y_ENABLED_TRUE, Y_ENABLED_INVALID, Y_ENABLEDATPOWERON_FALSE, Y_ENABLEDATPOWERON_TRUE, Y_ENABLEDATPOWERON_INVALID, Y_POSITION_INVALID, Y_RANGE_INVALID, Y_NEUTRAL_INVALID, Y_MOVE_INVALID, Y_POSITIONATPOWERON_INVALID, YServo;

    function yFindServo(func) {
        return YServo.FindServo(func);
    }

    function yFirstServo() {
        return YServo.FirstServo();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindServo', yFindServo);

            _export('yFirstServo', yFirstServo);

            Y_ENABLED_FALSE = 0;

            _export('Y_ENABLED_FALSE', Y_ENABLED_FALSE);

            Y_ENABLED_TRUE = 1;

            _export('Y_ENABLED_TRUE', Y_ENABLED_TRUE);

            Y_ENABLED_INVALID = -1;

            _export('Y_ENABLED_INVALID', Y_ENABLED_INVALID);

            Y_ENABLEDATPOWERON_FALSE = 0;

            _export('Y_ENABLEDATPOWERON_FALSE', Y_ENABLEDATPOWERON_FALSE);

            Y_ENABLEDATPOWERON_TRUE = 1;

            _export('Y_ENABLEDATPOWERON_TRUE', Y_ENABLEDATPOWERON_TRUE);

            Y_ENABLEDATPOWERON_INVALID = -1;

            _export('Y_ENABLEDATPOWERON_INVALID', Y_ENABLEDATPOWERON_INVALID);

            Y_POSITION_INVALID = YAPI.INVALID_INT;

            _export('Y_POSITION_INVALID', Y_POSITION_INVALID);

            Y_RANGE_INVALID = YAPI.INVALID_UINT;

            _export('Y_RANGE_INVALID', Y_RANGE_INVALID);

            Y_NEUTRAL_INVALID = YAPI.INVALID_UINT;

            _export('Y_NEUTRAL_INVALID', Y_NEUTRAL_INVALID);

            Y_MOVE_INVALID = null;

            _export('Y_MOVE_INVALID', Y_MOVE_INVALID);

            Y_POSITIONATPOWERON_INVALID = YAPI.INVALID_INT;

            _export('Y_POSITIONATPOWERON_INVALID', Y_POSITIONATPOWERON_INVALID);

            YServo = (function (_YFunction) {
                _inherits(YServo, _YFunction);

                function YServo(obj_yapi, str_func) {
                    _classCallCheck(this, YServo);

                    _get(Object.getPrototypeOf(YServo.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Servo';

                    this._position = Y_POSITION_INVALID;

                    this._enabled = Y_ENABLED_INVALID;

                    this._range = Y_RANGE_INVALID;

                    this._neutral = Y_NEUTRAL_INVALID;

                    this._move = Y_MOVE_INVALID;

                    this._positionAtPowerOn = Y_POSITIONATPOWERON_INVALID;

                    this._enabledAtPowerOn = Y_ENABLEDATPOWERON_INVALID;
                    this.imm_setConst({
                        POSITION_INVALID: YAPI.INVALID_INT,
                        ENABLED_FALSE: 0,
                        ENABLED_TRUE: 1,
                        ENABLED_INVALID: -1,
                        RANGE_INVALID: YAPI.INVALID_UINT,
                        NEUTRAL_INVALID: YAPI.INVALID_UINT,
                        POSITIONATPOWERON_INVALID: YAPI.INVALID_INT,
                        ENABLEDATPOWERON_FALSE: 0,
                        ENABLEDATPOWERON_TRUE: 1,
                        ENABLEDATPOWERON_INVALID: -1
                    });
                }

                _createClass(YServo, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'position':
                                this._position = parseInt(val);
                                return 1;
                            case 'enabled':
                                this._enabled = parseInt(val);
                                return 1;
                            case 'range':
                                this._range = parseInt(val);
                                return 1;
                            case 'neutral':
                                this._neutral = parseInt(val);
                                return 1;
                            case 'move':
                                this._move = val;
                                return 1;
                            case 'positionAtPowerOn':
                                this._positionAtPowerOn = parseInt(val);
                                return 1;
                            case 'enabledAtPowerOn':
                                this._enabledAtPowerOn = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YServo.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_position',
                    value: function get_position() {
                        return _regeneratorRuntime.async(function get_position$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_POSITION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._position);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_position',
                    value: function set_position(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_position$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('position', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_enabled',
                    value: function get_enabled() {
                        return _regeneratorRuntime.async(function get_enabled$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ENABLED_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._enabled);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_enabled',
                    value: function set_enabled(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_enabled$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('enabled', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_range',
                    value: function get_range() {
                        return _regeneratorRuntime.async(function get_range$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_RANGE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._range);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_range',
                    value: function set_range(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_range$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('range', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_neutral',
                    value: function get_neutral() {
                        return _regeneratorRuntime.async(function get_neutral$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_NEUTRAL_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._neutral);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_neutral',
                    value: function set_neutral(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_neutral$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('neutral', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_move',
                    value: function get_move() {
                        return _regeneratorRuntime.async(function get_move$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MOVE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._move);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_move',
                    value: function set_move(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_move$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval.target) + ':' + String(newval.ms);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('move', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'move',
                    value: function move(target, ms_duration) {
                        var rest_val;
                        return _regeneratorRuntime.async(function move$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(target) + ':' + String(ms_duration);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('move', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_positionAtPowerOn',
                    value: function get_positionAtPowerOn() {
                        return _regeneratorRuntime.async(function get_positionAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_POSITIONATPOWERON_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._positionAtPowerOn);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_positionAtPowerOn',
                    value: function set_positionAtPowerOn(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_positionAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('positionAtPowerOn', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_enabledAtPowerOn',
                    value: function get_enabledAtPowerOn() {
                        return _regeneratorRuntime.async(function get_enabledAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ENABLEDATPOWERON_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._enabledAtPowerOn);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_enabledAtPowerOn',
                    value: function set_enabledAtPowerOn(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_enabledAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('enabledAtPowerOn', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextServo',
                    value: function nextServo() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YServo.FindServoInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindServo',
                    value: function FindServo(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Servo', func);
                        if (obj == null) {
                            obj = new YServo(YAPI, func);
                            YFunction._AddToCache('Servo', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindServoInContext',
                    value: function FindServoInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Servo', func);
                        if (obj == null) {
                            obj = new YServo(yctx, func);
                            YFunction._AddToCache('Servo', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstServo',
                    value: function FirstServo() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Servo');
                        if (next_hwid == null) return null;
                        return YServo.FindServo(next_hwid);
                    }
                }, {
                    key: 'FirstServoInContext',
                    value: function FirstServoInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Servo');
                        if (next_hwid == null) return null;
                        return YServo.FindServoInContext(yctx, next_hwid);
                    }
                }]);

                return YServo;
            })(YFunction);

            _export('YServo', YServo);
        }
    };
});
System.register('yoctolib-es/yocto_temperature.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_SENSORTYPE_DIGITAL, Y_SENSORTYPE_TYPE_K, Y_SENSORTYPE_TYPE_E, Y_SENSORTYPE_TYPE_J, Y_SENSORTYPE_TYPE_N, Y_SENSORTYPE_TYPE_R, Y_SENSORTYPE_TYPE_S, Y_SENSORTYPE_TYPE_T, Y_SENSORTYPE_PT100_4WIRES, Y_SENSORTYPE_PT100_3WIRES, Y_SENSORTYPE_PT100_2WIRES, Y_SENSORTYPE_RES_OHM, Y_SENSORTYPE_RES_NTC, Y_SENSORTYPE_RES_LINEAR, Y_SENSORTYPE_INVALID, Y_COMMAND_INVALID, YTemperature;

    function yFindTemperature(func) {
        return YTemperature.FindTemperature(func);
    }

    function yFirstTemperature() {
        return YTemperature.FirstTemperature();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindTemperature', yFindTemperature);

            _export('yFirstTemperature', yFirstTemperature);

            Y_SENSORTYPE_DIGITAL = 0;

            _export('Y_SENSORTYPE_DIGITAL', Y_SENSORTYPE_DIGITAL);

            Y_SENSORTYPE_TYPE_K = 1;

            _export('Y_SENSORTYPE_TYPE_K', Y_SENSORTYPE_TYPE_K);

            Y_SENSORTYPE_TYPE_E = 2;

            _export('Y_SENSORTYPE_TYPE_E', Y_SENSORTYPE_TYPE_E);

            Y_SENSORTYPE_TYPE_J = 3;

            _export('Y_SENSORTYPE_TYPE_J', Y_SENSORTYPE_TYPE_J);

            Y_SENSORTYPE_TYPE_N = 4;

            _export('Y_SENSORTYPE_TYPE_N', Y_SENSORTYPE_TYPE_N);

            Y_SENSORTYPE_TYPE_R = 5;

            _export('Y_SENSORTYPE_TYPE_R', Y_SENSORTYPE_TYPE_R);

            Y_SENSORTYPE_TYPE_S = 6;

            _export('Y_SENSORTYPE_TYPE_S', Y_SENSORTYPE_TYPE_S);

            Y_SENSORTYPE_TYPE_T = 7;

            _export('Y_SENSORTYPE_TYPE_T', Y_SENSORTYPE_TYPE_T);

            Y_SENSORTYPE_PT100_4WIRES = 8;

            _export('Y_SENSORTYPE_PT100_4WIRES', Y_SENSORTYPE_PT100_4WIRES);

            Y_SENSORTYPE_PT100_3WIRES = 9;

            _export('Y_SENSORTYPE_PT100_3WIRES', Y_SENSORTYPE_PT100_3WIRES);

            Y_SENSORTYPE_PT100_2WIRES = 10;

            _export('Y_SENSORTYPE_PT100_2WIRES', Y_SENSORTYPE_PT100_2WIRES);

            Y_SENSORTYPE_RES_OHM = 11;

            _export('Y_SENSORTYPE_RES_OHM', Y_SENSORTYPE_RES_OHM);

            Y_SENSORTYPE_RES_NTC = 12;

            _export('Y_SENSORTYPE_RES_NTC', Y_SENSORTYPE_RES_NTC);

            Y_SENSORTYPE_RES_LINEAR = 13;

            _export('Y_SENSORTYPE_RES_LINEAR', Y_SENSORTYPE_RES_LINEAR);

            Y_SENSORTYPE_INVALID = -1;

            _export('Y_SENSORTYPE_INVALID', Y_SENSORTYPE_INVALID);

            Y_COMMAND_INVALID = YAPI.INVALID_STRING;

            _export('Y_COMMAND_INVALID', Y_COMMAND_INVALID);

            YTemperature = (function (_YSensor) {
                _inherits(YTemperature, _YSensor);

                function YTemperature(obj_yapi, str_func) {
                    _classCallCheck(this, YTemperature);

                    _get(Object.getPrototypeOf(YTemperature.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Temperature';

                    this._sensorType = Y_SENSORTYPE_INVALID;

                    this._command = Y_COMMAND_INVALID;
                    this.imm_setConst({
                        SENSORTYPE_DIGITAL: 0,
                        SENSORTYPE_TYPE_K: 1,
                        SENSORTYPE_TYPE_E: 2,
                        SENSORTYPE_TYPE_J: 3,
                        SENSORTYPE_TYPE_N: 4,
                        SENSORTYPE_TYPE_R: 5,
                        SENSORTYPE_TYPE_S: 6,
                        SENSORTYPE_TYPE_T: 7,
                        SENSORTYPE_PT100_4WIRES: 8,
                        SENSORTYPE_PT100_3WIRES: 9,
                        SENSORTYPE_PT100_2WIRES: 10,
                        SENSORTYPE_RES_OHM: 11,
                        SENSORTYPE_RES_NTC: 12,
                        SENSORTYPE_RES_LINEAR: 13,
                        SENSORTYPE_INVALID: -1,
                        COMMAND_INVALID: YAPI.INVALID_STRING
                    });
                }

                _createClass(YTemperature, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'sensorType':
                                this._sensorType = parseInt(val);
                                return 1;
                            case 'command':
                                this._command = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YTemperature.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'set_unit',
                    value: function set_unit(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_unit$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('unit', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_sensorType',
                    value: function get_sensorType() {
                        return _regeneratorRuntime.async(function get_sensorType$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SENSORTYPE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._sensorType);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_sensorType',
                    value: function set_sensorType(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_sensorType$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('sensorType', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_command',
                    value: function get_command() {
                        return _regeneratorRuntime.async(function get_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COMMAND_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._command);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_command',
                    value: function set_command(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_command$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('command', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_ntcParameters',
                    value: function set_ntcParameters(res25, beta) {
                        var t0, t1, res100, tempValues, resValues;
                        return _regeneratorRuntime.async(function set_ntcParameters$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    t0 = undefined;
                                    t1 = undefined;
                                    res100 = undefined;
                                    tempValues = [];
                                    resValues = [];

                                    t0 = 25.0 + 275.15;
                                    t1 = 100.0 + 275.15;
                                    res100 = res25 * Math.exp(beta * (1.0 / t1 - 1.0 / t0));
                                    tempValues.length = 0;
                                    resValues.length = 0;
                                    tempValues.push(25.0);
                                    resValues.push(res25);
                                    tempValues.push(100.0);
                                    resValues.push(res100);
                                    context$2$0.next = 16;
                                    return _regeneratorRuntime.awrap(this.set_thermistorResponseTable(tempValues, resValues));

                                case 16:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 17:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_thermistorResponseTable',
                    value: function set_thermistorResponseTable(tempValues, resValues) {
                        var siz, res, idx, found, prev, curr, currTemp, idxres;
                        return _regeneratorRuntime.async(function set_thermistorResponseTable$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    siz = undefined;
                                    res = undefined;
                                    idx = undefined;
                                    found = undefined;
                                    prev = undefined;
                                    curr = undefined;
                                    currTemp = undefined;
                                    idxres = undefined;

                                    siz = tempValues.length;

                                    if (siz >= 2) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'thermistor response table must have at least two points', YAPI_INVALID_ARGUMENT));

                                case 11:
                                    if (siz == resValues.length) {
                                        context$2$0.next = 13;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'table sizes mismatch', YAPI_INVALID_ARGUMENT));

                                case 13:
                                    context$2$0.next = 15;
                                    return _regeneratorRuntime.awrap(this.set_command('Z'));

                                case 15:
                                    res = context$2$0.sent;

                                    if (res == YAPI_SUCCESS) {
                                        context$2$0.next = 18;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_IO_ERROR, 'unable to reset thermistor parameters', YAPI_IO_ERROR));

                                case 18:
                                    found = 1;
                                    prev = 0.0;

                                case 20:
                                    if (!(found > 0)) {
                                        context$2$0.next = 35;
                                        break;
                                    }

                                    found = 0;
                                    curr = 99999999.0;
                                    currTemp = -999999.0;
                                    idx = 0;
                                    while (idx < siz) {
                                        idxres = resValues[idx];
                                        if (idxres > prev && idxres < curr) {
                                            curr = idxres;
                                            currTemp = tempValues[idx];
                                            found = 1;
                                        }
                                        idx = idx + 1;
                                    }

                                    if (!(found > 0)) {
                                        context$2$0.next = 33;
                                        break;
                                    }

                                    context$2$0.next = 29;
                                    return _regeneratorRuntime.awrap(this.set_command('m' + String(Math.round(Math.round(1000 * curr))) + ':' + String(Math.round(Math.round(1000 * currTemp)))));

                                case 29:
                                    res = context$2$0.sent;

                                    if (res == YAPI_SUCCESS) {
                                        context$2$0.next = 32;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_IO_ERROR, 'unable to reset thermistor parameters', YAPI_IO_ERROR));

                                case 32:
                                    prev = curr;

                                case 33:
                                    context$2$0.next = 20;
                                    break;

                                case 35:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 36:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'loadThermistorResponseTable',
                    value: function loadThermistorResponseTable(tempValues, resValues) {
                        var id, bin_json, paramlist, templist, siz, idx, temp, found, prev, curr, currRes;
                        return _regeneratorRuntime.async(function loadThermistorResponseTable$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    id = undefined;
                                    bin_json = undefined;
                                    paramlist = [];
                                    templist = [];
                                    siz = undefined;
                                    idx = undefined;
                                    temp = undefined;
                                    found = undefined;
                                    prev = undefined;
                                    curr = undefined;
                                    currRes = undefined;

                                    tempValues.length = 0;
                                    resValues.length = 0;
                                    context$2$0.next = 15;
                                    return _regeneratorRuntime.awrap(this.get_functionId());

                                case 15:
                                    id = context$2$0.sent;

                                    id = id.substr(11, id.length - 11);
                                    context$2$0.next = 19;
                                    return _regeneratorRuntime.awrap(this._download('extra.json?page=' + id));

                                case 19:
                                    bin_json = context$2$0.sent;

                                    paramlist = this.imm_json_get_array(bin_json);

                                    siz = paramlist.length >> 1;
                                    templist.length = 0;
                                    idx = 0;
                                    while (idx < siz) {
                                        temp = parseFloat(paramlist[2 * idx + 1]) / 1000.0;
                                        templist.push(temp);
                                        idx = idx + 1;
                                    }

                                    tempValues.length = 0;
                                    resValues.length = 0;
                                    found = 1;
                                    prev = -999999.0;
                                    while (found > 0) {
                                        found = 0;
                                        curr = 999999.0;
                                        currRes = -999999.0;
                                        idx = 0;
                                        while (idx < siz) {
                                            temp = templist[idx];
                                            if (temp > prev && temp < curr) {
                                                curr = temp;
                                                currRes = parseFloat(paramlist[2 * idx]) / 1000.0;
                                                found = 1;
                                            }
                                            idx = idx + 1;
                                        }
                                        if (found > 0) {
                                            tempValues.push(curr);
                                            resValues.push(currRes);
                                            prev = curr;
                                        }
                                    }
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 31:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextTemperature',
                    value: function nextTemperature() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YTemperature.FindTemperatureInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindTemperature',
                    value: function FindTemperature(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Temperature', func);
                        if (obj == null) {
                            obj = new YTemperature(YAPI, func);
                            YFunction._AddToCache('Temperature', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindTemperatureInContext',
                    value: function FindTemperatureInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Temperature', func);
                        if (obj == null) {
                            obj = new YTemperature(yctx, func);
                            YFunction._AddToCache('Temperature', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstTemperature',
                    value: function FirstTemperature() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Temperature');
                        if (next_hwid == null) return null;
                        return YTemperature.FindTemperature(next_hwid);
                    }
                }, {
                    key: 'FirstTemperatureInContext',
                    value: function FirstTemperatureInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Temperature');
                        if (next_hwid == null) return null;
                        return YTemperature.FindTemperatureInContext(yctx, next_hwid);
                    }
                }]);

                return YTemperature;
            })(YSensor);

            _export('YTemperature', YTemperature);
        }
    };
});
System.register('yoctolib-es/yocto_tilt.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_AXIS_X, Y_AXIS_Y, Y_AXIS_Z, Y_AXIS_INVALID, YTilt;

    function yFindTilt(func) {
        return YTilt.FindTilt(func);
    }

    function yFirstTilt() {
        return YTilt.FirstTilt();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindTilt', yFindTilt);

            _export('yFirstTilt', yFirstTilt);

            Y_AXIS_X = 0;

            _export('Y_AXIS_X', Y_AXIS_X);

            Y_AXIS_Y = 1;

            _export('Y_AXIS_Y', Y_AXIS_Y);

            Y_AXIS_Z = 2;

            _export('Y_AXIS_Z', Y_AXIS_Z);

            Y_AXIS_INVALID = -1;

            _export('Y_AXIS_INVALID', Y_AXIS_INVALID);

            YTilt = (function (_YSensor) {
                _inherits(YTilt, _YSensor);

                function YTilt(obj_yapi, str_func) {
                    _classCallCheck(this, YTilt);

                    _get(Object.getPrototypeOf(YTilt.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Tilt';

                    this._axis = Y_AXIS_INVALID;
                    this.imm_setConst({
                        AXIS_X: 0,
                        AXIS_Y: 1,
                        AXIS_Z: 2,
                        AXIS_INVALID: -1
                    });
                }

                _createClass(YTilt, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'axis':
                                this._axis = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YTilt.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_axis',
                    value: function get_axis() {
                        return _regeneratorRuntime.async(function get_axis$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_AXIS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._axis);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextTilt',
                    value: function nextTilt() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YTilt.FindTiltInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindTilt',
                    value: function FindTilt(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Tilt', func);
                        if (obj == null) {
                            obj = new YTilt(YAPI, func);
                            YFunction._AddToCache('Tilt', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindTiltInContext',
                    value: function FindTiltInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Tilt', func);
                        if (obj == null) {
                            obj = new YTilt(yctx, func);
                            YFunction._AddToCache('Tilt', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstTilt',
                    value: function FirstTilt() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Tilt');
                        if (next_hwid == null) return null;
                        return YTilt.FindTilt(next_hwid);
                    }
                }, {
                    key: 'FirstTiltInContext',
                    value: function FirstTiltInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Tilt');
                        if (next_hwid == null) return null;
                        return YTilt.FindTiltInContext(yctx, next_hwid);
                    }
                }]);

                return YTilt;
            })(YSensor);

            _export('YTilt', YTilt);
        }
    };
});
System.register('yoctolib-es/yocto_voc.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, YVoc;

    function yFindVoc(func) {
        return YVoc.FindVoc(func);
    }

    function yFirstVoc() {
        return YVoc.FirstVoc();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindVoc', yFindVoc);

            _export('yFirstVoc', yFirstVoc);

            YVoc = (function (_YSensor) {
                _inherits(YVoc, _YSensor);

                function YVoc(obj_yapi, str_func) {
                    _classCallCheck(this, YVoc);

                    _get(Object.getPrototypeOf(YVoc.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Voc';
                }

                _createClass(YVoc, [{
                    key: 'nextVoc',
                    value: function nextVoc() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YVoc.FindVocInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindVoc',
                    value: function FindVoc(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Voc', func);
                        if (obj == null) {
                            obj = new YVoc(YAPI, func);
                            YFunction._AddToCache('Voc', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindVocInContext',
                    value: function FindVocInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Voc', func);
                        if (obj == null) {
                            obj = new YVoc(yctx, func);
                            YFunction._AddToCache('Voc', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstVoc',
                    value: function FirstVoc() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Voc');
                        if (next_hwid == null) return null;
                        return YVoc.FindVoc(next_hwid);
                    }
                }, {
                    key: 'FirstVocInContext',
                    value: function FirstVocInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Voc');
                        if (next_hwid == null) return null;
                        return YVoc.FindVocInContext(yctx, next_hwid);
                    }
                }]);

                return YVoc;
            })(YSensor);

            _export('YVoc', YVoc);
        }
    };
});
System.register('yoctolib-es/yocto_voltage.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, YVoltage;

    function yFindVoltage(func) {
        return YVoltage.FindVoltage(func);
    }

    function yFirstVoltage() {
        return YVoltage.FirstVoltage();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindVoltage', yFindVoltage);

            _export('yFirstVoltage', yFirstVoltage);

            YVoltage = (function (_YSensor) {
                _inherits(YVoltage, _YSensor);

                function YVoltage(obj_yapi, str_func) {
                    _classCallCheck(this, YVoltage);

                    _get(Object.getPrototypeOf(YVoltage.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Voltage';
                }

                _createClass(YVoltage, [{
                    key: 'nextVoltage',
                    value: function nextVoltage() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YVoltage.FindVoltageInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindVoltage',
                    value: function FindVoltage(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Voltage', func);
                        if (obj == null) {
                            obj = new YVoltage(YAPI, func);
                            YFunction._AddToCache('Voltage', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindVoltageInContext',
                    value: function FindVoltageInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Voltage', func);
                        if (obj == null) {
                            obj = new YVoltage(yctx, func);
                            YFunction._AddToCache('Voltage', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstVoltage',
                    value: function FirstVoltage() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Voltage');
                        if (next_hwid == null) return null;
                        return YVoltage.FindVoltage(next_hwid);
                    }
                }, {
                    key: 'FirstVoltageInContext',
                    value: function FirstVoltageInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Voltage');
                        if (next_hwid == null) return null;
                        return YVoltage.FindVoltageInContext(yctx, next_hwid);
                    }
                }]);

                return YVoltage;
            })(YSensor);

            _export('YVoltage', YVoltage);
        }
    };
});
System.register('yoctolib-es/yocto_wakeupmonitor.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_WAKEUPREASON_USBPOWER, Y_WAKEUPREASON_EXTPOWER, Y_WAKEUPREASON_ENDOFSLEEP, Y_WAKEUPREASON_EXTSIG1, Y_WAKEUPREASON_SCHEDULE1, Y_WAKEUPREASON_SCHEDULE2, Y_WAKEUPREASON_INVALID, Y_WAKEUPSTATE_SLEEPING, Y_WAKEUPSTATE_AWAKE, Y_WAKEUPSTATE_INVALID, Y_POWERDURATION_INVALID, Y_SLEEPCOUNTDOWN_INVALID, Y_NEXTWAKEUP_INVALID, Y_RTCTIME_INVALID, YWakeUpMonitor;

    function yFindWakeUpMonitor(func) {
        return YWakeUpMonitor.FindWakeUpMonitor(func);
    }

    function yFirstWakeUpMonitor() {
        return YWakeUpMonitor.FirstWakeUpMonitor();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindWakeUpMonitor', yFindWakeUpMonitor);

            _export('yFirstWakeUpMonitor', yFirstWakeUpMonitor);

            Y_WAKEUPREASON_USBPOWER = 0;

            _export('Y_WAKEUPREASON_USBPOWER', Y_WAKEUPREASON_USBPOWER);

            Y_WAKEUPREASON_EXTPOWER = 1;

            _export('Y_WAKEUPREASON_EXTPOWER', Y_WAKEUPREASON_EXTPOWER);

            Y_WAKEUPREASON_ENDOFSLEEP = 2;

            _export('Y_WAKEUPREASON_ENDOFSLEEP', Y_WAKEUPREASON_ENDOFSLEEP);

            Y_WAKEUPREASON_EXTSIG1 = 3;

            _export('Y_WAKEUPREASON_EXTSIG1', Y_WAKEUPREASON_EXTSIG1);

            Y_WAKEUPREASON_SCHEDULE1 = 4;

            _export('Y_WAKEUPREASON_SCHEDULE1', Y_WAKEUPREASON_SCHEDULE1);

            Y_WAKEUPREASON_SCHEDULE2 = 5;

            _export('Y_WAKEUPREASON_SCHEDULE2', Y_WAKEUPREASON_SCHEDULE2);

            Y_WAKEUPREASON_INVALID = -1;

            _export('Y_WAKEUPREASON_INVALID', Y_WAKEUPREASON_INVALID);

            Y_WAKEUPSTATE_SLEEPING = 0;

            _export('Y_WAKEUPSTATE_SLEEPING', Y_WAKEUPSTATE_SLEEPING);

            Y_WAKEUPSTATE_AWAKE = 1;

            _export('Y_WAKEUPSTATE_AWAKE', Y_WAKEUPSTATE_AWAKE);

            Y_WAKEUPSTATE_INVALID = -1;

            _export('Y_WAKEUPSTATE_INVALID', Y_WAKEUPSTATE_INVALID);

            Y_POWERDURATION_INVALID = YAPI.INVALID_INT;

            _export('Y_POWERDURATION_INVALID', Y_POWERDURATION_INVALID);

            Y_SLEEPCOUNTDOWN_INVALID = YAPI.INVALID_INT;

            _export('Y_SLEEPCOUNTDOWN_INVALID', Y_SLEEPCOUNTDOWN_INVALID);

            Y_NEXTWAKEUP_INVALID = YAPI.INVALID_LONG;

            _export('Y_NEXTWAKEUP_INVALID', Y_NEXTWAKEUP_INVALID);

            Y_RTCTIME_INVALID = YAPI.INVALID_LONG;

            _export('Y_RTCTIME_INVALID', Y_RTCTIME_INVALID);

            YWakeUpMonitor = (function (_YFunction) {
                _inherits(YWakeUpMonitor, _YFunction);

                function YWakeUpMonitor(obj_yapi, str_func) {
                    _classCallCheck(this, YWakeUpMonitor);

                    _get(Object.getPrototypeOf(YWakeUpMonitor.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'WakeUpMonitor';

                    this._powerDuration = Y_POWERDURATION_INVALID;

                    this._sleepCountdown = Y_SLEEPCOUNTDOWN_INVALID;

                    this._nextWakeUp = Y_NEXTWAKEUP_INVALID;

                    this._wakeUpReason = Y_WAKEUPREASON_INVALID;

                    this._wakeUpState = Y_WAKEUPSTATE_INVALID;

                    this._rtcTime = Y_RTCTIME_INVALID;

                    this._endOfTime = 2145960000;
                    this.imm_setConst({
                        POWERDURATION_INVALID: YAPI.INVALID_INT,
                        SLEEPCOUNTDOWN_INVALID: YAPI.INVALID_INT,
                        NEXTWAKEUP_INVALID: YAPI.INVALID_LONG,
                        WAKEUPREASON_USBPOWER: 0,
                        WAKEUPREASON_EXTPOWER: 1,
                        WAKEUPREASON_ENDOFSLEEP: 2,
                        WAKEUPREASON_EXTSIG1: 3,
                        WAKEUPREASON_SCHEDULE1: 4,
                        WAKEUPREASON_SCHEDULE2: 5,
                        WAKEUPREASON_INVALID: -1,
                        WAKEUPSTATE_SLEEPING: 0,
                        WAKEUPSTATE_AWAKE: 1,
                        WAKEUPSTATE_INVALID: -1,
                        RTCTIME_INVALID: YAPI.INVALID_LONG
                    });
                }

                _createClass(YWakeUpMonitor, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'powerDuration':
                                this._powerDuration = parseInt(val);
                                return 1;
                            case 'sleepCountdown':
                                this._sleepCountdown = parseInt(val);
                                return 1;
                            case 'nextWakeUp':
                                this._nextWakeUp = parseInt(val);
                                return 1;
                            case 'wakeUpReason':
                                this._wakeUpReason = parseInt(val);
                                return 1;
                            case 'wakeUpState':
                                this._wakeUpState = parseInt(val);
                                return 1;
                            case 'rtcTime':
                                this._rtcTime = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YWakeUpMonitor.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_powerDuration',
                    value: function get_powerDuration() {
                        return _regeneratorRuntime.async(function get_powerDuration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_POWERDURATION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._powerDuration);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_powerDuration',
                    value: function set_powerDuration(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_powerDuration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('powerDuration', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_sleepCountdown',
                    value: function get_sleepCountdown() {
                        return _regeneratorRuntime.async(function get_sleepCountdown$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SLEEPCOUNTDOWN_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._sleepCountdown);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_sleepCountdown',
                    value: function set_sleepCountdown(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_sleepCountdown$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('sleepCountdown', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_nextWakeUp',
                    value: function get_nextWakeUp() {
                        return _regeneratorRuntime.async(function get_nextWakeUp$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_NEXTWAKEUP_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._nextWakeUp);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_nextWakeUp',
                    value: function set_nextWakeUp(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_nextWakeUp$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('nextWakeUp', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_wakeUpReason',
                    value: function get_wakeUpReason() {
                        return _regeneratorRuntime.async(function get_wakeUpReason$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_WAKEUPREASON_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._wakeUpReason);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_wakeUpState',
                    value: function get_wakeUpState() {
                        return _regeneratorRuntime.async(function get_wakeUpState$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_WAKEUPSTATE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._wakeUpState);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_wakeUpState',
                    value: function set_wakeUpState(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_wakeUpState$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('wakeUpState', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_rtcTime',
                    value: function get_rtcTime() {
                        return _regeneratorRuntime.async(function get_rtcTime$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_RTCTIME_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._rtcTime);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'wakeUp',
                    value: function wakeUp() {
                        return _regeneratorRuntime.async(function wakeUp$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_wakeUpState(Y_WAKEUPSTATE_AWAKE));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'sleep',
                    value: function sleep(secBeforeSleep) {
                        var currTime;
                        return _regeneratorRuntime.async(function sleep$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    currTime = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.get_rtcTime());

                                case 3:
                                    currTime = context$2$0.sent;

                                    if (currTime != 0) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_RTC_NOT_READY, 'RTC time not set', YAPI_RTC_NOT_READY));

                                case 6:
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(this.set_nextWakeUp(this._endOfTime));

                                case 8:
                                    context$2$0.next = 10;
                                    return _regeneratorRuntime.awrap(this.set_sleepCountdown(secBeforeSleep));

                                case 10:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 11:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'sleepFor',
                    value: function sleepFor(secUntilWakeUp, secBeforeSleep) {
                        var currTime;
                        return _regeneratorRuntime.async(function sleepFor$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    currTime = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.get_rtcTime());

                                case 3:
                                    currTime = context$2$0.sent;

                                    if (currTime != 0) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_RTC_NOT_READY, 'RTC time not set', YAPI_RTC_NOT_READY));

                                case 6:
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(this.set_nextWakeUp(currTime + secUntilWakeUp));

                                case 8:
                                    context$2$0.next = 10;
                                    return _regeneratorRuntime.awrap(this.set_sleepCountdown(secBeforeSleep));

                                case 10:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 11:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'sleepUntil',
                    value: function sleepUntil(wakeUpTime, secBeforeSleep) {
                        var currTime;
                        return _regeneratorRuntime.async(function sleepUntil$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    currTime = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.get_rtcTime());

                                case 3:
                                    currTime = context$2$0.sent;

                                    if (currTime != 0) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_RTC_NOT_READY, 'RTC time not set', YAPI_RTC_NOT_READY));

                                case 6:
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(this.set_nextWakeUp(wakeUpTime));

                                case 8:
                                    context$2$0.next = 10;
                                    return _regeneratorRuntime.awrap(this.set_sleepCountdown(secBeforeSleep));

                                case 10:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 11:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'resetSleepCountDown',
                    value: function resetSleepCountDown() {
                        return _regeneratorRuntime.async(function resetSleepCountDown$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_sleepCountdown(0));

                                case 2:
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.set_nextWakeUp(0));

                                case 4:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextWakeUpMonitor',
                    value: function nextWakeUpMonitor() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YWakeUpMonitor.FindWakeUpMonitorInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindWakeUpMonitor',
                    value: function FindWakeUpMonitor(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('WakeUpMonitor', func);
                        if (obj == null) {
                            obj = new YWakeUpMonitor(YAPI, func);
                            YFunction._AddToCache('WakeUpMonitor', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindWakeUpMonitorInContext',
                    value: function FindWakeUpMonitorInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'WakeUpMonitor', func);
                        if (obj == null) {
                            obj = new YWakeUpMonitor(yctx, func);
                            YFunction._AddToCache('WakeUpMonitor', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstWakeUpMonitor',
                    value: function FirstWakeUpMonitor() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('WakeUpMonitor');
                        if (next_hwid == null) return null;
                        return YWakeUpMonitor.FindWakeUpMonitor(next_hwid);
                    }
                }, {
                    key: 'FirstWakeUpMonitorInContext',
                    value: function FirstWakeUpMonitorInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('WakeUpMonitor');
                        if (next_hwid == null) return null;
                        return YWakeUpMonitor.FindWakeUpMonitorInContext(yctx, next_hwid);
                    }
                }]);

                return YWakeUpMonitor;
            })(YFunction);

            _export('YWakeUpMonitor', YWakeUpMonitor);
        }
    };
});
System.register('yoctolib-es/yocto_wakeupschedule.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_MINUTESA_INVALID, Y_MINUTESB_INVALID, Y_HOURS_INVALID, Y_WEEKDAYS_INVALID, Y_MONTHDAYS_INVALID, Y_MONTHS_INVALID, Y_NEXTOCCURENCE_INVALID, YWakeUpSchedule;

    function yFindWakeUpSchedule(func) {
        return YWakeUpSchedule.FindWakeUpSchedule(func);
    }

    function yFirstWakeUpSchedule() {
        return YWakeUpSchedule.FirstWakeUpSchedule();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindWakeUpSchedule', yFindWakeUpSchedule);

            _export('yFirstWakeUpSchedule', yFirstWakeUpSchedule);

            Y_MINUTESA_INVALID = YAPI.INVALID_UINT;

            _export('Y_MINUTESA_INVALID', Y_MINUTESA_INVALID);

            Y_MINUTESB_INVALID = YAPI.INVALID_UINT;

            _export('Y_MINUTESB_INVALID', Y_MINUTESB_INVALID);

            Y_HOURS_INVALID = YAPI.INVALID_UINT;

            _export('Y_HOURS_INVALID', Y_HOURS_INVALID);

            Y_WEEKDAYS_INVALID = YAPI.INVALID_UINT;

            _export('Y_WEEKDAYS_INVALID', Y_WEEKDAYS_INVALID);

            Y_MONTHDAYS_INVALID = YAPI.INVALID_UINT;

            _export('Y_MONTHDAYS_INVALID', Y_MONTHDAYS_INVALID);

            Y_MONTHS_INVALID = YAPI.INVALID_UINT;

            _export('Y_MONTHS_INVALID', Y_MONTHS_INVALID);

            Y_NEXTOCCURENCE_INVALID = YAPI.INVALID_LONG;

            _export('Y_NEXTOCCURENCE_INVALID', Y_NEXTOCCURENCE_INVALID);

            YWakeUpSchedule = (function (_YFunction) {
                _inherits(YWakeUpSchedule, _YFunction);

                function YWakeUpSchedule(obj_yapi, str_func) {
                    _classCallCheck(this, YWakeUpSchedule);

                    _get(Object.getPrototypeOf(YWakeUpSchedule.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'WakeUpSchedule';

                    this._minutesA = Y_MINUTESA_INVALID;

                    this._minutesB = Y_MINUTESB_INVALID;

                    this._hours = Y_HOURS_INVALID;

                    this._weekDays = Y_WEEKDAYS_INVALID;

                    this._monthDays = Y_MONTHDAYS_INVALID;

                    this._months = Y_MONTHS_INVALID;

                    this._nextOccurence = Y_NEXTOCCURENCE_INVALID;
                    this.imm_setConst({
                        MINUTESA_INVALID: YAPI.INVALID_UINT,
                        MINUTESB_INVALID: YAPI.INVALID_UINT,
                        HOURS_INVALID: YAPI.INVALID_UINT,
                        WEEKDAYS_INVALID: YAPI.INVALID_UINT,
                        MONTHDAYS_INVALID: YAPI.INVALID_UINT,
                        MONTHS_INVALID: YAPI.INVALID_UINT,
                        NEXTOCCURENCE_INVALID: YAPI.INVALID_LONG
                    });
                }

                _createClass(YWakeUpSchedule, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'minutesA':
                                this._minutesA = parseInt(val);
                                return 1;
                            case 'minutesB':
                                this._minutesB = parseInt(val);
                                return 1;
                            case 'hours':
                                this._hours = parseInt(val);
                                return 1;
                            case 'weekDays':
                                this._weekDays = parseInt(val);
                                return 1;
                            case 'monthDays':
                                this._monthDays = parseInt(val);
                                return 1;
                            case 'months':
                                this._months = parseInt(val);
                                return 1;
                            case 'nextOccurence':
                                this._nextOccurence = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YWakeUpSchedule.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_minutesA',
                    value: function get_minutesA() {
                        return _regeneratorRuntime.async(function get_minutesA$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MINUTESA_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._minutesA);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_minutesA',
                    value: function set_minutesA(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_minutesA$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('minutesA', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_minutesB',
                    value: function get_minutesB() {
                        return _regeneratorRuntime.async(function get_minutesB$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MINUTESB_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._minutesB);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_minutesB',
                    value: function set_minutesB(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_minutesB$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('minutesB', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_hours',
                    value: function get_hours() {
                        return _regeneratorRuntime.async(function get_hours$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_HOURS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._hours);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_hours',
                    value: function set_hours(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_hours$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('hours', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_weekDays',
                    value: function get_weekDays() {
                        return _regeneratorRuntime.async(function get_weekDays$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_WEEKDAYS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._weekDays);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_weekDays',
                    value: function set_weekDays(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_weekDays$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('weekDays', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_monthDays',
                    value: function get_monthDays() {
                        return _regeneratorRuntime.async(function get_monthDays$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MONTHDAYS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._monthDays);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_monthDays',
                    value: function set_monthDays(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_monthDays$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('monthDays', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_months',
                    value: function get_months() {
                        return _regeneratorRuntime.async(function get_months$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MONTHS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._months);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_months',
                    value: function set_months(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_months$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('months', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_nextOccurence',
                    value: function get_nextOccurence() {
                        return _regeneratorRuntime.async(function get_nextOccurence$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_NEXTOCCURENCE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._nextOccurence);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_minutes',
                    value: function get_minutes() {
                        var res;
                        return _regeneratorRuntime.async(function get_minutes$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    res = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.get_minutesB());

                                case 3:
                                    res = context$2$0.sent;

                                    res = res << 30;
                                    context$2$0.t0 = res;
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(this.get_minutesA());

                                case 8:
                                    context$2$0.t1 = context$2$0.sent;
                                    res = context$2$0.t0 + context$2$0.t1;
                                    return context$2$0.abrupt('return', res);

                                case 11:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_minutes',
                    value: function set_minutes(bitmap) {
                        return _regeneratorRuntime.async(function set_minutes$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_minutesA(bitmap & 0x3fffffff));

                                case 2:
                                    bitmap = bitmap >> 30;
                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this.set_minutesB(bitmap & 0x3fffffff));

                                case 5:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 6:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextWakeUpSchedule',
                    value: function nextWakeUpSchedule() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YWakeUpSchedule.FindWakeUpScheduleInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindWakeUpSchedule',
                    value: function FindWakeUpSchedule(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('WakeUpSchedule', func);
                        if (obj == null) {
                            obj = new YWakeUpSchedule(YAPI, func);
                            YFunction._AddToCache('WakeUpSchedule', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindWakeUpScheduleInContext',
                    value: function FindWakeUpScheduleInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'WakeUpSchedule', func);
                        if (obj == null) {
                            obj = new YWakeUpSchedule(yctx, func);
                            YFunction._AddToCache('WakeUpSchedule', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstWakeUpSchedule',
                    value: function FirstWakeUpSchedule() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('WakeUpSchedule');
                        if (next_hwid == null) return null;
                        return YWakeUpSchedule.FindWakeUpSchedule(next_hwid);
                    }
                }, {
                    key: 'FirstWakeUpScheduleInContext',
                    value: function FirstWakeUpScheduleInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('WakeUpSchedule');
                        if (next_hwid == null) return null;
                        return YWakeUpSchedule.FindWakeUpScheduleInContext(yctx, next_hwid);
                    }
                }]);

                return YWakeUpSchedule;
            })(YFunction);

            _export('YWakeUpSchedule', YWakeUpSchedule);
        }
    };
});
System.register('yoctolib-es/yocto_watchdog.js', ['npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _get, _inherits, _createClass, _classCallCheck, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_STATE_A, Y_STATE_B, Y_STATE_INVALID, Y_STATEATPOWERON_UNCHANGED, Y_STATEATPOWERON_A, Y_STATEATPOWERON_B, Y_STATEATPOWERON_INVALID, Y_OUTPUT_OFF, Y_OUTPUT_ON, Y_OUTPUT_INVALID, Y_AUTOSTART_OFF, Y_AUTOSTART_ON, Y_AUTOSTART_INVALID, Y_RUNNING_OFF, Y_RUNNING_ON, Y_RUNNING_INVALID, Y_MAXTIMEONSTATEA_INVALID, Y_MAXTIMEONSTATEB_INVALID, Y_PULSETIMER_INVALID, Y_DELAYEDPULSETIMER_INVALID, Y_COUNTDOWN_INVALID, Y_TRIGGERDELAY_INVALID, Y_TRIGGERDURATION_INVALID, YWatchdog;

    function yFindWatchdog(func) {
        return YWatchdog.FindWatchdog(func);
    }

    function yFirstWatchdog() {
        return YWatchdog.FirstWatchdog();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {

            'use strict';

            _export('yFindWatchdog', yFindWatchdog);

            _export('yFirstWatchdog', yFirstWatchdog);

            Y_STATE_A = 0;

            _export('Y_STATE_A', Y_STATE_A);

            Y_STATE_B = 1;

            _export('Y_STATE_B', Y_STATE_B);

            Y_STATE_INVALID = -1;

            _export('Y_STATE_INVALID', Y_STATE_INVALID);

            Y_STATEATPOWERON_UNCHANGED = 0;

            _export('Y_STATEATPOWERON_UNCHANGED', Y_STATEATPOWERON_UNCHANGED);

            Y_STATEATPOWERON_A = 1;

            _export('Y_STATEATPOWERON_A', Y_STATEATPOWERON_A);

            Y_STATEATPOWERON_B = 2;

            _export('Y_STATEATPOWERON_B', Y_STATEATPOWERON_B);

            Y_STATEATPOWERON_INVALID = -1;

            _export('Y_STATEATPOWERON_INVALID', Y_STATEATPOWERON_INVALID);

            Y_OUTPUT_OFF = 0;

            _export('Y_OUTPUT_OFF', Y_OUTPUT_OFF);

            Y_OUTPUT_ON = 1;

            _export('Y_OUTPUT_ON', Y_OUTPUT_ON);

            Y_OUTPUT_INVALID = -1;

            _export('Y_OUTPUT_INVALID', Y_OUTPUT_INVALID);

            Y_AUTOSTART_OFF = 0;

            _export('Y_AUTOSTART_OFF', Y_AUTOSTART_OFF);

            Y_AUTOSTART_ON = 1;

            _export('Y_AUTOSTART_ON', Y_AUTOSTART_ON);

            Y_AUTOSTART_INVALID = -1;

            _export('Y_AUTOSTART_INVALID', Y_AUTOSTART_INVALID);

            Y_RUNNING_OFF = 0;

            _export('Y_RUNNING_OFF', Y_RUNNING_OFF);

            Y_RUNNING_ON = 1;

            _export('Y_RUNNING_ON', Y_RUNNING_ON);

            Y_RUNNING_INVALID = -1;

            _export('Y_RUNNING_INVALID', Y_RUNNING_INVALID);

            Y_MAXTIMEONSTATEA_INVALID = YAPI.INVALID_LONG;

            _export('Y_MAXTIMEONSTATEA_INVALID', Y_MAXTIMEONSTATEA_INVALID);

            Y_MAXTIMEONSTATEB_INVALID = YAPI.INVALID_LONG;

            _export('Y_MAXTIMEONSTATEB_INVALID', Y_MAXTIMEONSTATEB_INVALID);

            Y_PULSETIMER_INVALID = YAPI.INVALID_LONG;

            _export('Y_PULSETIMER_INVALID', Y_PULSETIMER_INVALID);

            Y_DELAYEDPULSETIMER_INVALID = null;

            _export('Y_DELAYEDPULSETIMER_INVALID', Y_DELAYEDPULSETIMER_INVALID);

            Y_COUNTDOWN_INVALID = YAPI.INVALID_LONG;

            _export('Y_COUNTDOWN_INVALID', Y_COUNTDOWN_INVALID);

            Y_TRIGGERDELAY_INVALID = YAPI.INVALID_LONG;

            _export('Y_TRIGGERDELAY_INVALID', Y_TRIGGERDELAY_INVALID);

            Y_TRIGGERDURATION_INVALID = YAPI.INVALID_LONG;

            _export('Y_TRIGGERDURATION_INVALID', Y_TRIGGERDURATION_INVALID);

            YWatchdog = (function (_YFunction) {
                _inherits(YWatchdog, _YFunction);

                function YWatchdog(obj_yapi, str_func) {
                    _classCallCheck(this, YWatchdog);

                    _get(Object.getPrototypeOf(YWatchdog.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Watchdog';

                    this._state = Y_STATE_INVALID;

                    this._stateAtPowerOn = Y_STATEATPOWERON_INVALID;

                    this._maxTimeOnStateA = Y_MAXTIMEONSTATEA_INVALID;

                    this._maxTimeOnStateB = Y_MAXTIMEONSTATEB_INVALID;

                    this._output = Y_OUTPUT_INVALID;

                    this._pulseTimer = Y_PULSETIMER_INVALID;

                    this._delayedPulseTimer = Y_DELAYEDPULSETIMER_INVALID;

                    this._countdown = Y_COUNTDOWN_INVALID;

                    this._autoStart = Y_AUTOSTART_INVALID;

                    this._running = Y_RUNNING_INVALID;

                    this._triggerDelay = Y_TRIGGERDELAY_INVALID;

                    this._triggerDuration = Y_TRIGGERDURATION_INVALID;
                    this.imm_setConst({
                        STATE_A: 0,
                        STATE_B: 1,
                        STATE_INVALID: -1,
                        STATEATPOWERON_UNCHANGED: 0,
                        STATEATPOWERON_A: 1,
                        STATEATPOWERON_B: 2,
                        STATEATPOWERON_INVALID: -1,
                        MAXTIMEONSTATEA_INVALID: YAPI.INVALID_LONG,
                        MAXTIMEONSTATEB_INVALID: YAPI.INVALID_LONG,
                        OUTPUT_OFF: 0,
                        OUTPUT_ON: 1,
                        OUTPUT_INVALID: -1,
                        PULSETIMER_INVALID: YAPI.INVALID_LONG,
                        COUNTDOWN_INVALID: YAPI.INVALID_LONG,
                        AUTOSTART_OFF: 0,
                        AUTOSTART_ON: 1,
                        AUTOSTART_INVALID: -1,
                        RUNNING_OFF: 0,
                        RUNNING_ON: 1,
                        RUNNING_INVALID: -1,
                        TRIGGERDELAY_INVALID: YAPI.INVALID_LONG,
                        TRIGGERDURATION_INVALID: YAPI.INVALID_LONG
                    });
                }

                _createClass(YWatchdog, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'state':
                                this._state = parseInt(val);
                                return 1;
                            case 'stateAtPowerOn':
                                this._stateAtPowerOn = parseInt(val);
                                return 1;
                            case 'maxTimeOnStateA':
                                this._maxTimeOnStateA = parseInt(val);
                                return 1;
                            case 'maxTimeOnStateB':
                                this._maxTimeOnStateB = parseInt(val);
                                return 1;
                            case 'output':
                                this._output = parseInt(val);
                                return 1;
                            case 'pulseTimer':
                                this._pulseTimer = parseInt(val);
                                return 1;
                            case 'delayedPulseTimer':
                                this._delayedPulseTimer = val;
                                return 1;
                            case 'countdown':
                                this._countdown = parseInt(val);
                                return 1;
                            case 'autoStart':
                                this._autoStart = parseInt(val);
                                return 1;
                            case 'running':
                                this._running = parseInt(val);
                                return 1;
                            case 'triggerDelay':
                                this._triggerDelay = parseInt(val);
                                return 1;
                            case 'triggerDuration':
                                this._triggerDuration = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YWatchdog.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_state',
                    value: function get_state() {
                        return _regeneratorRuntime.async(function get_state$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_STATE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._state);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_state',
                    value: function set_state(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_state$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('state', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_stateAtPowerOn',
                    value: function get_stateAtPowerOn() {
                        return _regeneratorRuntime.async(function get_stateAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_STATEATPOWERON_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._stateAtPowerOn);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_stateAtPowerOn',
                    value: function set_stateAtPowerOn(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_stateAtPowerOn$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('stateAtPowerOn', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_maxTimeOnStateA',
                    value: function get_maxTimeOnStateA() {
                        return _regeneratorRuntime.async(function get_maxTimeOnStateA$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MAXTIMEONSTATEA_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._maxTimeOnStateA);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_maxTimeOnStateA',
                    value: function set_maxTimeOnStateA(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_maxTimeOnStateA$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('maxTimeOnStateA', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_maxTimeOnStateB',
                    value: function get_maxTimeOnStateB() {
                        return _regeneratorRuntime.async(function get_maxTimeOnStateB$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MAXTIMEONSTATEB_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._maxTimeOnStateB);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_maxTimeOnStateB',
                    value: function set_maxTimeOnStateB(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_maxTimeOnStateB$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('maxTimeOnStateB', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_output',
                    value: function get_output() {
                        return _regeneratorRuntime.async(function get_output$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_OUTPUT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._output);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_output',
                    value: function set_output(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_output$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('output', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_pulseTimer',
                    value: function get_pulseTimer() {
                        return _regeneratorRuntime.async(function get_pulseTimer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PULSETIMER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._pulseTimer);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_pulseTimer',
                    value: function set_pulseTimer(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_pulseTimer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('pulseTimer', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'pulse',
                    value: function pulse(ms_duration) {
                        var rest_val;
                        return _regeneratorRuntime.async(function pulse$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(ms_duration);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('pulseTimer', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_delayedPulseTimer',
                    value: function get_delayedPulseTimer() {
                        return _regeneratorRuntime.async(function get_delayedPulseTimer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DELAYEDPULSETIMER_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._delayedPulseTimer);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_delayedPulseTimer',
                    value: function set_delayedPulseTimer(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_delayedPulseTimer$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval.target) + ':' + String(newval.ms);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('delayedPulseTimer', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'delayedPulse',
                    value: function delayedPulse(ms_delay, ms_duration) {
                        var rest_val;
                        return _regeneratorRuntime.async(function delayedPulse$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(ms_delay) + ':' + String(ms_duration);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('delayedPulseTimer', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_countdown',
                    value: function get_countdown() {
                        return _regeneratorRuntime.async(function get_countdown$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_COUNTDOWN_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._countdown);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_autoStart',
                    value: function get_autoStart() {
                        return _regeneratorRuntime.async(function get_autoStart$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_AUTOSTART_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._autoStart);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_autoStart',
                    value: function set_autoStart(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_autoStart$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('autoStart', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_running',
                    value: function get_running() {
                        return _regeneratorRuntime.async(function get_running$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_RUNNING_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._running);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_running',
                    value: function set_running(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_running$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('running', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'resetWatchdog',
                    value: function resetWatchdog() {
                        var rest_val;
                        return _regeneratorRuntime.async(function resetWatchdog$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = '1';
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('running', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_triggerDelay',
                    value: function get_triggerDelay() {
                        return _regeneratorRuntime.async(function get_triggerDelay$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_TRIGGERDELAY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._triggerDelay);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_triggerDelay',
                    value: function set_triggerDelay(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_triggerDelay$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('triggerDelay', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_triggerDuration',
                    value: function get_triggerDuration() {
                        return _regeneratorRuntime.async(function get_triggerDuration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_TRIGGERDURATION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._triggerDuration);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_triggerDuration',
                    value: function set_triggerDuration(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_triggerDuration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('triggerDuration', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextWatchdog',
                    value: function nextWatchdog() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YWatchdog.FindWatchdogInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindWatchdog',
                    value: function FindWatchdog(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Watchdog', func);
                        if (obj == null) {
                            obj = new YWatchdog(YAPI, func);
                            YFunction._AddToCache('Watchdog', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindWatchdogInContext',
                    value: function FindWatchdogInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Watchdog', func);
                        if (obj == null) {
                            obj = new YWatchdog(yctx, func);
                            YFunction._AddToCache('Watchdog', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstWatchdog',
                    value: function FirstWatchdog() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Watchdog');
                        if (next_hwid == null) return null;
                        return YWatchdog.FindWatchdog(next_hwid);
                    }
                }, {
                    key: 'FirstWatchdogInContext',
                    value: function FirstWatchdogInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Watchdog');
                        if (next_hwid == null) return null;
                        return YWatchdog.FindWatchdogInContext(yctx, next_hwid);
                    }
                }]);

                return YWatchdog;
            })(YFunction);

            _export('YWatchdog', YWatchdog);
        }
    };
});
System.registerDynamic("npm:babel-runtime@5.8.34/helpers/class-call-check", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  exports["default"] = function(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/fn/object/define-property", ["npm:core-js@1.2.6/library/modules/$"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $ = $__require('npm:core-js@1.2.6/library/modules/$');
  module.exports = function defineProperty(it, key, desc) {
    return $.setDesc(it, key, desc);
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:babel-runtime@5.8.34/core-js/object/define-property", ["npm:core-js@1.2.6/library/fn/object/define-property"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": $__require('npm:core-js@1.2.6/library/fn/object/define-property'),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:babel-runtime@5.8.34/helpers/create-class", ["npm:babel-runtime@5.8.34/core-js/object/define-property"], true, function($__require, exports, module) {
  "use strict";
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var _Object$defineProperty = $__require('npm:babel-runtime@5.8.34/core-js/object/define-property')["default"];
  exports["default"] = (function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        _Object$defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.object-sap", ["npm:core-js@1.2.6/library/modules/$.export", "npm:core-js@1.2.6/library/modules/$.core", "npm:core-js@1.2.6/library/modules/$.fails"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $export = $__require('npm:core-js@1.2.6/library/modules/$.export'),
      core = $__require('npm:core-js@1.2.6/library/modules/$.core'),
      fails = $__require('npm:core-js@1.2.6/library/modules/$.fails');
  module.exports = function(KEY, exec) {
    var fn = (core.Object || {})[KEY] || Object[KEY],
        exp = {};
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function() {
      fn(1);
    }), 'Object', exp);
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/es6.object.get-own-property-descriptor", ["npm:core-js@1.2.6/library/modules/$.to-iobject", "npm:core-js@1.2.6/library/modules/$.object-sap"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var toIObject = $__require('npm:core-js@1.2.6/library/modules/$.to-iobject');
  $__require('npm:core-js@1.2.6/library/modules/$.object-sap')('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor) {
    return function getOwnPropertyDescriptor(it, key) {
      return $getOwnPropertyDescriptor(toIObject(it), key);
    };
  });
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/fn/object/get-own-property-descriptor", ["npm:core-js@1.2.6/library/modules/$", "npm:core-js@1.2.6/library/modules/es6.object.get-own-property-descriptor"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $ = $__require('npm:core-js@1.2.6/library/modules/$');
  $__require('npm:core-js@1.2.6/library/modules/es6.object.get-own-property-descriptor');
  module.exports = function getOwnPropertyDescriptor(it, key) {
    return $.getDesc(it, key);
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:babel-runtime@5.8.34/core-js/object/get-own-property-descriptor", ["npm:core-js@1.2.6/library/fn/object/get-own-property-descriptor"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": $__require('npm:core-js@1.2.6/library/fn/object/get-own-property-descriptor'),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:babel-runtime@5.8.34/helpers/get", ["npm:babel-runtime@5.8.34/core-js/object/get-own-property-descriptor"], true, function($__require, exports, module) {
  "use strict";
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var _Object$getOwnPropertyDescriptor = $__require('npm:babel-runtime@5.8.34/core-js/object/get-own-property-descriptor')["default"];
  exports["default"] = function get(_x, _x2, _x3) {
    var _again = true;
    _function: while (_again) {
      var object = _x,
          property = _x2,
          receiver = _x3;
      _again = false;
      if (object === null)
        object = Function.prototype;
      var desc = _Object$getOwnPropertyDescriptor(object, property);
      if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);
        if (parent === null) {
          return undefined;
        } else {
          _x = parent;
          _x2 = property;
          _x3 = receiver;
          _again = true;
          desc = parent = undefined;
          continue _function;
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;
        if (getter === undefined) {
          return undefined;
        }
        return getter.call(receiver);
      }
    }
  };
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:babel-runtime@5.8.34/helpers/inherits", ["npm:babel-runtime@5.8.34/core-js/object/create", "npm:babel-runtime@5.8.34/core-js/object/set-prototype-of"], true, function($__require, exports, module) {
  "use strict";
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var _Object$create = $__require('npm:babel-runtime@5.8.34/core-js/object/create')["default"];
  var _Object$setPrototypeOf = $__require('npm:babel-runtime@5.8.34/core-js/object/set-prototype-of')["default"];
  exports["default"] = function(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = _Object$create(superClass && superClass.prototype, {constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }});
    if (superClass)
      _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.keyof", ["npm:core-js@1.2.6/library/modules/$", "npm:core-js@1.2.6/library/modules/$.to-iobject"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $ = $__require('npm:core-js@1.2.6/library/modules/$'),
      toIObject = $__require('npm:core-js@1.2.6/library/modules/$.to-iobject');
  module.exports = function(object, el) {
    var O = toIObject(object),
        keys = $.getKeys(O),
        length = keys.length,
        index = 0,
        key;
    while (length > index)
      if (O[key = keys[index++]] === el)
        return key;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.get-names", ["npm:core-js@1.2.6/library/modules/$.to-iobject", "npm:core-js@1.2.6/library/modules/$"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var toIObject = $__require('npm:core-js@1.2.6/library/modules/$.to-iobject'),
      getNames = $__require('npm:core-js@1.2.6/library/modules/$').getNames,
      toString = {}.toString;
  var windowNames = typeof window == 'object' && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
  var getWindowNames = function(it) {
    try {
      return getNames(it);
    } catch (e) {
      return windowNames.slice();
    }
  };
  module.exports.get = function getOwnPropertyNames(it) {
    if (windowNames && toString.call(it) == '[object Window]')
      return getWindowNames(it);
    return getNames(toIObject(it));
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.enum-keys", ["npm:core-js@1.2.6/library/modules/$"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $ = $__require('npm:core-js@1.2.6/library/modules/$');
  module.exports = function(it) {
    var keys = $.getKeys(it),
        getSymbols = $.getSymbols;
    if (getSymbols) {
      var symbols = getSymbols(it),
          isEnum = $.isEnum,
          i = 0,
          key;
      while (symbols.length > i)
        if (isEnum.call(it, key = symbols[i++]))
          keys.push(key);
    }
    return keys;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.is-array", ["npm:core-js@1.2.6/library/modules/$.cof"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var cof = $__require('npm:core-js@1.2.6/library/modules/$.cof');
  module.exports = Array.isArray || function(arg) {
    return cof(arg) == 'Array';
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/es6.symbol", ["npm:core-js@1.2.6/library/modules/$", "npm:core-js@1.2.6/library/modules/$.global", "npm:core-js@1.2.6/library/modules/$.has", "npm:core-js@1.2.6/library/modules/$.descriptors", "npm:core-js@1.2.6/library/modules/$.export", "npm:core-js@1.2.6/library/modules/$.redefine", "npm:core-js@1.2.6/library/modules/$.fails", "npm:core-js@1.2.6/library/modules/$.shared", "npm:core-js@1.2.6/library/modules/$.set-to-string-tag", "npm:core-js@1.2.6/library/modules/$.uid", "npm:core-js@1.2.6/library/modules/$.wks", "npm:core-js@1.2.6/library/modules/$.keyof", "npm:core-js@1.2.6/library/modules/$.get-names", "npm:core-js@1.2.6/library/modules/$.enum-keys", "npm:core-js@1.2.6/library/modules/$.is-array", "npm:core-js@1.2.6/library/modules/$.an-object", "npm:core-js@1.2.6/library/modules/$.to-iobject", "npm:core-js@1.2.6/library/modules/$.property-desc", "npm:core-js@1.2.6/library/modules/$.library"], true, function($__require, exports, module) {
  "use strict";
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $ = $__require('npm:core-js@1.2.6/library/modules/$'),
      global = $__require('npm:core-js@1.2.6/library/modules/$.global'),
      has = $__require('npm:core-js@1.2.6/library/modules/$.has'),
      DESCRIPTORS = $__require('npm:core-js@1.2.6/library/modules/$.descriptors'),
      $export = $__require('npm:core-js@1.2.6/library/modules/$.export'),
      redefine = $__require('npm:core-js@1.2.6/library/modules/$.redefine'),
      $fails = $__require('npm:core-js@1.2.6/library/modules/$.fails'),
      shared = $__require('npm:core-js@1.2.6/library/modules/$.shared'),
      setToStringTag = $__require('npm:core-js@1.2.6/library/modules/$.set-to-string-tag'),
      uid = $__require('npm:core-js@1.2.6/library/modules/$.uid'),
      wks = $__require('npm:core-js@1.2.6/library/modules/$.wks'),
      keyOf = $__require('npm:core-js@1.2.6/library/modules/$.keyof'),
      $names = $__require('npm:core-js@1.2.6/library/modules/$.get-names'),
      enumKeys = $__require('npm:core-js@1.2.6/library/modules/$.enum-keys'),
      isArray = $__require('npm:core-js@1.2.6/library/modules/$.is-array'),
      anObject = $__require('npm:core-js@1.2.6/library/modules/$.an-object'),
      toIObject = $__require('npm:core-js@1.2.6/library/modules/$.to-iobject'),
      createDesc = $__require('npm:core-js@1.2.6/library/modules/$.property-desc'),
      getDesc = $.getDesc,
      setDesc = $.setDesc,
      _create = $.create,
      getNames = $names.get,
      $Symbol = global.Symbol,
      $JSON = global.JSON,
      _stringify = $JSON && $JSON.stringify,
      setter = false,
      HIDDEN = wks('_hidden'),
      isEnum = $.isEnum,
      SymbolRegistry = shared('symbol-registry'),
      AllSymbols = shared('symbols'),
      useNative = typeof $Symbol == 'function',
      ObjectProto = Object.prototype;
  var setSymbolDesc = DESCRIPTORS && $fails(function() {
    return _create(setDesc({}, 'a', {get: function() {
        return setDesc(this, 'a', {value: 7}).a;
      }})).a != 7;
  }) ? function(it, key, D) {
    var protoDesc = getDesc(ObjectProto, key);
    if (protoDesc)
      delete ObjectProto[key];
    setDesc(it, key, D);
    if (protoDesc && it !== ObjectProto)
      setDesc(ObjectProto, key, protoDesc);
  } : setDesc;
  var wrap = function(tag) {
    var sym = AllSymbols[tag] = _create($Symbol.prototype);
    sym._k = tag;
    DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
      configurable: true,
      set: function(value) {
        if (has(this, HIDDEN) && has(this[HIDDEN], tag))
          this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, createDesc(1, value));
      }
    });
    return sym;
  };
  var isSymbol = function(it) {
    return typeof it == 'symbol';
  };
  var $defineProperty = function defineProperty(it, key, D) {
    if (D && has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!has(it, HIDDEN))
          setDesc(it, HIDDEN, createDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (has(it, HIDDEN) && it[HIDDEN][key])
          it[HIDDEN][key] = false;
        D = _create(D, {enumerable: createDesc(0, false)});
      }
      return setSymbolDesc(it, key, D);
    }
    return setDesc(it, key, D);
  };
  var $defineProperties = function defineProperties(it, P) {
    anObject(it);
    var keys = enumKeys(P = toIObject(P)),
        i = 0,
        l = keys.length,
        key;
    while (l > i)
      $defineProperty(it, key = keys[i++], P[key]);
    return it;
  };
  var $create = function create(it, P) {
    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key);
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    var D = getDesc(it = toIObject(it), key);
    if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))
      D.enumerable = true;
    return D;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = getNames(toIObject(it)),
        result = [],
        i = 0,
        key;
    while (names.length > i)
      if (!has(AllSymbols, key = names[i++]) && key != HIDDEN)
        result.push(key);
    return result;
  };
  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var names = getNames(toIObject(it)),
        result = [],
        i = 0,
        key;
    while (names.length > i)
      if (has(AllSymbols, key = names[i++]))
        result.push(AllSymbols[key]);
    return result;
  };
  var $stringify = function stringify(it) {
    if (it === undefined || isSymbol(it))
      return;
    var args = [it],
        i = 1,
        $$ = arguments,
        replacer,
        $replacer;
    while ($$.length > i)
      args.push($$[i++]);
    replacer = args[1];
    if (typeof replacer == 'function')
      $replacer = replacer;
    if ($replacer || !isArray(replacer))
      replacer = function(key, value) {
        if ($replacer)
          value = $replacer.call(this, key, value);
        if (!isSymbol(value))
          return value;
      };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  };
  var buggyJSON = $fails(function() {
    var S = $Symbol();
    return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
  });
  if (!useNative) {
    $Symbol = function Symbol() {
      if (isSymbol(this))
        throw TypeError('Symbol is not a constructor');
      return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));
    };
    redefine($Symbol.prototype, 'toString', function toString() {
      return this._k;
    });
    isSymbol = function(it) {
      return it instanceof $Symbol;
    };
    $.create = $create;
    $.isEnum = $propertyIsEnumerable;
    $.getDesc = $getOwnPropertyDescriptor;
    $.setDesc = $defineProperty;
    $.setDescs = $defineProperties;
    $.getNames = $names.get = $getOwnPropertyNames;
    $.getSymbols = $getOwnPropertySymbols;
    if (DESCRIPTORS && !$__require('npm:core-js@1.2.6/library/modules/$.library')) {
      redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }
  }
  var symbolStatics = {
    'for': function(key) {
      return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
    },
    keyFor: function keyFor(key) {
      return keyOf(SymbolRegistry, key);
    },
    useSetter: function() {
      setter = true;
    },
    useSimple: function() {
      setter = false;
    }
  };
  $.each.call(('hasInstance,isConcatSpreadable,iterator,match,replace,search,' + 'species,split,toPrimitive,toStringTag,unscopables').split(','), function(it) {
    var sym = wks(it);
    symbolStatics[it] = useNative ? sym : wrap(sym);
  });
  setter = true;
  $export($export.G + $export.W, {Symbol: $Symbol});
  $export($export.S, 'Symbol', symbolStatics);
  $export($export.S + $export.F * !useNative, 'Object', {
    create: $create,
    defineProperty: $defineProperty,
    defineProperties: $defineProperties,
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    getOwnPropertyNames: $getOwnPropertyNames,
    getOwnPropertySymbols: $getOwnPropertySymbols
  });
  $JSON && $export($export.S + $export.F * (!useNative || buggyJSON), 'JSON', {stringify: $stringify});
  setToStringTag($Symbol, 'Symbol');
  setToStringTag(Math, 'Math', true);
  setToStringTag(global.JSON, 'JSON', true);
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/fn/symbol/index", ["npm:core-js@1.2.6/library/modules/es6.symbol", "npm:core-js@1.2.6/library/modules/es6.object.to-string", "npm:core-js@1.2.6/library/modules/$.core"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  $__require('npm:core-js@1.2.6/library/modules/es6.symbol');
  $__require('npm:core-js@1.2.6/library/modules/es6.object.to-string');
  module.exports = $__require('npm:core-js@1.2.6/library/modules/$.core').Symbol;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/fn/symbol", ["npm:core-js@1.2.6/library/fn/symbol/index"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__require('npm:core-js@1.2.6/library/fn/symbol/index');
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:babel-runtime@5.8.34/core-js/symbol", ["npm:core-js@1.2.6/library/fn/symbol"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": $__require('npm:core-js@1.2.6/library/fn/symbol'),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/fn/object/create", ["npm:core-js@1.2.6/library/modules/$"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $ = $__require('npm:core-js@1.2.6/library/modules/$');
  module.exports = function create(P, D) {
    return $.create(P, D);
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:babel-runtime@5.8.34/core-js/object/create", ["npm:core-js@1.2.6/library/fn/object/create"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": $__require('npm:core-js@1.2.6/library/fn/object/create'),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/es6.object.set-prototype-of", ["npm:core-js@1.2.6/library/modules/$.export", "npm:core-js@1.2.6/library/modules/$.set-proto"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $export = $__require('npm:core-js@1.2.6/library/modules/$.export');
  $export($export.S, 'Object', {setPrototypeOf: $__require('npm:core-js@1.2.6/library/modules/$.set-proto').set});
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/fn/object/set-prototype-of", ["npm:core-js@1.2.6/library/modules/es6.object.set-prototype-of", "npm:core-js@1.2.6/library/modules/$.core"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  $__require('npm:core-js@1.2.6/library/modules/es6.object.set-prototype-of');
  module.exports = $__require('npm:core-js@1.2.6/library/modules/$.core').Object.setPrototypeOf;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:babel-runtime@5.8.34/core-js/object/set-prototype-of", ["npm:core-js@1.2.6/library/fn/object/set-prototype-of"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": $__require('npm:core-js@1.2.6/library/fn/object/set-prototype-of'),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/es6.object.to-string", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.add-to-unscopables", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function() {};
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.iter-step", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(done, value) {
    return {
      value: value,
      done: !!done
    };
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.iobject", ["npm:core-js@1.2.6/library/modules/$.cof"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var cof = $__require('npm:core-js@1.2.6/library/modules/$.cof');
  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it) {
    return cof(it) == 'String' ? it.split('') : Object(it);
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.to-iobject", ["npm:core-js@1.2.6/library/modules/$.iobject", "npm:core-js@1.2.6/library/modules/$.defined"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var IObject = $__require('npm:core-js@1.2.6/library/modules/$.iobject'),
      defined = $__require('npm:core-js@1.2.6/library/modules/$.defined');
  module.exports = function(it) {
    return IObject(defined(it));
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/es6.array.iterator", ["npm:core-js@1.2.6/library/modules/$.add-to-unscopables", "npm:core-js@1.2.6/library/modules/$.iter-step", "npm:core-js@1.2.6/library/modules/$.iterators", "npm:core-js@1.2.6/library/modules/$.to-iobject", "npm:core-js@1.2.6/library/modules/$.iter-define"], true, function($__require, exports, module) {
  "use strict";
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var addToUnscopables = $__require('npm:core-js@1.2.6/library/modules/$.add-to-unscopables'),
      step = $__require('npm:core-js@1.2.6/library/modules/$.iter-step'),
      Iterators = $__require('npm:core-js@1.2.6/library/modules/$.iterators'),
      toIObject = $__require('npm:core-js@1.2.6/library/modules/$.to-iobject');
  module.exports = $__require('npm:core-js@1.2.6/library/modules/$.iter-define')(Array, 'Array', function(iterated, kind) {
    this._t = toIObject(iterated);
    this._i = 0;
    this._k = kind;
  }, function() {
    var O = this._t,
        kind = this._k,
        index = this._i++;
    if (!O || index >= O.length) {
      this._t = undefined;
      return step(1);
    }
    if (kind == 'keys')
      return step(0, index);
    if (kind == 'values')
      return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');
  Iterators.Arguments = Iterators.Array;
  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/web.dom.iterable", ["npm:core-js@1.2.6/library/modules/es6.array.iterator", "npm:core-js@1.2.6/library/modules/$.iterators"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  $__require('npm:core-js@1.2.6/library/modules/es6.array.iterator');
  var Iterators = $__require('npm:core-js@1.2.6/library/modules/$.iterators');
  Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.strict-new", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(it, Constructor, name) {
    if (!(it instanceof Constructor))
      throw TypeError(name + ": use the 'new' operator!");
    return it;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.for-of", ["npm:core-js@1.2.6/library/modules/$.ctx", "npm:core-js@1.2.6/library/modules/$.iter-call", "npm:core-js@1.2.6/library/modules/$.is-array-iter", "npm:core-js@1.2.6/library/modules/$.an-object", "npm:core-js@1.2.6/library/modules/$.to-length", "npm:core-js@1.2.6/library/modules/core.get-iterator-method"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var ctx = $__require('npm:core-js@1.2.6/library/modules/$.ctx'),
      call = $__require('npm:core-js@1.2.6/library/modules/$.iter-call'),
      isArrayIter = $__require('npm:core-js@1.2.6/library/modules/$.is-array-iter'),
      anObject = $__require('npm:core-js@1.2.6/library/modules/$.an-object'),
      toLength = $__require('npm:core-js@1.2.6/library/modules/$.to-length'),
      getIterFn = $__require('npm:core-js@1.2.6/library/modules/core.get-iterator-method');
  module.exports = function(iterable, entries, fn, that) {
    var iterFn = getIterFn(iterable),
        f = ctx(fn, that, entries ? 2 : 1),
        index = 0,
        length,
        step,
        iterator;
    if (typeof iterFn != 'function')
      throw TypeError(iterable + ' is not iterable!');
    if (isArrayIter(iterFn))
      for (length = toLength(iterable.length); length > index; index++) {
        entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
      }
    else
      for (iterator = iterFn.call(iterable); !(step = iterator.next()).done; ) {
        call(iterator, f, step.value, entries);
      }
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.set-proto", ["npm:core-js@1.2.6/library/modules/$", "npm:core-js@1.2.6/library/modules/$.is-object", "npm:core-js@1.2.6/library/modules/$.an-object", "npm:core-js@1.2.6/library/modules/$.ctx"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var getDesc = $__require('npm:core-js@1.2.6/library/modules/$').getDesc,
      isObject = $__require('npm:core-js@1.2.6/library/modules/$.is-object'),
      anObject = $__require('npm:core-js@1.2.6/library/modules/$.an-object');
  var check = function(O, proto) {
    anObject(O);
    if (!isObject(proto) && proto !== null)
      throw TypeError(proto + ": can't set as prototype!");
  };
  module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? function(test, buggy, set) {
      try {
        set = $__require('npm:core-js@1.2.6/library/modules/$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) {
        buggy = true;
      }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy)
          O.__proto__ = proto;
        else
          set(O, proto);
        return O;
      };
    }({}, false) : undefined),
    check: check
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.same-value", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = Object.is || function is(x, y) {
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.species-constructor", ["npm:core-js@1.2.6/library/modules/$.an-object", "npm:core-js@1.2.6/library/modules/$.a-function", "npm:core-js@1.2.6/library/modules/$.wks"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var anObject = $__require('npm:core-js@1.2.6/library/modules/$.an-object'),
      aFunction = $__require('npm:core-js@1.2.6/library/modules/$.a-function'),
      SPECIES = $__require('npm:core-js@1.2.6/library/modules/$.wks')('species');
  module.exports = function(O, D) {
    var C = anObject(O).constructor,
        S;
    return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.invoke", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(fn, args, that) {
    var un = that === undefined;
    switch (args.length) {
      case 0:
        return un ? fn() : fn.call(that);
      case 1:
        return un ? fn(args[0]) : fn.call(that, args[0]);
      case 2:
        return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
      case 3:
        return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
      case 4:
        return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
    }
    return fn.apply(that, args);
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.html", ["npm:core-js@1.2.6/library/modules/$.global"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__require('npm:core-js@1.2.6/library/modules/$.global').document && document.documentElement;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.dom-create", ["npm:core-js@1.2.6/library/modules/$.is-object", "npm:core-js@1.2.6/library/modules/$.global"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var isObject = $__require('npm:core-js@1.2.6/library/modules/$.is-object'),
      document = $__require('npm:core-js@1.2.6/library/modules/$.global').document,
      is = isObject(document) && isObject(document.createElement);
  module.exports = function(it) {
    return is ? document.createElement(it) : {};
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.task", ["npm:core-js@1.2.6/library/modules/$.ctx", "npm:core-js@1.2.6/library/modules/$.invoke", "npm:core-js@1.2.6/library/modules/$.html", "npm:core-js@1.2.6/library/modules/$.dom-create", "npm:core-js@1.2.6/library/modules/$.global", "npm:core-js@1.2.6/library/modules/$.cof", "github:jspm/nodelibs-process@0.1.2"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    var ctx = $__require('npm:core-js@1.2.6/library/modules/$.ctx'),
        invoke = $__require('npm:core-js@1.2.6/library/modules/$.invoke'),
        html = $__require('npm:core-js@1.2.6/library/modules/$.html'),
        cel = $__require('npm:core-js@1.2.6/library/modules/$.dom-create'),
        global = $__require('npm:core-js@1.2.6/library/modules/$.global'),
        process = global.process,
        setTask = global.setImmediate,
        clearTask = global.clearImmediate,
        MessageChannel = global.MessageChannel,
        counter = 0,
        queue = {},
        ONREADYSTATECHANGE = 'onreadystatechange',
        defer,
        channel,
        port;
    var run = function() {
      var id = +this;
      if (queue.hasOwnProperty(id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
      }
    };
    var listner = function(event) {
      run.call(event.data);
    };
    if (!setTask || !clearTask) {
      setTask = function setImmediate(fn) {
        var args = [],
            i = 1;
        while (arguments.length > i)
          args.push(arguments[i++]);
        queue[++counter] = function() {
          invoke(typeof fn == 'function' ? fn : Function(fn), args);
        };
        defer(counter);
        return counter;
      };
      clearTask = function clearImmediate(id) {
        delete queue[id];
      };
      if ($__require('npm:core-js@1.2.6/library/modules/$.cof')(process) == 'process') {
        defer = function(id) {
          process.nextTick(ctx(run, id, 1));
        };
      } else if (MessageChannel) {
        channel = new MessageChannel;
        port = channel.port2;
        channel.port1.onmessage = listner;
        defer = ctx(port.postMessage, port, 1);
      } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
        defer = function(id) {
          global.postMessage(id + '', '*');
        };
        global.addEventListener('message', listner, false);
      } else if (ONREADYSTATECHANGE in cel('script')) {
        defer = function(id) {
          html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function() {
            html.removeChild(this);
            run.call(id);
          };
        };
      } else {
        defer = function(id) {
          setTimeout(ctx(run, id, 1), 0);
        };
      }
    }
    module.exports = {
      set: setTask,
      clear: clearTask
    };
  })($__require('github:jspm/nodelibs-process@0.1.2'));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.microtask", ["npm:core-js@1.2.6/library/modules/$.global", "npm:core-js@1.2.6/library/modules/$.task", "npm:core-js@1.2.6/library/modules/$.cof", "github:jspm/nodelibs-process@0.1.2"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    var global = $__require('npm:core-js@1.2.6/library/modules/$.global'),
        macrotask = $__require('npm:core-js@1.2.6/library/modules/$.task').set,
        Observer = global.MutationObserver || global.WebKitMutationObserver,
        process = global.process,
        Promise = global.Promise,
        isNode = $__require('npm:core-js@1.2.6/library/modules/$.cof')(process) == 'process',
        head,
        last,
        notify;
    var flush = function() {
      var parent,
          domain,
          fn;
      if (isNode && (parent = process.domain)) {
        process.domain = null;
        parent.exit();
      }
      while (head) {
        domain = head.domain;
        fn = head.fn;
        if (domain)
          domain.enter();
        fn();
        if (domain)
          domain.exit();
        head = head.next;
      }
      last = undefined;
      if (parent)
        parent.enter();
    };
    if (isNode) {
      notify = function() {
        process.nextTick(flush);
      };
    } else if (Observer) {
      var toggle = 1,
          node = document.createTextNode('');
      new Observer(flush).observe(node, {characterData: true});
      notify = function() {
        node.data = toggle = -toggle;
      };
    } else if (Promise && Promise.resolve) {
      notify = function() {
        Promise.resolve().then(flush);
      };
    } else {
      notify = function() {
        macrotask.call(global, flush);
      };
    }
    module.exports = function asap(fn) {
      var task = {
        fn: fn,
        next: undefined,
        domain: isNode && process.domain
      };
      if (last)
        last.next = task;
      if (!head) {
        head = task;
        notify();
      }
      last = task;
    };
  })($__require('github:jspm/nodelibs-process@0.1.2'));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.redefine-all", ["npm:core-js@1.2.6/library/modules/$.redefine"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var redefine = $__require('npm:core-js@1.2.6/library/modules/$.redefine');
  module.exports = function(target, src) {
    for (var key in src)
      redefine(target, key, src[key]);
    return target;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.set-species", ["npm:core-js@1.2.6/library/modules/$.core", "npm:core-js@1.2.6/library/modules/$", "npm:core-js@1.2.6/library/modules/$.descriptors", "npm:core-js@1.2.6/library/modules/$.wks"], true, function($__require, exports, module) {
  "use strict";
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var core = $__require('npm:core-js@1.2.6/library/modules/$.core'),
      $ = $__require('npm:core-js@1.2.6/library/modules/$'),
      DESCRIPTORS = $__require('npm:core-js@1.2.6/library/modules/$.descriptors'),
      SPECIES = $__require('npm:core-js@1.2.6/library/modules/$.wks')('species');
  module.exports = function(KEY) {
    var C = core[KEY];
    if (DESCRIPTORS && C && !C[SPECIES])
      $.setDesc(C, SPECIES, {
        configurable: true,
        get: function() {
          return this;
        }
      });
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/es6.promise", ["npm:core-js@1.2.6/library/modules/$", "npm:core-js@1.2.6/library/modules/$.library", "npm:core-js@1.2.6/library/modules/$.global", "npm:core-js@1.2.6/library/modules/$.ctx", "npm:core-js@1.2.6/library/modules/$.classof", "npm:core-js@1.2.6/library/modules/$.export", "npm:core-js@1.2.6/library/modules/$.is-object", "npm:core-js@1.2.6/library/modules/$.an-object", "npm:core-js@1.2.6/library/modules/$.a-function", "npm:core-js@1.2.6/library/modules/$.strict-new", "npm:core-js@1.2.6/library/modules/$.for-of", "npm:core-js@1.2.6/library/modules/$.set-proto", "npm:core-js@1.2.6/library/modules/$.same-value", "npm:core-js@1.2.6/library/modules/$.wks", "npm:core-js@1.2.6/library/modules/$.species-constructor", "npm:core-js@1.2.6/library/modules/$.microtask", "npm:core-js@1.2.6/library/modules/$.descriptors", "npm:core-js@1.2.6/library/modules/$.redefine-all", "npm:core-js@1.2.6/library/modules/$.set-to-string-tag", "npm:core-js@1.2.6/library/modules/$.set-species", "npm:core-js@1.2.6/library/modules/$.core", "npm:core-js@1.2.6/library/modules/$.iter-detect", "github:jspm/nodelibs-process@0.1.2"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var $ = $__require('npm:core-js@1.2.6/library/modules/$'),
        LIBRARY = $__require('npm:core-js@1.2.6/library/modules/$.library'),
        global = $__require('npm:core-js@1.2.6/library/modules/$.global'),
        ctx = $__require('npm:core-js@1.2.6/library/modules/$.ctx'),
        classof = $__require('npm:core-js@1.2.6/library/modules/$.classof'),
        $export = $__require('npm:core-js@1.2.6/library/modules/$.export'),
        isObject = $__require('npm:core-js@1.2.6/library/modules/$.is-object'),
        anObject = $__require('npm:core-js@1.2.6/library/modules/$.an-object'),
        aFunction = $__require('npm:core-js@1.2.6/library/modules/$.a-function'),
        strictNew = $__require('npm:core-js@1.2.6/library/modules/$.strict-new'),
        forOf = $__require('npm:core-js@1.2.6/library/modules/$.for-of'),
        setProto = $__require('npm:core-js@1.2.6/library/modules/$.set-proto').set,
        same = $__require('npm:core-js@1.2.6/library/modules/$.same-value'),
        SPECIES = $__require('npm:core-js@1.2.6/library/modules/$.wks')('species'),
        speciesConstructor = $__require('npm:core-js@1.2.6/library/modules/$.species-constructor'),
        asap = $__require('npm:core-js@1.2.6/library/modules/$.microtask'),
        PROMISE = 'Promise',
        process = global.process,
        isNode = classof(process) == 'process',
        P = global[PROMISE],
        Wrapper;
    var testResolve = function(sub) {
      var test = new P(function() {});
      if (sub)
        test.constructor = Object;
      return P.resolve(test) === test;
    };
    var USE_NATIVE = function() {
      var works = false;
      function P2(x) {
        var self = new P(x);
        setProto(self, P2.prototype);
        return self;
      }
      try {
        works = P && P.resolve && testResolve();
        setProto(P2, P);
        P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
        if (!(P2.resolve(5).then(function() {}) instanceof P2)) {
          works = false;
        }
        if (works && $__require('npm:core-js@1.2.6/library/modules/$.descriptors')) {
          var thenableThenGotten = false;
          P.resolve($.setDesc({}, 'then', {get: function() {
              thenableThenGotten = true;
            }}));
          works = thenableThenGotten;
        }
      } catch (e) {
        works = false;
      }
      return works;
    }();
    var sameConstructor = function(a, b) {
      if (LIBRARY && a === P && b === Wrapper)
        return true;
      return same(a, b);
    };
    var getConstructor = function(C) {
      var S = anObject(C)[SPECIES];
      return S != undefined ? S : C;
    };
    var isThenable = function(it) {
      var then;
      return isObject(it) && typeof(then = it.then) == 'function' ? then : false;
    };
    var PromiseCapability = function(C) {
      var resolve,
          reject;
      this.promise = new C(function($$resolve, $$reject) {
        if (resolve !== undefined || reject !== undefined)
          throw TypeError('Bad Promise constructor');
        resolve = $$resolve;
        reject = $$reject;
      });
      this.resolve = aFunction(resolve), this.reject = aFunction(reject);
    };
    var perform = function(exec) {
      try {
        exec();
      } catch (e) {
        return {error: e};
      }
    };
    var notify = function(record, isReject) {
      if (record.n)
        return;
      record.n = true;
      var chain = record.c;
      asap(function() {
        var value = record.v,
            ok = record.s == 1,
            i = 0;
        var run = function(reaction) {
          var handler = ok ? reaction.ok : reaction.fail,
              resolve = reaction.resolve,
              reject = reaction.reject,
              result,
              then;
          try {
            if (handler) {
              if (!ok)
                record.h = true;
              result = handler === true ? value : handler(value);
              if (result === reaction.promise) {
                reject(TypeError('Promise-chain cycle'));
              } else if (then = isThenable(result)) {
                then.call(result, resolve, reject);
              } else
                resolve(result);
            } else
              reject(value);
          } catch (e) {
            reject(e);
          }
        };
        while (chain.length > i)
          run(chain[i++]);
        chain.length = 0;
        record.n = false;
        if (isReject)
          setTimeout(function() {
            var promise = record.p,
                handler,
                console;
            if (isUnhandled(promise)) {
              if (isNode) {
                process.emit('unhandledRejection', value, promise);
              } else if (handler = global.onunhandledrejection) {
                handler({
                  promise: promise,
                  reason: value
                });
              } else if ((console = global.console) && console.error) {
                console.error('Unhandled promise rejection', value);
              }
            }
            record.a = undefined;
          }, 1);
      });
    };
    var isUnhandled = function(promise) {
      var record = promise._d,
          chain = record.a || record.c,
          i = 0,
          reaction;
      if (record.h)
        return false;
      while (chain.length > i) {
        reaction = chain[i++];
        if (reaction.fail || !isUnhandled(reaction.promise))
          return false;
      }
      return true;
    };
    var $reject = function(value) {
      var record = this;
      if (record.d)
        return;
      record.d = true;
      record = record.r || record;
      record.v = value;
      record.s = 2;
      record.a = record.c.slice();
      notify(record, true);
    };
    var $resolve = function(value) {
      var record = this,
          then;
      if (record.d)
        return;
      record.d = true;
      record = record.r || record;
      try {
        if (record.p === value)
          throw TypeError("Promise can't be resolved itself");
        if (then = isThenable(value)) {
          asap(function() {
            var wrapper = {
              r: record,
              d: false
            };
            try {
              then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
            } catch (e) {
              $reject.call(wrapper, e);
            }
          });
        } else {
          record.v = value;
          record.s = 1;
          notify(record, false);
        }
      } catch (e) {
        $reject.call({
          r: record,
          d: false
        }, e);
      }
    };
    if (!USE_NATIVE) {
      P = function Promise(executor) {
        aFunction(executor);
        var record = this._d = {
          p: strictNew(this, P, PROMISE),
          c: [],
          a: undefined,
          s: 0,
          d: false,
          v: undefined,
          h: false,
          n: false
        };
        try {
          executor(ctx($resolve, record, 1), ctx($reject, record, 1));
        } catch (err) {
          $reject.call(record, err);
        }
      };
      $__require('npm:core-js@1.2.6/library/modules/$.redefine-all')(P.prototype, {
        then: function then(onFulfilled, onRejected) {
          var reaction = new PromiseCapability(speciesConstructor(this, P)),
              promise = reaction.promise,
              record = this._d;
          reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
          reaction.fail = typeof onRejected == 'function' && onRejected;
          record.c.push(reaction);
          if (record.a)
            record.a.push(reaction);
          if (record.s)
            notify(record, false);
          return promise;
        },
        'catch': function(onRejected) {
          return this.then(undefined, onRejected);
        }
      });
    }
    $export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: P});
    $__require('npm:core-js@1.2.6/library/modules/$.set-to-string-tag')(P, PROMISE);
    $__require('npm:core-js@1.2.6/library/modules/$.set-species')(PROMISE);
    Wrapper = $__require('npm:core-js@1.2.6/library/modules/$.core')[PROMISE];
    $export($export.S + $export.F * !USE_NATIVE, PROMISE, {reject: function reject(r) {
        var capability = new PromiseCapability(this),
            $$reject = capability.reject;
        $$reject(r);
        return capability.promise;
      }});
    $export($export.S + $export.F * (!USE_NATIVE || testResolve(true)), PROMISE, {resolve: function resolve(x) {
        if (x instanceof P && sameConstructor(x.constructor, this))
          return x;
        var capability = new PromiseCapability(this),
            $$resolve = capability.resolve;
        $$resolve(x);
        return capability.promise;
      }});
    $export($export.S + $export.F * !(USE_NATIVE && $__require('npm:core-js@1.2.6/library/modules/$.iter-detect')(function(iter) {
      P.all(iter)['catch'](function() {});
    })), PROMISE, {
      all: function all(iterable) {
        var C = getConstructor(this),
            capability = new PromiseCapability(C),
            resolve = capability.resolve,
            reject = capability.reject,
            values = [];
        var abrupt = perform(function() {
          forOf(iterable, false, values.push, values);
          var remaining = values.length,
              results = Array(remaining);
          if (remaining)
            $.each.call(values, function(promise, index) {
              var alreadyCalled = false;
              C.resolve(promise).then(function(value) {
                if (alreadyCalled)
                  return;
                alreadyCalled = true;
                results[index] = value;
                --remaining || resolve(results);
              }, reject);
            });
          else
            resolve(results);
        });
        if (abrupt)
          reject(abrupt.error);
        return capability.promise;
      },
      race: function race(iterable) {
        var C = getConstructor(this),
            capability = new PromiseCapability(C),
            reject = capability.reject;
        var abrupt = perform(function() {
          forOf(iterable, false, function(promise) {
            C.resolve(promise).then(capability.resolve, reject);
          });
        });
        if (abrupt)
          reject(abrupt.error);
        return capability.promise;
      }
    });
  })($__require('github:jspm/nodelibs-process@0.1.2'));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/fn/promise", ["npm:core-js@1.2.6/library/modules/es6.object.to-string", "npm:core-js@1.2.6/library/modules/es6.string.iterator", "npm:core-js@1.2.6/library/modules/web.dom.iterable", "npm:core-js@1.2.6/library/modules/es6.promise", "npm:core-js@1.2.6/library/modules/$.core"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  $__require('npm:core-js@1.2.6/library/modules/es6.object.to-string');
  $__require('npm:core-js@1.2.6/library/modules/es6.string.iterator');
  $__require('npm:core-js@1.2.6/library/modules/web.dom.iterable');
  $__require('npm:core-js@1.2.6/library/modules/es6.promise');
  module.exports = $__require('npm:core-js@1.2.6/library/modules/$.core').Promise;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:babel-runtime@5.8.34/core-js/promise", ["npm:core-js@1.2.6/library/fn/promise"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": $__require('npm:core-js@1.2.6/library/fn/promise'),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:process@0.11.2/browser", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var process = module.exports = {};
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;
  function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
      queue = currentQueue.concat(queue);
    } else {
      queueIndex = -1;
    }
    if (queue.length) {
      drainQueue();
    }
  }
  function drainQueue() {
    if (draining) {
      return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while (len) {
      currentQueue = queue;
      queue = [];
      while (++queueIndex < len) {
        if (currentQueue) {
          currentQueue[queueIndex].run();
        }
      }
      queueIndex = -1;
      len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
  }
  process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
      setTimeout(drainQueue, 0);
    }
  };
  function Item(fun, array) {
    this.fun = fun;
    this.array = array;
  }
  Item.prototype.run = function() {
    this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = '';
  process.versions = {};
  function noop() {}
  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.binding = function(name) {
    throw new Error('process.binding is not supported');
  };
  process.cwd = function() {
    return '/';
  };
  process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
  };
  process.umask = function() {
    return 0;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:process@0.11.2", ["npm:process@0.11.2/browser"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__require('npm:process@0.11.2/browser');
  global.define = __define;
  return module.exports;
});

System.registerDynamic("github:jspm/nodelibs-process@0.1.2/index", ["npm:process@0.11.2"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = System._nodeRequire ? process : $__require('npm:process@0.11.2');
  global.define = __define;
  return module.exports;
});

System.registerDynamic("github:jspm/nodelibs-process@0.1.2", ["github:jspm/nodelibs-process@0.1.2/index"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__require('github:jspm/nodelibs-process@0.1.2/index');
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:babel-runtime@5.8.34/regenerator/runtime", ["npm:babel-runtime@5.8.34/core-js/symbol", "npm:babel-runtime@5.8.34/core-js/object/create", "npm:babel-runtime@5.8.34/core-js/object/set-prototype-of", "npm:babel-runtime@5.8.34/core-js/promise", "github:jspm/nodelibs-process@0.1.2"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    "use strict";
    var _Symbol = $__require('npm:babel-runtime@5.8.34/core-js/symbol')["default"];
    var _Object$create = $__require('npm:babel-runtime@5.8.34/core-js/object/create')["default"];
    var _Object$setPrototypeOf = $__require('npm:babel-runtime@5.8.34/core-js/object/set-prototype-of')["default"];
    var _Promise = $__require('npm:babel-runtime@5.8.34/core-js/promise')["default"];
    !(function(global) {
      "use strict";
      var hasOwn = Object.prototype.hasOwnProperty;
      var undefined;
      var $Symbol = typeof _Symbol === "function" ? _Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
      var inModule = typeof module === "object";
      var runtime = global.regeneratorRuntime;
      if (runtime) {
        if (inModule) {
          module.exports = runtime;
        }
        return;
      }
      runtime = global.regeneratorRuntime = inModule ? module.exports : {};
      function wrap(innerFn, outerFn, self, tryLocsList) {
        var generator = _Object$create((outerFn || Generator).prototype);
        var context = new Context(tryLocsList || []);
        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }
      runtime.wrap = wrap;
      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }
      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";
      var ContinueSentinel = {};
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          prototype[method] = function(arg) {
            return this._invoke(method, arg);
          };
        });
      }
      runtime.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };
      runtime.mark = function(genFun) {
        if (_Object$setPrototypeOf) {
          _Object$setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          if (!(toStringTagSymbol in genFun)) {
            genFun[toStringTagSymbol] = "GeneratorFunction";
          }
        }
        genFun.prototype = _Object$create(Gp);
        return genFun;
      };
      runtime.awrap = function(arg) {
        return new AwaitArgument(arg);
      };
      function AwaitArgument(arg) {
        this.arg = arg;
      }
      function AsyncIterator(generator) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value instanceof AwaitArgument) {
              return _Promise.resolve(value.arg).then(function(value) {
                invoke("next", value, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }
            return _Promise.resolve(value).then(function(unwrapped) {
              result.value = unwrapped;
              resolve(result);
            }, reject);
          }
        }
        if (typeof process === "object" && process.domain) {
          invoke = process.domain.bind(invoke);
        }
        var previousPromise;
        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new _Promise(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        this._invoke = enqueue;
      }
      defineIteratorMethods(AsyncIterator.prototype);
      runtime.async = function(innerFn, outerFn, self, tryLocsList) {
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
        return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
      };
      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }
          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }
            return doneResult();
          }
          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              if (method === "return" || method === "throw" && delegate.iterator[method] === undefined) {
                context.delegate = null;
                var returnMethod = delegate.iterator["return"];
                if (returnMethod) {
                  var record = tryCatch(returnMethod, delegate.iterator, arg);
                  if (record.type === "throw") {
                    method = "throw";
                    arg = record.arg;
                    continue;
                  }
                }
                if (method === "return") {
                  continue;
                }
              }
              var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);
              if (record.type === "throw") {
                context.delegate = null;
                method = "throw";
                arg = record.arg;
                continue;
              }
              method = "next";
              arg = undefined;
              var info = record.arg;
              if (info.done) {
                context[delegate.resultName] = info.value;
                context.next = delegate.nextLoc;
              } else {
                state = GenStateSuspendedYield;
                return info;
              }
              context.delegate = null;
            }
            if (method === "next") {
              if (state === GenStateSuspendedYield) {
                context.sent = arg;
              } else {
                context.sent = undefined;
              }
            } else if (method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw arg;
              }
              if (context.dispatchException(arg)) {
                method = "next";
                arg = undefined;
              }
            } else if (method === "return") {
              context.abrupt("return", arg);
            }
            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;
              var info = {
                value: record.arg,
                done: context.done
              };
              if (record.arg === ContinueSentinel) {
                if (context.delegate && method === "next") {
                  arg = undefined;
                }
              } else {
                return info;
              }
            } else if (record.type === "throw") {
              state = GenStateCompleted;
              method = "throw";
              arg = record.arg;
            }
          }
        };
      }
      defineIteratorMethods(Gp);
      Gp[iteratorSymbol] = function() {
        return this;
      };
      Gp[toStringTagSymbol] = "Generator";
      Gp.toString = function() {
        return "[object Generator]";
      };
      function pushTryEntry(locs) {
        var entry = {tryLoc: locs[0]};
        if (1 in locs) {
          entry.catchLoc = locs[1];
        }
        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
      }
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }
      function Context(tryLocsList) {
        this.tryEntries = [{tryLoc: "root"}];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }
      runtime.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();
        return function next() {
          while (keys.length) {
            var key = keys.pop();
            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }
          next.done = true;
          return next;
        };
      };
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }
          if (typeof iterable.next === "function") {
            return iterable;
          }
          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
                  while (++i < iterable.length) {
                    if (hasOwn.call(iterable, i)) {
                      next.value = iterable[i];
                      next.done = false;
                      return next;
                    }
                  }
                  next.value = undefined;
                  next.done = true;
                  return next;
                };
            return next.next = next;
          }
        }
        return {next: doneResult};
      }
      runtime.values = values;
      function doneResult() {
        return {
          value: undefined,
          done: true
        };
      }
      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          this.sent = undefined;
          this.done = false;
          this.delegate = null;
          this.tryEntries.forEach(resetTryEntry);
          if (!skipTempReset) {
            for (var name in this) {
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }
          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;
            return !!caught;
          }
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;
            if (entry.tryLoc === "root") {
              return handle("end");
            }
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            finallyEntry = null;
          }
          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;
          if (finallyEntry) {
            this.next = finallyEntry.finallyLoc;
          } else {
            this.complete(record);
          }
          return ContinueSentinel;
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }
          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = record.arg;
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };
          return ContinueSentinel;
        }
      };
    })(typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : undefined);
  })($__require('github:jspm/nodelibs-process@0.1.2'));
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:babel-runtime@5.8.34/regenerator/index", ["npm:babel-runtime@5.8.34/regenerator/runtime"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var g = typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this;
  var hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;
  var oldRuntime = hadRuntime && g.regeneratorRuntime;
  g.regeneratorRuntime = undefined;
  module.exports = $__require('npm:babel-runtime@5.8.34/regenerator/runtime');
  if (hadRuntime) {
    g.regeneratorRuntime = oldRuntime;
  } else {
    try {
      delete g.regeneratorRuntime;
    } catch (e) {
      g.regeneratorRuntime = undefined;
    }
  }
  module.exports = {
    "default": module.exports,
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:babel-runtime@5.8.34/regenerator", ["npm:babel-runtime@5.8.34/regenerator/index"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__require('npm:babel-runtime@5.8.34/regenerator/index');
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.string-at", ["npm:core-js@1.2.6/library/modules/$.to-integer", "npm:core-js@1.2.6/library/modules/$.defined"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var toInteger = $__require('npm:core-js@1.2.6/library/modules/$.to-integer'),
      defined = $__require('npm:core-js@1.2.6/library/modules/$.defined');
  module.exports = function(TO_STRING) {
    return function(that, pos) {
      var s = String(defined(that)),
          i = toInteger(pos),
          l = s.length,
          a,
          b;
      if (i < 0 || i >= l)
        return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.library", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = true;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.redefine", ["npm:core-js@1.2.6/library/modules/$.hide"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = $__require('npm:core-js@1.2.6/library/modules/$.hide');
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.property-desc", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.fails", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.descriptors", ["npm:core-js@1.2.6/library/modules/$.fails"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = !$__require('npm:core-js@1.2.6/library/modules/$.fails')(function() {
    return Object.defineProperty({}, 'a', {get: function() {
        return 7;
      }}).a != 7;
  });
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.hide", ["npm:core-js@1.2.6/library/modules/$", "npm:core-js@1.2.6/library/modules/$.property-desc", "npm:core-js@1.2.6/library/modules/$.descriptors"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $ = $__require('npm:core-js@1.2.6/library/modules/$'),
      createDesc = $__require('npm:core-js@1.2.6/library/modules/$.property-desc');
  module.exports = $__require('npm:core-js@1.2.6/library/modules/$.descriptors') ? function(object, key, value) {
    return $.setDesc(object, key, createDesc(1, value));
  } : function(object, key, value) {
    object[key] = value;
    return object;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.iter-create", ["npm:core-js@1.2.6/library/modules/$", "npm:core-js@1.2.6/library/modules/$.property-desc", "npm:core-js@1.2.6/library/modules/$.set-to-string-tag", "npm:core-js@1.2.6/library/modules/$.hide", "npm:core-js@1.2.6/library/modules/$.wks"], true, function($__require, exports, module) {
  "use strict";
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $ = $__require('npm:core-js@1.2.6/library/modules/$'),
      descriptor = $__require('npm:core-js@1.2.6/library/modules/$.property-desc'),
      setToStringTag = $__require('npm:core-js@1.2.6/library/modules/$.set-to-string-tag'),
      IteratorPrototype = {};
  $__require('npm:core-js@1.2.6/library/modules/$.hide')(IteratorPrototype, $__require('npm:core-js@1.2.6/library/modules/$.wks')('iterator'), function() {
    return this;
  });
  module.exports = function(Constructor, NAME, next) {
    Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
    setToStringTag(Constructor, NAME + ' Iterator');
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.has", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var hasOwnProperty = {}.hasOwnProperty;
  module.exports = function(it, key) {
    return hasOwnProperty.call(it, key);
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.set-to-string-tag", ["npm:core-js@1.2.6/library/modules/$", "npm:core-js@1.2.6/library/modules/$.has", "npm:core-js@1.2.6/library/modules/$.wks"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var def = $__require('npm:core-js@1.2.6/library/modules/$').setDesc,
      has = $__require('npm:core-js@1.2.6/library/modules/$.has'),
      TAG = $__require('npm:core-js@1.2.6/library/modules/$.wks')('toStringTag');
  module.exports = function(it, tag, stat) {
    if (it && !has(it = stat ? it : it.prototype, TAG))
      def(it, TAG, {
        configurable: true,
        value: tag
      });
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $Object = Object;
  module.exports = {
    create: $Object.create,
    getProto: $Object.getPrototypeOf,
    isEnum: {}.propertyIsEnumerable,
    getDesc: $Object.getOwnPropertyDescriptor,
    setDesc: $Object.defineProperty,
    setDescs: $Object.defineProperties,
    getKeys: $Object.keys,
    getNames: $Object.getOwnPropertyNames,
    getSymbols: $Object.getOwnPropertySymbols,
    each: [].forEach
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.iter-define", ["npm:core-js@1.2.6/library/modules/$.library", "npm:core-js@1.2.6/library/modules/$.export", "npm:core-js@1.2.6/library/modules/$.redefine", "npm:core-js@1.2.6/library/modules/$.hide", "npm:core-js@1.2.6/library/modules/$.has", "npm:core-js@1.2.6/library/modules/$.iterators", "npm:core-js@1.2.6/library/modules/$.iter-create", "npm:core-js@1.2.6/library/modules/$.set-to-string-tag", "npm:core-js@1.2.6/library/modules/$", "npm:core-js@1.2.6/library/modules/$.wks"], true, function($__require, exports, module) {
  "use strict";
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var LIBRARY = $__require('npm:core-js@1.2.6/library/modules/$.library'),
      $export = $__require('npm:core-js@1.2.6/library/modules/$.export'),
      redefine = $__require('npm:core-js@1.2.6/library/modules/$.redefine'),
      hide = $__require('npm:core-js@1.2.6/library/modules/$.hide'),
      has = $__require('npm:core-js@1.2.6/library/modules/$.has'),
      Iterators = $__require('npm:core-js@1.2.6/library/modules/$.iterators'),
      $iterCreate = $__require('npm:core-js@1.2.6/library/modules/$.iter-create'),
      setToStringTag = $__require('npm:core-js@1.2.6/library/modules/$.set-to-string-tag'),
      getProto = $__require('npm:core-js@1.2.6/library/modules/$').getProto,
      ITERATOR = $__require('npm:core-js@1.2.6/library/modules/$.wks')('iterator'),
      BUGGY = !([].keys && 'next' in [].keys()),
      FF_ITERATOR = '@@iterator',
      KEYS = 'keys',
      VALUES = 'values';
  var returnThis = function() {
    return this;
  };
  module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    $iterCreate(Constructor, NAME, next);
    var getMethod = function(kind) {
      if (!BUGGY && kind in proto)
        return proto[kind];
      switch (kind) {
        case KEYS:
          return function keys() {
            return new Constructor(this, kind);
          };
        case VALUES:
          return function values() {
            return new Constructor(this, kind);
          };
      }
      return function entries() {
        return new Constructor(this, kind);
      };
    };
    var TAG = NAME + ' Iterator',
        DEF_VALUES = DEFAULT == VALUES,
        VALUES_BUG = false,
        proto = Base.prototype,
        $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
        $default = $native || getMethod(DEFAULT),
        methods,
        key;
    if ($native) {
      var IteratorPrototype = getProto($default.call(new Base));
      setToStringTag(IteratorPrototype, TAG, true);
      if (!LIBRARY && has(proto, FF_ITERATOR))
        hide(IteratorPrototype, ITERATOR, returnThis);
      if (DEF_VALUES && $native.name !== VALUES) {
        VALUES_BUG = true;
        $default = function values() {
          return $native.call(this);
        };
      }
    }
    if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      hide(proto, ITERATOR, $default);
    }
    Iterators[NAME] = $default;
    Iterators[TAG] = returnThis;
    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: !DEF_VALUES ? $default : getMethod('entries')
      };
      if (FORCED)
        for (key in methods) {
          if (!(key in proto))
            redefine(proto, key, methods[key]);
        }
      else
        $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/es6.string.iterator", ["npm:core-js@1.2.6/library/modules/$.string-at", "npm:core-js@1.2.6/library/modules/$.iter-define"], true, function($__require, exports, module) {
  "use strict";
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var $at = $__require('npm:core-js@1.2.6/library/modules/$.string-at')(true);
  $__require('npm:core-js@1.2.6/library/modules/$.iter-define')(String, 'String', function(iterated) {
    this._t = String(iterated);
    this._i = 0;
  }, function() {
    var O = this._t,
        index = this._i,
        point;
    if (index >= O.length)
      return {
        value: undefined,
        done: true
      };
    point = $at(O, index);
    this._i += point.length;
    return {
      value: point,
      done: false
    };
  });
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.a-function", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(it) {
    if (typeof it != 'function')
      throw TypeError(it + ' is not a function!');
    return it;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.ctx", ["npm:core-js@1.2.6/library/modules/$.a-function"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var aFunction = $__require('npm:core-js@1.2.6/library/modules/$.a-function');
  module.exports = function(fn, that, length) {
    aFunction(fn);
    if (that === undefined)
      return fn;
    switch (length) {
      case 1:
        return function(a) {
          return fn.call(that, a);
        };
      case 2:
        return function(a, b) {
          return fn.call(that, a, b);
        };
      case 3:
        return function(a, b, c) {
          return fn.call(that, a, b, c);
        };
    }
    return function() {
      return fn.apply(that, arguments);
    };
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.export", ["npm:core-js@1.2.6/library/modules/$.global", "npm:core-js@1.2.6/library/modules/$.core", "npm:core-js@1.2.6/library/modules/$.ctx"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var global = $__require('npm:core-js@1.2.6/library/modules/$.global'),
      core = $__require('npm:core-js@1.2.6/library/modules/$.core'),
      ctx = $__require('npm:core-js@1.2.6/library/modules/$.ctx'),
      PROTOTYPE = 'prototype';
  var $export = function(type, name, source) {
    var IS_FORCED = type & $export.F,
        IS_GLOBAL = type & $export.G,
        IS_STATIC = type & $export.S,
        IS_PROTO = type & $export.P,
        IS_BIND = type & $export.B,
        IS_WRAP = type & $export.W,
        exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
        target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE],
        key,
        own,
        out;
    if (IS_GLOBAL)
      source = name;
    for (key in source) {
      own = !IS_FORCED && target && key in target;
      if (own && key in exports)
        continue;
      out = own ? target[key] : source[key];
      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] : IS_BIND && own ? ctx(out, global) : IS_WRAP && target[key] == out ? (function(C) {
        var F = function(param) {
          return this instanceof C ? new C(param) : C(param);
        };
        F[PROTOTYPE] = C[PROTOTYPE];
        return F;
      })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
      if (IS_PROTO)
        (exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
    }
  };
  $export.F = 1;
  $export.G = 2;
  $export.S = 4;
  $export.P = 8;
  $export.B = 16;
  $export.W = 32;
  module.exports = $export;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.defined", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(it) {
    if (it == undefined)
      throw TypeError("Can't call method on  " + it);
    return it;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.to-object", ["npm:core-js@1.2.6/library/modules/$.defined"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var defined = $__require('npm:core-js@1.2.6/library/modules/$.defined');
  module.exports = function(it) {
    return Object(defined(it));
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.is-object", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = function(it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.an-object", ["npm:core-js@1.2.6/library/modules/$.is-object"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var isObject = $__require('npm:core-js@1.2.6/library/modules/$.is-object');
  module.exports = function(it) {
    if (!isObject(it))
      throw TypeError(it + ' is not an object!');
    return it;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.iter-call", ["npm:core-js@1.2.6/library/modules/$.an-object"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var anObject = $__require('npm:core-js@1.2.6/library/modules/$.an-object');
  module.exports = function(iterator, fn, value, entries) {
    try {
      return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    } catch (e) {
      var ret = iterator['return'];
      if (ret !== undefined)
        anObject(ret.call(iterator));
      throw e;
    }
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.is-array-iter", ["npm:core-js@1.2.6/library/modules/$.iterators", "npm:core-js@1.2.6/library/modules/$.wks"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var Iterators = $__require('npm:core-js@1.2.6/library/modules/$.iterators'),
      ITERATOR = $__require('npm:core-js@1.2.6/library/modules/$.wks')('iterator'),
      ArrayProto = Array.prototype;
  module.exports = function(it) {
    return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.to-integer", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var ceil = Math.ceil,
      floor = Math.floor;
  module.exports = function(it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.to-length", ["npm:core-js@1.2.6/library/modules/$.to-integer"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var toInteger = $__require('npm:core-js@1.2.6/library/modules/$.to-integer'),
      min = Math.min;
  module.exports = function(it) {
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.cof", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var toString = {}.toString;
  module.exports = function(it) {
    return toString.call(it).slice(8, -1);
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.classof", ["npm:core-js@1.2.6/library/modules/$.cof", "npm:core-js@1.2.6/library/modules/$.wks"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var cof = $__require('npm:core-js@1.2.6/library/modules/$.cof'),
      TAG = $__require('npm:core-js@1.2.6/library/modules/$.wks')('toStringTag'),
      ARG = cof(function() {
        return arguments;
      }()) == 'Arguments';
  module.exports = function(it) {
    var O,
        T,
        B;
    return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof(T = (O = Object(it))[TAG]) == 'string' ? T : ARG ? cof(O) : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.iterators", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {};
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/core.get-iterator-method", ["npm:core-js@1.2.6/library/modules/$.classof", "npm:core-js@1.2.6/library/modules/$.wks", "npm:core-js@1.2.6/library/modules/$.iterators", "npm:core-js@1.2.6/library/modules/$.core"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var classof = $__require('npm:core-js@1.2.6/library/modules/$.classof'),
      ITERATOR = $__require('npm:core-js@1.2.6/library/modules/$.wks')('iterator'),
      Iterators = $__require('npm:core-js@1.2.6/library/modules/$.iterators');
  module.exports = $__require('npm:core-js@1.2.6/library/modules/$.core').getIteratorMethod = function(it) {
    if (it != undefined)
      return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.shared", ["npm:core-js@1.2.6/library/modules/$.global"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var global = $__require('npm:core-js@1.2.6/library/modules/$.global'),
      SHARED = '__core-js_shared__',
      store = global[SHARED] || (global[SHARED] = {});
  module.exports = function(key) {
    return store[key] || (store[key] = {});
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.uid", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var id = 0,
      px = Math.random();
  module.exports = function(key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.global", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  if (typeof __g == 'number')
    __g = global;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.wks", ["npm:core-js@1.2.6/library/modules/$.shared", "npm:core-js@1.2.6/library/modules/$.uid", "npm:core-js@1.2.6/library/modules/$.global"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var store = $__require('npm:core-js@1.2.6/library/modules/$.shared')('wks'),
      uid = $__require('npm:core-js@1.2.6/library/modules/$.uid'),
      Symbol = $__require('npm:core-js@1.2.6/library/modules/$.global').Symbol;
  module.exports = function(name) {
    return store[name] || (store[name] = Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.iter-detect", ["npm:core-js@1.2.6/library/modules/$.wks"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var ITERATOR = $__require('npm:core-js@1.2.6/library/modules/$.wks')('iterator'),
      SAFE_CLOSING = false;
  try {
    var riter = [7][ITERATOR]();
    riter['return'] = function() {
      SAFE_CLOSING = true;
    };
    Array.from(riter, function() {
      throw 2;
    });
  } catch (e) {}
  module.exports = function(exec, skipClosing) {
    if (!skipClosing && !SAFE_CLOSING)
      return false;
    var safe = false;
    try {
      var arr = [7],
          iter = arr[ITERATOR]();
      iter.next = function() {
        safe = true;
      };
      arr[ITERATOR] = function() {
        return iter;
      };
      exec(arr);
    } catch (e) {}
    return safe;
  };
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/es6.array.from", ["npm:core-js@1.2.6/library/modules/$.ctx", "npm:core-js@1.2.6/library/modules/$.export", "npm:core-js@1.2.6/library/modules/$.to-object", "npm:core-js@1.2.6/library/modules/$.iter-call", "npm:core-js@1.2.6/library/modules/$.is-array-iter", "npm:core-js@1.2.6/library/modules/$.to-length", "npm:core-js@1.2.6/library/modules/core.get-iterator-method", "npm:core-js@1.2.6/library/modules/$.iter-detect"], true, function($__require, exports, module) {
  "use strict";
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var ctx = $__require('npm:core-js@1.2.6/library/modules/$.ctx'),
      $export = $__require('npm:core-js@1.2.6/library/modules/$.export'),
      toObject = $__require('npm:core-js@1.2.6/library/modules/$.to-object'),
      call = $__require('npm:core-js@1.2.6/library/modules/$.iter-call'),
      isArrayIter = $__require('npm:core-js@1.2.6/library/modules/$.is-array-iter'),
      toLength = $__require('npm:core-js@1.2.6/library/modules/$.to-length'),
      getIterFn = $__require('npm:core-js@1.2.6/library/modules/core.get-iterator-method');
  $export($export.S + $export.F * !$__require('npm:core-js@1.2.6/library/modules/$.iter-detect')(function(iter) {
    Array.from(iter);
  }), 'Array', {from: function from(arrayLike) {
      var O = toObject(arrayLike),
          C = typeof this == 'function' ? this : Array,
          $$ = arguments,
          $$len = $$.length,
          mapfn = $$len > 1 ? $$[1] : undefined,
          mapping = mapfn !== undefined,
          index = 0,
          iterFn = getIterFn(O),
          length,
          result,
          step,
          iterator;
      if (mapping)
        mapfn = ctx(mapfn, $$len > 2 ? $$[2] : undefined, 2);
      if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
        for (iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++) {
          result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
        }
      } else {
        length = toLength(O.length);
        for (result = new C(length); length > index; index++) {
          result[index] = mapping ? mapfn(O[index], index) : O[index];
        }
      }
      result.length = index;
      return result;
    }});
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/modules/$.core", [], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  var core = module.exports = {version: '1.2.6'};
  if (typeof __e == 'number')
    __e = core;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:core-js@1.2.6/library/fn/array/from", ["npm:core-js@1.2.6/library/modules/es6.string.iterator", "npm:core-js@1.2.6/library/modules/es6.array.from", "npm:core-js@1.2.6/library/modules/$.core"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  $__require('npm:core-js@1.2.6/library/modules/es6.string.iterator');
  $__require('npm:core-js@1.2.6/library/modules/es6.array.from');
  module.exports = $__require('npm:core-js@1.2.6/library/modules/$.core').Array.from;
  global.define = __define;
  return module.exports;
});

System.registerDynamic("npm:babel-runtime@5.8.34/core-js/array/from", ["npm:core-js@1.2.6/library/fn/array/from"], true, function($__require, exports, module) {
  ;
  var global = this,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": $__require('npm:core-js@1.2.6/library/fn/array/from'),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register('yoctolib-es/yocto_api.js', ['npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/core-js/promise', 'npm:babel-runtime@5.8.34/regenerator', 'npm:babel-runtime@5.8.34/core-js/array/from'], function (_export) {
    var _classCallCheck, _createClass, _get, _inherits, _Promise, _regeneratorRuntime, _Array$from, YAPI_SUCCESS, YAPI_NOT_INITIALIZED, YAPI_INVALID_ARGUMENT, YAPI_NOT_SUPPORTED, YAPI_DEVICE_NOT_FOUND, YAPI_VERSION_MISMATCH, YAPI_DEVICE_BUSY, YAPI_TIMEOUT, YAPI_IO_ERROR, YAPI_NO_MORE_DATA, YAPI_EXHAUSTED, YAPI_DOUBLE_ACCES, YAPI_UNAUTHORIZED, YAPI_RTC_NOT_READY, YAPI_FILE_NOT_FOUND, YAPI_INVALID_INT, YAPI_INVALID_UINT, YAPI_INVALID_LONG, YAPI_INVALID_DOUBLE, YAPI_INVALID_STRING, Y_FUNCTIONDESCRIPTOR_INVALID, Y_HARDWAREID_INVALID, Y_FUNCTIONID_INVALID, Y_FRIENDLYNAME_INVALID, Y_LOGICALNAME_INVALID, Y_ADVERTISEDVALUE_INVALID, Y_PERSISTENTSETTINGS_LOADED, Y_PERSISTENTSETTINGS_SAVED, Y_PERSISTENTSETTINGS_MODIFIED, Y_PERSISTENTSETTINGS_INVALID, Y_BEACON_OFF, Y_BEACON_ON, Y_BEACON_INVALID, Y_PRODUCTNAME_INVALID, Y_SERIALNUMBER_INVALID, Y_PRODUCTID_INVALID, Y_PRODUCTRELEASE_INVALID, Y_FIRMWARERELEASE_INVALID, Y_LUMINOSITY_INVALID, Y_UPTIME_INVALID, Y_USBCURRENT_INVALID, Y_REBOOTCOUNTDOWN_INVALID, Y_USERVAR_INVALID, Y_UNIT_INVALID, Y_CURRENTVALUE_INVALID, Y_LOWESTVALUE_INVALID, Y_HIGHESTVALUE_INVALID, Y_CURRENTRAWVALUE_INVALID, Y_LOGFREQUENCY_INVALID, Y_REPORTFREQUENCY_INVALID, Y_CALIBRATIONPARAM_INVALID, Y_RESOLUTION_INVALID, Y_SENSORSTATE_INVALID, Y_DATA_INVALID, Y_DURATION_INVALID, Y_DETECT_NONE, Y_DETECT_USB, Y_DETECT_NET, Y_DETECT_ALL, YOCTO_CALIB_TYPE_OFS, NOTIFY_NETPKT_NAME, NOTIFY_NETPKT_CHILD, NOTIFY_NETPKT_FUNCNAME, NOTIFY_NETPKT_FUNCVAL, NOTIFY_NETPKT_LOG, NOTIFY_NETPKT_FUNCNAMEYDX, NOTIFY_NETPKT_FLUSHV2YDX, NOTIFY_NETPKT_FUNCV2YDX, NOTIFY_NETPKT_TIMEV2YDX, NOTIFY_NETPKT_DEVLOGYDX, NOTIFY_NETPKT_TIMEVALYDX, NOTIFY_NETPKT_FUNCVALYDX, NOTIFY_NETPKT_TIMEAVGYDX, NOTIFY_NETPKT_NOT_SYNC, NOTIFY_NETPKT_STOP, NOTIFY_V2_LEGACY, NOTIFY_V2_6RAWBYTES, NOTIFY_V2_TYPEDDATA, NOTIFY_V2_FLUSHGROUP, PUBVAL_LEGACY, PUBVAL_1RAWBYTE, PUBVAL_2RAWBYTES, PUBVAL_3RAWBYTES, PUBVAL_4RAWBYTES, PUBVAL_5RAWBYTES, PUBVAL_6RAWBYTES, PUBVAL_C_LONG, PUBVAL_C_FLOAT, PUBVAL_YOCTO_FLOAT_E3, PUBVAL_YOCTO_FLOAT_E6, YOCTO_PUBVAL_LEN, YOCTO_PUBVAL_SIZE, Y_BASETYPES, YErrorMsg, YFunctionType, YHTTPRequest, YFuncRequest, _YY_LoadVal, YDevice, YFirmwareUpdate, YFunction, YModule, YSensor, YMeasure, YDataStream, YDataSet, YGenericHub, YHttpHub, YHttpNodeHub, YHttpCallbackHub, YWebSocketHub, YWebSocketNodeHub, YWebSocketCallbackHub, YAPIContext, YAPI, yLinearCalibrationHandler;

    function yFindModule(func) {
        return YModule.FindModule(func);
    }

    function yFirstModule() {
        return YModule.FirstModule();
    }

    function yFindSensor(func) {
        return YSensor.FindSensor(func);
    }

    function yFirstSensor() {
        return YSensor.FirstSensor();
    }

    function yGetAPIVersion() {
        return YAPI.GetAPIVersion();
    }

    function yInitAPI(mode, errmsg) {
        return YAPI.InitAPI(mode, errmsg);
    }

    function yFreeAPI() {
        YAPI.FreeAPI();
    }

    function yDisableExceptions() {
        YAPI.DisableExceptions();
    }

    function yEnableExceptions() {
        YAPI.EnableExceptions();
    }

    function yRegisterHub(url, errmsg) {
        return YAPI.RegisterHub(url, errmsg);
    }

    function yPreregisterHub(url, errmsg) {
        return YAPI.PreregisterHub(url, errmsg);
    }

    function yUnregisterHub(url) {
        YAPI.UnregisterHub(url);
    }

    function yUpdateDeviceList(errmsg) {
        return YAPI.UpdateDeviceList(errmsg);
    }

    function yHandleEvents(errmsg) {
        return YAPI.HandleEvents(errmsg);
    }

    function ySleep(ms_duration, errmsg) {
        return YAPI.Sleep(ms_duration, errmsg);
    }

    function yGetTickCount() {
        return YAPI.GetTickCount();
    }

    function yCheckLogicalName(name) {
        return YAPI.CheckLogicalName(name);
    }

    function yRegisterDeviceArrivalCallback(arrivalCallback) {
        return YAPI.RegisterDeviceArrivalCallback(arrivalCallback);
    }

    function yRegisterDeviceChangeCallback(changeCallback) {
        return YAPI.RegisterDeviceChangeCallback(changeCallback);
    }

    function yRegisterDeviceRemovalCallback(removalCallback) {
        return YAPI.RegisterDeviceRemovalCallback(removalCallback);
    }

    function yRegisterCalibrationHandler(calibrationType, calibrationHandler) {
        return YAPI.RegisterCalibrationHandler(calibrationType, calibrationHandler);
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834CoreJsPromise) {
            _Promise = _npmBabelRuntime5834CoreJsPromise['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_npmBabelRuntime5834CoreJsArrayFrom) {
            _Array$from = _npmBabelRuntime5834CoreJsArrayFrom['default'];
        }],
        execute: function () {
            'use strict';

            _export('yFindModule', yFindModule);

            _export('yFirstModule', yFirstModule);

            _export('yFindSensor', yFindSensor);

            _export('yFirstSensor', yFirstSensor);

            _export('yGetAPIVersion', yGetAPIVersion);

            _export('yInitAPI', yInitAPI);

            _export('yFreeAPI', yFreeAPI);

            _export('yDisableExceptions', yDisableExceptions);

            _export('yEnableExceptions', yEnableExceptions);

            _export('yRegisterHub', yRegisterHub);

            _export('yPreregisterHub', yPreregisterHub);

            _export('yUnregisterHub', yUnregisterHub);

            _export('yUpdateDeviceList', yUpdateDeviceList);

            _export('yHandleEvents', yHandleEvents);

            _export('ySleep', ySleep);

            _export('yGetTickCount', yGetTickCount);

            _export('yCheckLogicalName', yCheckLogicalName);

            _export('yRegisterDeviceArrivalCallback', yRegisterDeviceArrivalCallback);

            _export('yRegisterDeviceChangeCallback', yRegisterDeviceChangeCallback);

            _export('yRegisterDeviceRemovalCallback', yRegisterDeviceRemovalCallback);

            _export('yRegisterCalibrationHandler', yRegisterCalibrationHandler);

            YAPI_SUCCESS = 0;

            _export('YAPI_SUCCESS', YAPI_SUCCESS);

            YAPI_NOT_INITIALIZED = -1;

            _export('YAPI_NOT_INITIALIZED', YAPI_NOT_INITIALIZED);

            YAPI_INVALID_ARGUMENT = -2;

            _export('YAPI_INVALID_ARGUMENT', YAPI_INVALID_ARGUMENT);

            YAPI_NOT_SUPPORTED = -3;

            _export('YAPI_NOT_SUPPORTED', YAPI_NOT_SUPPORTED);

            YAPI_DEVICE_NOT_FOUND = -4;

            _export('YAPI_DEVICE_NOT_FOUND', YAPI_DEVICE_NOT_FOUND);

            YAPI_VERSION_MISMATCH = -5;

            _export('YAPI_VERSION_MISMATCH', YAPI_VERSION_MISMATCH);

            YAPI_DEVICE_BUSY = -6;

            _export('YAPI_DEVICE_BUSY', YAPI_DEVICE_BUSY);

            YAPI_TIMEOUT = -7;

            _export('YAPI_TIMEOUT', YAPI_TIMEOUT);

            YAPI_IO_ERROR = -8;

            _export('YAPI_IO_ERROR', YAPI_IO_ERROR);

            YAPI_NO_MORE_DATA = -9;

            _export('YAPI_NO_MORE_DATA', YAPI_NO_MORE_DATA);

            YAPI_EXHAUSTED = -10;

            _export('YAPI_EXHAUSTED', YAPI_EXHAUSTED);

            YAPI_DOUBLE_ACCES = -11;

            _export('YAPI_DOUBLE_ACCES', YAPI_DOUBLE_ACCES);

            YAPI_UNAUTHORIZED = -12;

            _export('YAPI_UNAUTHORIZED', YAPI_UNAUTHORIZED);

            YAPI_RTC_NOT_READY = -13;

            _export('YAPI_RTC_NOT_READY', YAPI_RTC_NOT_READY);

            YAPI_FILE_NOT_FOUND = -14;

            _export('YAPI_FILE_NOT_FOUND', YAPI_FILE_NOT_FOUND);

            YAPI_INVALID_INT = 0x7fffffff;

            _export('YAPI_INVALID_INT', YAPI_INVALID_INT);

            YAPI_INVALID_UINT = -1;

            _export('YAPI_INVALID_UINT', YAPI_INVALID_UINT);

            YAPI_INVALID_LONG = 0x7fffffffffffffff;

            _export('YAPI_INVALID_LONG', YAPI_INVALID_LONG);

            YAPI_INVALID_DOUBLE = -Number.MAX_VALUE;

            _export('YAPI_INVALID_DOUBLE', YAPI_INVALID_DOUBLE);

            YAPI_INVALID_STRING = '!INVALID!';

            _export('YAPI_INVALID_STRING', YAPI_INVALID_STRING);

            Y_FUNCTIONDESCRIPTOR_INVALID = YAPI_INVALID_STRING;

            _export('Y_FUNCTIONDESCRIPTOR_INVALID', Y_FUNCTIONDESCRIPTOR_INVALID);

            Y_HARDWAREID_INVALID = YAPI_INVALID_STRING;

            _export('Y_HARDWAREID_INVALID', Y_HARDWAREID_INVALID);

            Y_FUNCTIONID_INVALID = YAPI_INVALID_STRING;

            _export('Y_FUNCTIONID_INVALID', Y_FUNCTIONID_INVALID);

            Y_FRIENDLYNAME_INVALID = YAPI_INVALID_STRING;

            _export('Y_FRIENDLYNAME_INVALID', Y_FRIENDLYNAME_INVALID);

            Y_LOGICALNAME_INVALID = YAPI_INVALID_STRING;

            _export('Y_LOGICALNAME_INVALID', Y_LOGICALNAME_INVALID);

            Y_ADVERTISEDVALUE_INVALID = YAPI_INVALID_STRING;

            _export('Y_ADVERTISEDVALUE_INVALID', Y_ADVERTISEDVALUE_INVALID);

            Y_PERSISTENTSETTINGS_LOADED = 0;

            _export('Y_PERSISTENTSETTINGS_LOADED', Y_PERSISTENTSETTINGS_LOADED);

            Y_PERSISTENTSETTINGS_SAVED = 1;

            _export('Y_PERSISTENTSETTINGS_SAVED', Y_PERSISTENTSETTINGS_SAVED);

            Y_PERSISTENTSETTINGS_MODIFIED = 2;

            _export('Y_PERSISTENTSETTINGS_MODIFIED', Y_PERSISTENTSETTINGS_MODIFIED);

            Y_PERSISTENTSETTINGS_INVALID = -1;

            _export('Y_PERSISTENTSETTINGS_INVALID', Y_PERSISTENTSETTINGS_INVALID);

            Y_BEACON_OFF = 0;

            _export('Y_BEACON_OFF', Y_BEACON_OFF);

            Y_BEACON_ON = 1;

            _export('Y_BEACON_ON', Y_BEACON_ON);

            Y_BEACON_INVALID = -1;

            _export('Y_BEACON_INVALID', Y_BEACON_INVALID);

            Y_PRODUCTNAME_INVALID = YAPI_INVALID_STRING;

            _export('Y_PRODUCTNAME_INVALID', Y_PRODUCTNAME_INVALID);

            Y_SERIALNUMBER_INVALID = YAPI_INVALID_STRING;

            _export('Y_SERIALNUMBER_INVALID', Y_SERIALNUMBER_INVALID);

            Y_PRODUCTID_INVALID = YAPI_INVALID_UINT;

            _export('Y_PRODUCTID_INVALID', Y_PRODUCTID_INVALID);

            Y_PRODUCTRELEASE_INVALID = YAPI_INVALID_UINT;

            _export('Y_PRODUCTRELEASE_INVALID', Y_PRODUCTRELEASE_INVALID);

            Y_FIRMWARERELEASE_INVALID = YAPI_INVALID_STRING;

            _export('Y_FIRMWARERELEASE_INVALID', Y_FIRMWARERELEASE_INVALID);

            Y_LUMINOSITY_INVALID = YAPI_INVALID_UINT;

            _export('Y_LUMINOSITY_INVALID', Y_LUMINOSITY_INVALID);

            Y_UPTIME_INVALID = YAPI_INVALID_LONG;

            _export('Y_UPTIME_INVALID', Y_UPTIME_INVALID);

            Y_USBCURRENT_INVALID = YAPI_INVALID_UINT;

            _export('Y_USBCURRENT_INVALID', Y_USBCURRENT_INVALID);

            Y_REBOOTCOUNTDOWN_INVALID = YAPI_INVALID_INT;

            _export('Y_REBOOTCOUNTDOWN_INVALID', Y_REBOOTCOUNTDOWN_INVALID);

            Y_USERVAR_INVALID = YAPI_INVALID_INT;

            _export('Y_USERVAR_INVALID', Y_USERVAR_INVALID);

            Y_UNIT_INVALID = YAPI_INVALID_STRING;

            _export('Y_UNIT_INVALID', Y_UNIT_INVALID);

            Y_CURRENTVALUE_INVALID = YAPI_INVALID_DOUBLE;

            _export('Y_CURRENTVALUE_INVALID', Y_CURRENTVALUE_INVALID);

            Y_LOWESTVALUE_INVALID = YAPI_INVALID_DOUBLE;

            _export('Y_LOWESTVALUE_INVALID', Y_LOWESTVALUE_INVALID);

            Y_HIGHESTVALUE_INVALID = YAPI_INVALID_DOUBLE;

            _export('Y_HIGHESTVALUE_INVALID', Y_HIGHESTVALUE_INVALID);

            Y_CURRENTRAWVALUE_INVALID = YAPI_INVALID_DOUBLE;

            _export('Y_CURRENTRAWVALUE_INVALID', Y_CURRENTRAWVALUE_INVALID);

            Y_LOGFREQUENCY_INVALID = YAPI_INVALID_STRING;

            _export('Y_LOGFREQUENCY_INVALID', Y_LOGFREQUENCY_INVALID);

            Y_REPORTFREQUENCY_INVALID = YAPI_INVALID_STRING;

            _export('Y_REPORTFREQUENCY_INVALID', Y_REPORTFREQUENCY_INVALID);

            Y_CALIBRATIONPARAM_INVALID = YAPI_INVALID_STRING;

            _export('Y_CALIBRATIONPARAM_INVALID', Y_CALIBRATIONPARAM_INVALID);

            Y_RESOLUTION_INVALID = YAPI_INVALID_DOUBLE;

            _export('Y_RESOLUTION_INVALID', Y_RESOLUTION_INVALID);

            Y_SENSORSTATE_INVALID = YAPI_INVALID_INT;

            _export('Y_SENSORSTATE_INVALID', Y_SENSORSTATE_INVALID);

            Y_DATA_INVALID = YAPI_INVALID_DOUBLE;

            _export('Y_DATA_INVALID', Y_DATA_INVALID);

            Y_DURATION_INVALID = YAPI_INVALID_INT;

            _export('Y_DURATION_INVALID', Y_DURATION_INVALID);

            Y_DETECT_NONE = 0;

            _export('Y_DETECT_NONE', Y_DETECT_NONE);

            Y_DETECT_USB = 1;

            _export('Y_DETECT_USB', Y_DETECT_USB);

            Y_DETECT_NET = 2;

            _export('Y_DETECT_NET', Y_DETECT_NET);

            Y_DETECT_ALL = Y_DETECT_USB | Y_DETECT_NET;

            _export('Y_DETECT_ALL', Y_DETECT_ALL);

            YOCTO_CALIB_TYPE_OFS = 30;
            NOTIFY_NETPKT_NAME = '0';
            NOTIFY_NETPKT_CHILD = '2';
            NOTIFY_NETPKT_FUNCNAME = '4';
            NOTIFY_NETPKT_FUNCVAL = '5';
            NOTIFY_NETPKT_LOG = '7';
            NOTIFY_NETPKT_FUNCNAMEYDX = '8';
            NOTIFY_NETPKT_FLUSHV2YDX = 't';
            NOTIFY_NETPKT_FUNCV2YDX = 'u';
            NOTIFY_NETPKT_TIMEV2YDX = 'v';
            NOTIFY_NETPKT_DEVLOGYDX = 'w';
            NOTIFY_NETPKT_TIMEVALYDX = 'x';
            NOTIFY_NETPKT_FUNCVALYDX = 'y';
            NOTIFY_NETPKT_TIMEAVGYDX = 'z';
            NOTIFY_NETPKT_NOT_SYNC = '@';
            NOTIFY_NETPKT_STOP = 10;
            NOTIFY_V2_LEGACY = 0;
            NOTIFY_V2_6RAWBYTES = 1;
            NOTIFY_V2_TYPEDDATA = 2;
            NOTIFY_V2_FLUSHGROUP = 3;
            PUBVAL_LEGACY = 0;
            PUBVAL_1RAWBYTE = 1;
            PUBVAL_2RAWBYTES = 2;
            PUBVAL_3RAWBYTES = 3;
            PUBVAL_4RAWBYTES = 4;
            PUBVAL_5RAWBYTES = 5;
            PUBVAL_6RAWBYTES = 6;
            PUBVAL_C_LONG = 7;
            PUBVAL_C_FLOAT = 8;
            PUBVAL_YOCTO_FLOAT_E3 = 9;
            PUBVAL_YOCTO_FLOAT_E6 = 10;
            YOCTO_PUBVAL_LEN = 16;
            YOCTO_PUBVAL_SIZE = 6;
            Y_BASETYPES = { Function: 0, Sensor: 1 };

            YErrorMsg = function YErrorMsg() {
                var str_msg = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

                _classCallCheck(this, YErrorMsg);

                this.msg = str_msg;
            };

            _export('YErrorMsg', YErrorMsg);

            YFunctionType = (function () {
                function YFunctionType(obj_yapi, str_classname) {
                    _classCallCheck(this, YFunctionType);

                    this._yapi = obj_yapi;

                    this._className = str_classname;

                    this._connectedFns = {};
                    this._requestedFns = {};
                    this._hwIdByName = {};
                    this._nameByHwId = {};
                    this._valueByHwId = {};
                    this._baseType = 0;
                }

                _createClass(YFunctionType, [{
                    key: 'imm_reindexFunction',
                    value: function imm_reindexFunction(str_hwid, str_name, str_val, int_basetype) {
                        var currname = this._nameByHwId[str_hwid];
                        var res = false;
                        if (currname == undefined || currname == '') {
                            if (str_name != '') {
                                this._nameByHwId[str_hwid] = str_name;
                                res = true;
                            }
                        } else if (currname != str_name) {
                            if (this._hwIdByName[currname] == str_hwid) delete this._hwIdByName[currname];
                            if (str_name != '') {
                                this._nameByHwId[str_hwid] = str_name;
                            } else {
                                delete this._nameByHwId[str_hwid];
                            }
                            res = true;
                        }
                        if (str_name != '') {
                            this._hwIdByName[str_name] = str_hwid;
                        }
                        if (str_val != undefined) {
                            this._valueByHwId[str_hwid] = str_val;
                        } else {
                            if (this._valueByHwId[str_hwid] == undefined) {
                                this._valueByHwId[str_hwid] = '';
                            }
                        }
                        if (int_basetype != undefined) {
                            if (this._baseType == 0) {
                                this._baseType = int_basetype;
                            }
                        }
                        return res;
                    }
                }, {
                    key: 'imm_forgetFunction',
                    value: function imm_forgetFunction(str_hwid) {
                        var currname = this._nameByHwId[str_hwid];
                        if (currname != undefined) {
                            if (currname != '' && this._hwIdByName[currname] == str_hwid) {
                                delete this._hwIdByName[currname];
                            }
                            delete this._nameByHwId[str_hwid];
                        }
                        if (this._valueByHwId[str_hwid] != undefined) {
                            delete this._valueByHwId[str_hwid];
                        }
                    }
                }, {
                    key: 'imm_resolve',
                    value: function imm_resolve(str_func) {
                        var dotpos = str_func.indexOf('.');
                        var res;
                        if (dotpos < 0) {
                            res = this._hwIdByName[str_func];
                            if (res != undefined) {
                                return { errorType: YAPI_SUCCESS,
                                    errorMsg: 'no error',
                                    result: String(res) };
                            }

                            dotpos = str_func.length;
                            str_func += '.' + this._className.substr(0, 1).toLowerCase() + this._className.substr(1);
                        }

                        if (this._valueByHwId[str_func] != undefined) {
                            return { errorType: YAPI_SUCCESS,
                                errorMsg: 'no error',
                                result: String(str_func) };
                        }
                        if (dotpos > 0) {
                            var devid = str_func.substr(0, dotpos);
                            var funcid = str_func.substr(dotpos + 1);
                            var dev = this._yapi.imm_getDevice(devid);
                            if (!dev) {
                                return { errorType: YAPI_DEVICE_NOT_FOUND,
                                    errorMsg: 'Device [' + devid + '] not online',
                                    result: null };
                            }
                            var serial = dev.imm_getSerialNumber();
                            res = serial + '.' + funcid;
                            if (this._valueByHwId[res] != undefined) {
                                return { errorType: YAPI_SUCCESS,
                                    errorMsg: 'no error',
                                    result: String(res) };
                            }

                            var i,
                                nfun = dev.imm_functionCount();
                            for (i = 0; i < nfun; i++) {
                                res = serial + '.' + dev.imm_functionId(i);
                                var name = this._nameByHwId[res];
                                if (name != undefined && name == funcid) {
                                    return { errorType: YAPI_SUCCESS,
                                        errorMsg: 'no error',
                                        result: String(res) };
                                }
                            }
                        } else {
                            funcid = str_func.substr(1);
                            for (var hwid_str in this._connectedFns) {
                                var pos = hwid_str.indexOf('.');
                                var str_function = hwid_str.substr(pos + 1);
                                if (str_function == funcid) {
                                    return { errorType: YAPI_SUCCESS,
                                        errorMsg: 'no error',
                                        result: String(hwid_str) };
                                }
                            }
                        }
                        return { errorType: YAPI_DEVICE_NOT_FOUND,
                            errorMsg: 'No function [' + funcid + '] found on device [' + serial + ']',
                            result: null };
                    }
                }, {
                    key: 'imm_getFriendlyName',
                    value: function imm_getFriendlyName(str_func) {
                        var resolved = this.imm_resolve(str_func);
                        var name;
                        if (resolved.errorType != YAPI_SUCCESS) {
                            return resolved;
                        }
                        if (this._className == 'Module') {
                            var friend = resolved.result;
                            name = this._nameByHwId[resolved.result];
                            if (name != undefined && name != '') {
                                friend = this._nameByHwId[resolved.result];
                            }
                            return { errorType: YAPI_SUCCESS,
                                errorMsg: 'no error',
                                result: String(friend) };
                        } else {
                            var pos = resolved.result.indexOf('.');
                            var str_serialMod = resolved.result.substr(0, pos);
                            var str_friendModFull = this._yapi.imm_getFriendlyNameFunction('Module', str_serialMod).result;
                            var int_friendModDot = str_friendModFull.indexOf('.');
                            var str_friendMod = int_friendModDot > 0 ? str_friendModFull.substr(0, int_friendModDot) : str_friendModFull;
                            var str_friendFunc = resolved.result.substr(pos + 1);
                            name = this._nameByHwId[resolved.result];
                            if (name != undefined && name != '') {
                                str_friendFunc = name;
                            }
                            return { errorType: YAPI_SUCCESS,
                                errorMsg: 'no error',
                                result: String(str_friendMod + '.' + str_friendFunc) };
                        }
                    }
                }, {
                    key: 'imm_setFunction',
                    value: function imm_setFunction(str_func, obj_func) {
                        var funres = this.imm_resolve(str_func);
                        if (funres.result != undefined) {
                            this._connectedFns[funres.result] = obj_func;
                        } else {
                            this._requestedFns[str_func] = obj_func;
                        }
                    }
                }, {
                    key: 'imm_getFunction',
                    value: function imm_getFunction(str_func) {
                        var funres = this.imm_resolve(str_func);
                        if (funres.errorType == YAPI_SUCCESS) {
                            var conn_fn = this._connectedFns[funres.result];
                            if (conn_fn != undefined) return conn_fn;

                            var req_fn = this._requestedFns[str_func];
                            if (req_fn != undefined) {
                                this._connectedFns[funres.result] = req_fn;
                                delete this._requestedFns[str_func];
                            }
                            return req_fn;
                        } else {
                            return this._requestedFns[str_func];
                        }
                    }
                }, {
                    key: 'imm_setFunctionValue',
                    value: function imm_setFunctionValue(str_hwid, str_pubval) {
                        var currval = this._valueByHwId[str_hwid];
                        if (!(currval == undefined) && currval == str_pubval) {
                            return false;
                        }
                        this._valueByHwId[str_hwid] = str_pubval;
                        return true;
                    }
                }, {
                    key: 'imm_getFunctionValue',
                    value: function imm_getFunctionValue(str_hwid) {
                        return this._valueByHwId[str_hwid];
                    }
                }, {
                    key: 'imm_getBaseType',
                    value: function imm_getBaseType() {
                        return this._baseType;
                    }
                }, {
                    key: 'imm_getFirstHardwareId',
                    value: function imm_getFirstHardwareId() {
                        var res = null;

                        for (res in this._valueByHwId) break;
                        return res;
                    }
                }, {
                    key: 'imm_getNextHardwareId',
                    value: function imm_getNextHardwareId(str_hwid) {
                        for (var iter_hwid in this._valueByHwId) {
                            if (str_hwid == '!') return iter_hwid;
                            if (str_hwid == iter_hwid) str_hwid = '!';
                        }
                        return null;
                    }
                }]);

                return YFunctionType;
            })();

            YHTTPRequest = function YHTTPRequest(bin_res) {
                var int_errType = arguments.length <= 1 || arguments[1] === undefined ? YAPI_SUCCESS : arguments[1];
                var str_errMsg = arguments.length <= 2 || arguments[2] === undefined ? 'no error' : arguments[2];

                _classCallCheck(this, YHTTPRequest);

                this.bin_result = bin_res;

                this.errorType = int_errType;

                this.errorMsg = str_errMsg;

                this.acceptor = null;
            };

            YFuncRequest = function YFuncRequest(obj_res) {
                var int_errType = arguments.length <= 1 || arguments[1] === undefined ? YAPI_SUCCESS : arguments[1];
                var str_errMsg = arguments.length <= 2 || arguments[2] === undefined ? 'no error' : arguments[2];

                _classCallCheck(this, YFuncRequest);

                this.obj_result = obj_res;

                this.errorType = int_errType;

                this.errorMsg = str_errMsg;
            };

            _YY_LoadVal = function _YY_LoadVal() {
                _classCallCheck(this, _YY_LoadVal);

                this.serialNumber = '';

                this.logicalName = '';

                this.productName = '';

                this.productId = 0;

                this.beacon = 0;

                this.services = {
                    whitePages: [{ networkUrl: '' }],
                    yellowPages: []
                };

                this.calib = '';

                this.unit = '';

                this.cal = '';

                this.streams = [];

                this.statusCode = 0;
            };

            YDevice = (function () {
                function YDevice(obj_yapi, str_rooturl, obj_wpRec, obj_ypRecs) {
                    _classCallCheck(this, YDevice);

                    this._yapi = obj_yapi;

                    this._rootUrl = str_rooturl;

                    this._serialNumber = '';

                    this._logicalName = '';

                    this._productName = '';

                    this._productId = 0;

                    this._beacon = 0;

                    this._devYdx = -1;

                    this._lastErrorType = YAPI_SUCCESS;

                    this._lastErrorMsg = 'no error';

                    this._cache = { _expiration: 0, _json: new Uint8Array(0) };

                    this._functions = [];

                    this._busy = 0;

                    this._pendingQueries = _Promise.resolve();

                    this._deviceTime = 0;

                    if (obj_wpRec != undefined) {
                        this._serialNumber = obj_wpRec.serialNumber;
                        this._logicalName = obj_wpRec.logicalName;
                        this._productName = obj_wpRec.productName;
                        this._productId = obj_wpRec.productId;
                        this._beacon = obj_wpRec.beacon;
                        this._devYdx = obj_wpRec.index == undefined ? -1 : obj_wpRec.index;
                        this.imm_updateFromYP(obj_ypRecs);
                        this._yapi.imm_reindexDevice(this);
                    }
                }

                _createClass(YDevice, [{
                    key: '_throw',
                    value: function _throw(int_errType, str_errMsg, obj_retVal) {
                        this._lastErrorType = int_errType;
                        this._lastErrorMsg = str_errMsg;
                        this._yapi._throw(int_errType, str_errMsg, obj_retVal);
                    }
                }, {
                    key: 'imm_getRootUrl',
                    value: function imm_getRootUrl() {
                        return this._rootUrl;
                    }
                }, {
                    key: 'imm_getSerialNumber',
                    value: function imm_getSerialNumber() {
                        return this._serialNumber;
                    }
                }, {
                    key: 'imm_getLogicalName',
                    value: function imm_getLogicalName() {
                        return this._logicalName;
                    }
                }, {
                    key: 'imm_getProductName',
                    value: function imm_getProductName() {
                        return this._productName;
                    }
                }, {
                    key: 'imm_getProductId',
                    value: function imm_getProductId() {
                        return this._productId;
                    }
                }, {
                    key: 'imm_getBeacon',
                    value: function imm_getBeacon() {
                        return this._beacon;
                    }
                }, {
                    key: 'imm_getDeviceTime',
                    value: function imm_getDeviceTime() {
                        return this._deviceTime;
                    }
                }, {
                    key: 'imm_setDeviceTime',
                    value: function imm_setDeviceTime(float_timestamp) {
                        this._deviceTime = float_timestamp;
                    }
                }, {
                    key: 'imm_getDevYdx',
                    value: function imm_getDevYdx() {
                        return this._devYdx;
                    }
                }, {
                    key: 'imm_describe',
                    value: function imm_describe() {
                        var res = this._rootUrl;
                        if (this._serialNumber != '') {
                            res = this._serialNumber;
                            if (this._logicalName != '') {
                                res = res + ' (' + this._logicalName + ')';
                            }
                        }
                        return this._productName + ' ' + res;
                    }
                }, {
                    key: 'imm_updateFromYP',
                    value: function imm_updateFromYP(obj_ypRecs) {
                        var funidx = 0;
                        for (var categ in obj_ypRecs) {
                            for (var key in obj_ypRecs[categ]) {
                                var rec = obj_ypRecs[categ][key];
                                var hwid = rec['hardwareId'];
                                var dotpos = hwid.indexOf('.');
                                if (hwid.substr(0, dotpos) == this._serialNumber) {
                                    var funydx = rec['index'];
                                    if (funydx == undefined) funydx = funidx;
                                    this._functions[funydx] = [hwid.substr(dotpos + 1), rec['logicalName']];
                                    funidx++;
                                }
                            }
                        }
                    }
                }, {
                    key: 'imm_updateFromReq',
                    value: function imm_updateFromReq(yreq, loadval) {
                        this._cache._expiration = this._yapi.GetTickCount() + this._yapi.defaultCacheValidity;
                        this._cache._json = yreq.bin_result;

                        var func;
                        var reindex = false;
                        if (this._productName == '') {
                            for (func in loadval) {
                                if (func == 'module') {
                                    this._serialNumber = loadval.module.serialNumber;
                                    this._logicalName = loadval.module.logicalName;
                                    this._productName = loadval.module.productName;
                                    this._productId = loadval.module.productId;
                                    this._beacon = loadval.module.beacon;
                                } else if (func == 'services') {
                                    this.imm_updateFromYP(loadval.services.yellowPages);
                                }
                            }
                            reindex = true;
                        } else {
                            var renamed = false;
                            for (func in loadval) {
                                if (func == 'module') {
                                    if (this._logicalName != loadval.module.logicalName) {
                                        this._logicalName = loadval.module.logicalName;
                                        reindex = true;
                                    }
                                    this._beacon = loadval.module.beacon;
                                } else if (func != 'services') {
                                    var name = loadval[func]['logicalName'];
                                    if (name == undefined) name = loadval.module.logicalName;
                                    var pubval = loadval[func]['advertisedValue'];
                                    if (pubval != undefined) {
                                        this._yapi.imm_setFunctionValue(loadval.module.serialNumber + '.' + func, pubval);
                                    }
                                    var funydx;
                                    for (funydx in this._functions) {
                                        if (this._functions[funydx][0] == func) {
                                            if (this._functions[funydx][1] != name) {
                                                this._functions[funydx][1] = name;
                                                reindex = true;
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        if (reindex) {
                            this._yapi.imm_reindexDevice(this);
                        }
                    }
                }, {
                    key: 'imm_dropCache',
                    value: function imm_dropCache() {
                        this._cache._expiration = 0;
                    }
                }, {
                    key: 'imm_functionCount',
                    value: function imm_functionCount() {
                        return this._functions.length;
                    }
                }, {
                    key: 'imm_functionId',
                    value: function imm_functionId(int_idx) {
                        if (int_idx < this._functions.length) {
                            return this._functions[int_idx][0];
                        }
                        return '';
                    }
                }, {
                    key: 'imm_functionBaseType',
                    value: function imm_functionBaseType(int_idx) {
                        if (int_idx < this._functions.length) {
                            var ftype = this._yapi.imm_getFunctionBaseType(this._serialNumber + '.' + this._functions[int_idx][0]);
                            for (var name in Y_BASETYPES) {
                                if (Y_BASETYPES[name] == ftype) {
                                    return name;
                                }
                            }
                        }
                        return 'Function';
                    }
                }, {
                    key: 'imm_functionType',
                    value: function imm_functionType(int_idx) {
                        if (int_idx < this._functions.length) {
                            var funid = this._functions[int_idx][0];
                            var i;
                            for (i = 0; i < funid.length; i++) {
                                if (funid[i] >= '0' && funid[i] <= '9') {
                                    break;
                                }
                            }
                            return funid[0].toUpperCase() + funid.substr(1, i - 1);
                        }
                        return '';
                    }
                }, {
                    key: 'imm_functionName',
                    value: function imm_functionName(int_idx) {
                        if (int_idx < this._functions.length) {
                            return this._functions[int_idx][1];
                        }
                        return '';
                    }
                }, {
                    key: 'imm_functionValue',
                    value: function imm_functionValue(int_idx) {
                        if (int_idx < this._functions.length) {
                            return this._yapi.imm_getFunctionValue(this._serialNumber + '.' + this._functions[int_idx][0]);
                        }
                        return '';
                    }
                }, {
                    key: 'requestAPI',
                    value: function requestAPI(int_msValidity) {
                        var yreq;
                        return _regeneratorRuntime.async(function requestAPI$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cache._expiration > this._yapi.GetTickCount())) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', new YHTTPRequest(this._cache._json));

                                case 2:
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._yapi.devRequest(this._rootUrl, 'GET /api.json'));

                                case 4:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', yreq);

                                case 7:
                                    if (!int_msValidity) {
                                        int_msValidity = this._yapi.defaultCacheValidity;
                                    }
                                    this._cache._expiration = this._yapi.GetTickCount() + int_msValidity;
                                    this._cache._json = yreq.bin_result;
                                    return context$2$0.abrupt('return', yreq);

                                case 11:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'refresh',
                    value: function refresh() {
                        var yreq, loadval;
                        return _regeneratorRuntime.async(function refresh$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.requestAPI(this._yapi.defaultCacheValidity));

                                case 2:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(yreq.errorType, yreq.errorMsg, yreq.errorType));

                                case 5:
                                    loadval = null;

                                    try {
                                        loadval = JSON.parse(this._yapi.imm_bin2str(yreq.bin_result));
                                    } catch (err) {}

                                    if (loadval) {
                                        context$2$0.next = 9;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_IO_ERROR, 'Request failed, could not parse API result for ' + this._rootUrl, YAPI_IO_ERROR));

                                case 9:
                                    this.imm_updateFromReq(yreq, loadval);
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 11:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YDevice;
            })();

            YFirmwareUpdate = (function () {
                function YFirmwareUpdate(obj_yapi, str_serial, str_path, bin_settings) {
                    _classCallCheck(this, YFirmwareUpdate);

                    this._yapi = obj_yapi;

                    this._serial = '';

                    this._settings = new Uint8Array(0);

                    this._firmwarepath = '';

                    this._progress_msg = '';

                    this._progress_c = 0;

                    this._progress = 0;

                    this._restore_step = 0;

                    this._serial = str_serial;

                    this._settings = bin_settings;

                    this._firmwarepath = str_path;
                }

                _createClass(YFirmwareUpdate, [{
                    key: '_processMore',
                    value: function _processMore(i) {
                        return _regeneratorRuntime.async(function _processMore$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._progress = -1;
                                    this._progress_msg = 'not supported in JS';

                                case 2:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_progress',
                    value: function get_progress() {
                        return _regeneratorRuntime.async(function get_progress$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._progress >= 0)) {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this._processMore(0));

                                case 3:
                                    return context$2$0.abrupt('return', this._progress);

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_progressMessage',
                    value: function get_progressMessage() {
                        return _regeneratorRuntime.async(function get_progressMessage$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._progress_msg);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'startUpdate',
                    value: function startUpdate() {
                        var err, leng;
                        return _regeneratorRuntime.async(function startUpdate$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    err = undefined;
                                    leng = undefined;

                                    err = this._yapi.imm_bin2str(this._settings);
                                    leng = err.length;

                                    if (!(leng >= 6 && 'error:' == err.substr(0, 6))) {
                                        context$2$0.next = 9;
                                        break;
                                    }

                                    this._progress = -1;
                                    this._progress_msg = err.substr(6, leng - 6);
                                    context$2$0.next = 13;
                                    break;

                                case 9:
                                    this._progress = 0;
                                    this._progress_c = 0;
                                    context$2$0.next = 13;
                                    return _regeneratorRuntime.awrap(this._processMore(1));

                                case 13:
                                    return context$2$0.abrupt('return', this._progress);

                                case 14:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }], [{
                    key: 'CheckFirmware',
                    value: function CheckFirmware(serial, path, minrelease) {
                        return _regeneratorRuntime.async(function CheckFirmware$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', 'error: Not yet supported in Javascript');

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'GetAllBootLoaders',
                    value: function GetAllBootLoaders() {
                        return _regeneratorRuntime.async(function GetAllBootLoaders$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', []);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YFirmwareUpdate;
            })();

            YFunction = (function () {
                function YFunction(obj_yapi, str_func) {
                    _classCallCheck(this, YFunction);

                    this._yapi = obj_yapi;

                    this._className = 'Function';

                    this._func = str_func;

                    this._lastErrorType = YAPI_SUCCESS;

                    this._lastErrorMsg = 'no error';

                    this._dataStreams = {};

                    this._userData = null;

                    this._cache = { _expiration: 0 };

                    this._logicalName = Y_LOGICALNAME_INVALID;

                    this._advertisedValue = Y_ADVERTISEDVALUE_INVALID;

                    this._valueCallbackFunction = null;

                    this._cacheExpiration = 0;

                    this._serial = '';

                    this._funId = '';

                    this._hwId = '';

                    this.FUNCTIONDESCRIPTOR_INVALID = YAPI_INVALID_STRING;

                    this.HARDWAREID_INVALID = YAPI_INVALID_STRING;

                    this.FUNCTIONID_INVALID = YAPI_INVALID_STRING;

                    this.FRIENDLYNAME_INVALID = YAPI_INVALID_STRING;

                    this.LOGICALNAME_INVALID = YAPI_INVALID_STRING;

                    this.ADVERTISEDVALUE_INVALID = YAPI_INVALID_STRING;
                }

                _createClass(YFunction, [{
                    key: '_throw',
                    value: function _throw(int_errType, str_errMsg, obj_retVal) {
                        this._lastErrorType = int_errType;
                        this._lastErrorMsg = str_errMsg;
                        this._yapi._throw(int_errType, str_errMsg, obj_retVal);
                    }
                }, {
                    key: 'imm_setConst',
                    value: function imm_setConst(obj) {
                        for (var key in obj) {
                            this[key] = obj[key];
                            this.constructor[key] = obj[key];
                        }
                    }
                }, {
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case '_expiration':
                                this._cacheExpiration = val;
                                return 1;
                            case 'logicalName':
                                this._logicalName = val;
                                return 1;
                            case 'advertisedValue':
                                this._advertisedValue = val;
                                return 1;
                        }
                        return 0;
                    }
                }, {
                    key: 'get_logicalName',
                    value: function get_logicalName() {
                        return _regeneratorRuntime.async(function get_logicalName$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LOGICALNAME_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._logicalName);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_logicalName',
                    value: function set_logicalName(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_logicalName$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    if (this._yapi.CheckLogicalName(newval)) {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(this._yapi.INVALID_ARGUMENT, 'Invalid name :' + newval, this._yapi.INVALID_ARGUMENT));

                                case 3:
                                    rest_val = newval;
                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this._setAttr('logicalName', rest_val));

                                case 6:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_advertisedValue',
                    value: function get_advertisedValue() {
                        return _regeneratorRuntime.async(function get_advertisedValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_ADVERTISEDVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._advertisedValue);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_advertisedValue',
                    value: function set_advertisedValue(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_advertisedValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('advertisedValue', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'registerValueCallback',
                    value: function registerValueCallback(callback) {
                        var val;
                        return _regeneratorRuntime.async(function registerValueCallback$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    val = undefined;

                                    if (!(callback != null)) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(YFunction._UpdateValueCallbackList(this, true));

                                case 4:
                                    context$2$0.next = 8;
                                    break;

                                case 6:
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(YFunction._UpdateValueCallbackList(this, false));

                                case 8:
                                    this._valueCallbackFunction = callback;
                                    context$2$0.t0 = callback != null;

                                    if (!context$2$0.t0) {
                                        context$2$0.next = 14;
                                        break;
                                    }

                                    context$2$0.next = 13;
                                    return _regeneratorRuntime.awrap(this.isOnline());

                                case 13:
                                    context$2$0.t0 = context$2$0.sent;

                                case 14:
                                    if (!context$2$0.t0) {
                                        context$2$0.next = 19;
                                        break;
                                    }

                                    val = this._advertisedValue;

                                    if (val == '') {
                                        context$2$0.next = 19;
                                        break;
                                    }

                                    context$2$0.next = 19;
                                    return _regeneratorRuntime.awrap(this._invokeValueCallback(val));

                                case 19:
                                    return context$2$0.abrupt('return', 0);

                                case 20:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_invokeValueCallback',
                    value: function _invokeValueCallback(value) {
                        return _regeneratorRuntime.async(function _invokeValueCallback$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._valueCallbackFunction != null)) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this._valueCallbackFunction(this, value));

                                case 3:
                                    context$2$0.next = 5;
                                    break;

                                case 5:
                                    return context$2$0.abrupt('return', 0);

                                case 6:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'muteValueCallbacks',
                    value: function muteValueCallbacks() {
                        return _regeneratorRuntime.async(function muteValueCallbacks$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_advertisedValue('SILENT'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'unmuteValueCallbacks',
                    value: function unmuteValueCallbacks() {
                        return _regeneratorRuntime.async(function unmuteValueCallbacks$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_advertisedValue(''));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_parserHelper',
                    value: function _parserHelper() {
                        return _regeneratorRuntime.async(function _parserHelper$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', 0);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextFunction',
                    value: function nextFunction() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YFunction.FindFunctionInContext(this._yapi, next_hwid);
                    }
                }, {
                    key: 'describe',
                    value: function describe() {
                        var resolve;
                        return _regeneratorRuntime.async(function describe$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._hwId != '')) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._className + '(' + this._func + ')=' + this._hwId);

                                case 2:
                                    resolve = this._yapi.imm_resolveFunction(this._className, this._func);

                                    if (!(resolve.errorType != YAPI_SUCCESS && resolve.result != this._func)) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._className + '(' + this._func + ')=unresolved');

                                case 5:
                                    return context$2$0.abrupt('return', this._className + '(' + this._func + ')=' + resolve.result);

                                case 6:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_hardwareId',
                    value: function get_hardwareId() {
                        var resolve;
                        return _regeneratorRuntime.async(function get_hardwareId$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._hwId != '')) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._hwId);

                                case 2:
                                    resolve = this._yapi.imm_resolveFunction(this._className, this._func);

                                    if (!(resolve.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 9;
                                        break;
                                    }

                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this.isOnline());

                                case 6:
                                    resolve = this._yapi.imm_resolveFunction(this._className, this._func);

                                    if (!(resolve.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 9;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(resolve.errorType, resolve.errorMsg, Y_HARDWAREID_INVALID));

                                case 9:
                                    return context$2$0.abrupt('return', resolve.result);

                                case 10:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_functionId',
                    value: function get_functionId() {
                        var resolve, pos;
                        return _regeneratorRuntime.async(function get_functionId$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._funId != '')) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._funId);

                                case 2:
                                    resolve = this._yapi.imm_resolveFunction(this._className, this._func);

                                    if (!(resolve.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 9;
                                        break;
                                    }

                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this.isOnline());

                                case 6:
                                    resolve = this._yapi.imm_resolveFunction(this._className, this._func);

                                    if (!(resolve.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 9;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(resolve.errorType, resolve.errorMsg, Y_FUNCTIONID_INVALID));

                                case 9:
                                    pos = resolve.result.indexOf('.');
                                    return context$2$0.abrupt('return', resolve.result.substr(pos + 1));

                                case 11:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_friendlyName',
                    value: function get_friendlyName() {
                        var resolve;
                        return _regeneratorRuntime.async(function get_friendlyName$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    resolve = this._yapi.imm_getFriendlyNameFunction(this._className, this._func);

                                    if (!(resolve.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.isOnline());

                                case 4:
                                    resolve = this._yapi.imm_getFriendlyNameFunction(this._className, this._func);

                                    if (!(resolve.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(resolve.errorType, resolve.errorMsg, Y_FRIENDLYNAME_INVALID));

                                case 7:
                                    return context$2$0.abrupt('return', resolve.result);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_parse',
                    value: function _parse(yreq, msValidity) {
                        var key;
                        return _regeneratorRuntime.async(function _parse$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    yreq.obj_result['_expiration'] = this._yapi.GetTickCount() + msValidity;
                                    this._serial = yreq.obj_result.deviceid;
                                    this._funId = yreq.obj_result.functionid;
                                    this._hwId = yreq.obj_result.hwid;
                                    this._cache = yreq.obj_result;

                                    for (key in yreq.obj_result) {
                                        this.imm_parseAttr(key, yreq.obj_result[key]);
                                    }
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(this._parserHelper());

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_g',
                    value: function _g(str_attr) {
                        this.imm_parseAttr(str_attr, this._cache[str_attr]);
                        return this['_' + str_attr];
                    }
                }, {
                    key: '_getAttr',
                    value: function _getAttr(str_attr) {
                        return _regeneratorRuntime.async(function _getAttr$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', null);

                                case 7:
                                    if (typeof this._cache[str_attr] == 'undefined') {
                                        this._throw(YAPI_VERSION_MISMATCH, 'No such attribute ' + str_attr + ' in function', null);
                                    }
                                    return context$2$0.abrupt('return', this._cache[str_attr]);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_getFixedAttr',
                    value: function _getFixedAttr(str_attr) {
                        return _regeneratorRuntime.async(function _getFixedAttr$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration == 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', null);

                                case 7:
                                    if (typeof this._cache[str_attr] == 'undefined') {
                                        this._throw(YAPI_VERSION_MISMATCH, 'No such attribute ' + str_attr + ' in function', null);
                                    }
                                    return context$2$0.abrupt('return', this._cache[str_attr]);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'imm_escapeAttr',
                    value: function imm_escapeAttr(str_newval) {
                        return escape(str_newval).replace(/[+]/g, '%2B').replace(/%20/g, '+').replace(/%21/g, '!').replace(/%24/g, '$').replace(/%27/g, '\'').replace(/%28/g, '(').replace(/%29/g, ')').replace(/%2[cC]/g, ',').replace(/%2[fF]/g, '/').replace(/%3[aA]/g, ':').replace(/%3[bB]/g, ';').replace(/%3[fF]/g, '?').replace(/%5[bB]/g, '[').replace(/%5[dD]/g, ']');
                    }
                }, {
                    key: '_setAttr',
                    value: function _setAttr(str_attr, str_newval) {
                        var attrname, attrval, extra;
                        return _regeneratorRuntime.async(function _setAttr$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(str_newval == undefined)) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'Undefined value to set for attribute ' + str_attr, null));

                                case 2:
                                    attrname = encodeURIComponent(str_attr);
                                    attrval = this.imm_escapeAttr(str_newval);
                                    extra = '/' + attrname + '?' + attrname + '=' + attrval + '&.';

                                    if (this._cacheExpiration != 0) {
                                        this._cacheExpiration = this._yapi.GetTickCount();
                                        this._cache._expiration = this._cacheExpiration;
                                    }
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(this._yapi.funcRequest(this._className, this._func, extra));

                                case 8:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_download',
                    value: function _download(str_path) {
                        var devid, yreq;
                        return _regeneratorRuntime.async(function _download$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    devid = this._serial;

                                    if (!(devid == '')) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.module().get_serialNumber());

                                case 4:
                                    devid = context$2$0.sent;

                                case 5:
                                    if (!(devid == Y_SERIALNUMBER_INVALID)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', new Uint8Array(0));

                                case 7:
                                    context$2$0.next = 9;
                                    return _regeneratorRuntime.awrap(this._yapi.devRequest(devid, 'GET /' + str_path));

                                case 9:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 12;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(yreq.errorType, yreq.errorMsg, ''));

                                case 12:
                                    return context$2$0.abrupt('return', yreq.bin_result);

                                case 13:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_upload',
                    value: function _upload(str_path, bin_content) {
                        var devid, httpreq, len;
                        return _regeneratorRuntime.async(function _upload$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    devid = this._serial;

                                    if (!(devid == '')) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.module().get_serialNumber());

                                case 4:
                                    devid = context$2$0.sent;

                                case 5:
                                    if (!(devid == Y_SERIALNUMBER_INVALID)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this.get_errorType());

                                case 7:
                                    httpreq = 'POST /upload.html';
                                    len = bin_content.length;

                                    if (typeof bin_content == 'string' || bin_content instanceof String) {
                                        bin_content = this._yapi.imm_str2bin(bin_content);
                                    } else if (bin_content instanceof Array) {
                                        bin_content = new Uint8Array(bin_content);
                                    }
                                    context$2$0.next = 12;
                                    return _regeneratorRuntime.awrap(this._yapi.devRequest(devid, httpreq, bin_content));

                                case 12:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 13:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'wait_async',
                    value: function wait_async(callback) {
                        var _this = this;

                        var context = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

                        var devid = this._serial;
                        if (devid == '') {
                            this.module().get_serialNumber().then(function () {
                                return _this.wait_async(callback, context);
                            });
                            return YAPI_SUCCESS;
                        }
                        if (devid == Y_SERIALNUMBER_INVALID) {
                            callback(context, this);
                            return YAPI_SUCCESS;
                        }
                        var lockdev = this._yapi.imm_getDevice(devid);

                        var delayedCode = function delayedCode() {
                            callback(context, _this);
                        };
                        lockdev._pendingQueries = lockdev._pendingQueries.then(delayedCode, delayedCode);
                        return YAPI_SUCCESS;
                    }
                }, {
                    key: 'imm_json_get_key',
                    value: function imm_json_get_key(bin_jsonbuff, str_key) {
                        var loadval = JSON.parse(this._yapi.imm_bin2str(bin_jsonbuff));
                        if (typeof loadval[str_key] != 'undefined') {
                            return loadval[str_key];
                        }
                        return '';
                    }
                }, {
                    key: 'imm_json_get_string',
                    value: function imm_json_get_string(bin_jsonbuff) {
                        return JSON.parse(this._yapi.imm_bin2str(bin_jsonbuff));
                    }
                }, {
                    key: 'imm_json_get_array',
                    value: function imm_json_get_array(bin_jsonbuff) {
                        var loadval = JSON.parse(this._yapi.imm_bin2str(bin_jsonbuff));
                        var res = [];
                        for (var idx in loadval) {
                            res.push(JSON.stringify(loadval[idx]));
                        }
                        return res;
                    }
                }, {
                    key: 'imm_get_json_path',
                    value: function imm_get_json_path(str_json, str_path) {
                        var json = JSON.parse(str_json);
                        var paths = str_path.split('|');
                        for (var i = 0; i < paths.length; i++) {
                            var tmp = paths[i];
                            json = json[tmp];
                            if (json == undefined) {
                                return '';
                            }
                        }
                        return JSON.stringify(json);
                    }
                }, {
                    key: 'imm_decode_json_string',
                    value: function imm_decode_json_string(str_json) {
                        return JSON.parse(str_json);
                    }
                }, {
                    key: 'imm_findDataStream',
                    value: function imm_findDataStream(obj_dataset, str_def) {
                        var key = obj_dataset.imm_get_functionId() + ':' + str_def;
                        if (this._dataStreams[key]) return this._dataStreams[key];

                        var newDataStream = new YDataStream(this, obj_dataset, this._yapi.imm_decodeWords(str_def));
                        this._dataStreams[key] = newDataStream;
                        return newDataStream;
                    }
                }, {
                    key: 'clearDataStreamCache',
                    value: function clearDataStreamCache() {
                        return _regeneratorRuntime.async(function clearDataStreamCache$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._dataStreams = {};

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'isOnline',
                    value: function isOnline() {
                        var yreq;
                        return _regeneratorRuntime.async(function isOnline$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration > this._yapi.GetTickCount())) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', true);

                                case 2:
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._yapi.funcRequest(this._className, this._func, '', this._yapi.defaultCacheValidity));

                                case 4:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    if (!(yreq.errorType == YAPI_DEVICE_BUSY)) {
                                        context$2$0.next = 10;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', true);

                                case 10:
                                    return context$2$0.abrupt('return', false);

                                case 11:
                                    context$2$0.next = 13;
                                    return _regeneratorRuntime.awrap(this._parse(yreq, this._yapi.defaultCacheValidity));

                                case 13:
                                    return context$2$0.abrupt('return', true);

                                case 14:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_errorType',
                    value: function get_errorType() {
                        return this._lastErrorType;
                    }
                }, {
                    key: 'get_errorMessage',
                    value: function get_errorMessage() {
                        return this._lastErrorMsg;
                    }
                }, {
                    key: 'load',
                    value: function load(msValidity) {
                        var yreq;
                        return _regeneratorRuntime.async(function load$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._yapi.funcRequest(this._className, this._func, '', msValidity));

                                case 2:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(yreq.errorType, yreq.errorMsg, yreq.errorType));

                                case 5:
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this._parse(yreq, msValidity));

                                case 7:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'clearCache',
                    value: function clearCache() {
                        var devreq;
                        return _regeneratorRuntime.async(function clearCache$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._yapi._funcDev(this._className, this._func));

                                case 2:
                                    devreq = context$2$0.sent;

                                    if (!(devreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return');

                                case 5:
                                    devreq.result.device.imm_dropCache();
                                    if (this._cacheExpiration > 0) {
                                        this._cacheExpiration = this._yapi.GetTickCount();
                                    }

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'module',
                    value: function module() {
                        var hwid, resolve, dotidx;
                        return _regeneratorRuntime.async(function module$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._serial != '')) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(yFindModule(this._serial + '.module', this._yapi));

                                case 3:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 4:
                                    hwid = this._func;

                                    if (hwid.indexOf('.') < 0) {
                                        resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                                        if (resolve.errorType == YAPI_SUCCESS) hwid = resolve.result;
                                    }
                                    dotidx = hwid.indexOf('.');

                                    if (!(dotidx >= 0)) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    context$2$0.next = 10;
                                    return _regeneratorRuntime.awrap(YModule.FindModuleInContext(this._yapi, hwid.substr(0, dotidx) + '.module'));

                                case 10:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 11:
                                    context$2$0.next = 13;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 13:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 == context$2$0.t1)) {
                                        context$2$0.next = 18;
                                        break;
                                    }

                                    resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                                    if (resolve.result != undefined) hwid = resolve.result;

                                case 18:
                                    dotidx = hwid.indexOf('.');

                                    if (!(dotidx >= 0)) {
                                        context$2$0.next = 23;
                                        break;
                                    }

                                    context$2$0.next = 22;
                                    return _regeneratorRuntime.awrap(YModule.FindModuleInContext(this._yapi, hwid.substr(0, dotidx) + '.module'));

                                case 22:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 23:
                                    context$2$0.next = 25;
                                    return _regeneratorRuntime.awrap(YModule.FindModuleInContext(this._yapi, 'module_of_' + this.className + '_' + this._func));

                                case 25:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 26:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_module',
                    value: function get_module() {
                        return _regeneratorRuntime.async(function get_module$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.module());

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_functionDescriptor',
                    value: function get_functionDescriptor() {
                        var hwid, resolve, dotidx;
                        return _regeneratorRuntime.async(function get_functionDescriptor$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._hwId != '')) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._hwId);

                                case 2:
                                    hwid = this._func;

                                    if (hwid.indexOf('.') < 0) {
                                        resolve = this._yapi.imm_resolveFunction(this._className, this._func);

                                        if (resolve.errorType != YAPI_SUCCESS) hwid = resolve.result;
                                    }
                                    dotidx = hwid.indexOf('.');

                                    if (!(dotidx >= 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', hwid);

                                case 7:
                                    return context$2$0.abrupt('return', Y_FUNCTIONDESCRIPTOR_INVALID);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_userData',
                    value: function get_userData() {
                        return _regeneratorRuntime.async(function get_userData$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._userData);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_userData',
                    value: function set_userData(data) {
                        return _regeneratorRuntime.async(function set_userData$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._userData = data;

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }], [{
                    key: 'FindFunction',
                    value: function FindFunction(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Function', func);
                        if (obj == null) {
                            obj = new YFunction(YAPI, func);
                            YFunction._AddToCache('Function', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindFunctionInContext',
                    value: function FindFunctionInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Function', func);
                        if (obj == null) {
                            obj = new YFunction(yctx, func);
                            YFunction._AddToCache('Function', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstFunction',
                    value: function FirstFunction() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Function');
                        if (next_hwid == null) return null;
                        return YFunction.FindFunction(next_hwid);
                    }
                }, {
                    key: 'FirstFunctionInContext',
                    value: function FirstFunctionInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Function');
                        if (next_hwid == null) return null;
                        return YFunction.FindFunctionInContext(yctx, next_hwid);
                    }
                }, {
                    key: '_FindFromCacheInContext',
                    value: function _FindFromCacheInContext(yctx, className, func) {
                        return yctx.imm_getFunction(className, func);
                    }
                }, {
                    key: '_FindFromCache',
                    value: function _FindFromCache(className, func) {
                        return YAPI.imm_getFunction(className, func);
                    }
                }, {
                    key: '_AddToCache',
                    value: function _AddToCache(className, func, obj) {
                        obj._yapi.imm_setFunction(className, func, obj);
                    }
                }, {
                    key: '_ClearCache',
                    value: function _ClearCache() {
                        var obj_yapi = arguments.length <= 0 || arguments[0] === undefined ? YAPI : arguments[0];

                        obj_yapi.imm_init();
                    }
                }, {
                    key: '_UpdateValueCallbackList',
                    value: function _UpdateValueCallbackList(obj_func, bool_add) {
                        return _regeneratorRuntime.async(function _UpdateValueCallbackList$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(obj_func._yapi._UpdateValueCallbackList(obj_func, bool_add));

                                case 2:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_UpdateTimedReportCallbackList',
                    value: function _UpdateTimedReportCallbackList(obj_func, bool_add) {
                        return _regeneratorRuntime.async(function _UpdateTimedReportCallbackList$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(obj_func._yapi._UpdateTimedReportCallbackList(obj_func, bool_add));

                                case 2:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YFunction;
            })();

            _export('YFunction', YFunction);

            YModule = (function (_YFunction) {
                _inherits(YModule, _YFunction);

                function YModule(obj_yapi, str_func) {
                    _classCallCheck(this, YModule);

                    _get(Object.getPrototypeOf(YModule.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Module';

                    this._productName = Y_PRODUCTNAME_INVALID;

                    this._serialNumber = Y_SERIALNUMBER_INVALID;

                    this._productId = Y_PRODUCTID_INVALID;

                    this._productRelease = Y_PRODUCTRELEASE_INVALID;

                    this._firmwareRelease = Y_FIRMWARERELEASE_INVALID;

                    this._persistentSettings = Y_PERSISTENTSETTINGS_INVALID;

                    this._luminosity = Y_LUMINOSITY_INVALID;

                    this._beacon = Y_BEACON_INVALID;

                    this._upTime = Y_UPTIME_INVALID;

                    this._usbCurrent = Y_USBCURRENT_INVALID;

                    this._rebootCountdown = Y_REBOOTCOUNTDOWN_INVALID;

                    this._userVar = Y_USERVAR_INVALID;

                    this._logCallback = null;
                    this.imm_setConst({
                        PRODUCTNAME_INVALID: YAPI_INVALID_STRING,
                        SERIALNUMBER_INVALID: YAPI_INVALID_STRING,
                        PRODUCTID_INVALID: YAPI_INVALID_UINT,
                        PRODUCTRELEASE_INVALID: YAPI_INVALID_UINT,
                        FIRMWARERELEASE_INVALID: YAPI_INVALID_STRING,
                        PERSISTENTSETTINGS_LOADED: 0,
                        PERSISTENTSETTINGS_SAVED: 1,
                        PERSISTENTSETTINGS_MODIFIED: 2,
                        PERSISTENTSETTINGS_INVALID: -1,
                        LUMINOSITY_INVALID: YAPI_INVALID_UINT,
                        BEACON_OFF: 0,
                        BEACON_ON: 1,
                        BEACON_INVALID: -1,
                        UPTIME_INVALID: YAPI_INVALID_LONG,
                        USBCURRENT_INVALID: YAPI_INVALID_UINT,
                        REBOOTCOUNTDOWN_INVALID: YAPI_INVALID_INT,
                        USERVAR_INVALID: YAPI_INVALID_INT
                    });

                    var devid = this._func;
                    var dotidx = devid.indexOf('.');
                    if (dotidx > 0) devid = devid.substr(0, dotidx);
                    var dev = this._yapi.imm_getDevice(devid);
                    if (dev) {
                        this._serial = dev.imm_getSerialNumber();
                        this._funId = 'module';
                        this._hwId = this._serial + '.module';
                    }
                }

                _createClass(YModule, [{
                    key: '_throw',
                    value: function _throw(int_errType, str_errMsg, obj_retVal) {
                        this._lastErrorType = int_errType;
                        this._lastErrorMsg = str_errMsg;
                        this._yapi._throw(int_errType, str_errMsg, obj_retVal);
                    }
                }, {
                    key: 'imm_getDev',
                    value: function imm_getDev() {
                        var devid = this._func;

                        var dotidx = devid.indexOf('.');
                        if (dotidx > 0) devid = devid.substr(0, dotidx);

                        var dev = this._yapi.imm_getDevice(devid);
                        if (!dev) {
                            this._throw(YAPI_DEVICE_NOT_FOUND, 'Device [' + devid + '] is not online', null);
                        }
                        return dev;
                    }
                }, {
                    key: 'functionCount',
                    value: function functionCount() {
                        var dev;
                        return _regeneratorRuntime.async(function functionCount$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    dev = this.imm_getDev();

                                    if (dev) {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_DEVICE_NOT_FOUND);

                                case 3:
                                    return context$2$0.abrupt('return', dev.imm_functionCount());

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'functionId',
                    value: function functionId(functionIndex) {
                        var dev;
                        return _regeneratorRuntime.async(function functionId$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    dev = this.imm_getDev();

                                    if (dev) {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', '');

                                case 3:
                                    return context$2$0.abrupt('return', dev.imm_functionId(functionIndex));

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'functionType',
                    value: function functionType(functionIndex) {
                        var dev;
                        return _regeneratorRuntime.async(function functionType$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    dev = this.imm_getDev();

                                    if (dev) {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', '');

                                case 3:
                                    return context$2$0.abrupt('return', dev.imm_functionType(functionIndex));

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'functionBaseType',
                    value: function functionBaseType(functionIndex) {
                        var dev;
                        return _regeneratorRuntime.async(function functionBaseType$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    dev = this.imm_getDev();

                                    if (dev) {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', '');

                                case 3:
                                    return context$2$0.abrupt('return', dev.imm_functionBaseType(functionIndex));

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'functionName',
                    value: function functionName(functionIndex) {
                        var dev;
                        return _regeneratorRuntime.async(function functionName$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    dev = this.imm_getDev();

                                    if (dev) {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', '');

                                case 3:
                                    return context$2$0.abrupt('return', dev.imm_functionName(functionIndex));

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'functionValue',
                    value: function functionValue(functionIndex) {
                        var dev;
                        return _regeneratorRuntime.async(function functionValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    dev = this.imm_getDev();

                                    if (dev) {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', '');

                                case 3:
                                    return context$2$0.abrupt('return', dev.imm_functionValue(functionIndex));

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'loadUrl',
                    value: function loadUrl(str_url) {
                        var dev, yreq;
                        return _regeneratorRuntime.async(function loadUrl$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    dev = this.imm_getDev();

                                    if (dev) {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', null);

                                case 3:
                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this._yapi.devRequest(dev.imm_getRootUrl(), 'GET ' + str_url));

                                case 5:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(yreq.errorType, yreq.errorMsg, null));

                                case 8:
                                    return context$2$0.abrupt('return', yreq.bin_result);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_logicalName',
                    value: function get_logicalName() {
                        var dev, json_val;
                        return _regeneratorRuntime.async(function get_logicalName$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    dev = this.imm_getDev();

                                    if (!(dev != null && this._cache._expiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', dev._logicalName);

                                case 3:
                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this._getAttr('logicalName'));

                                case 5:
                                    json_val = context$2$0.sent;
                                    return context$2$0.abrupt('return', json_val == null ? Y_LOGICALNAME_INVALID : json_val);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'imm_flattenJsonStruct',
                    value: function imm_flattenJsonStruct(jsoncomplex) {
                        var decoded = JSON.parse(jsoncomplex);
                        var attrs = [];
                        for (var function_name in decoded) {
                            if (function_name == 'services') continue;
                            var function_attrs = decoded[function_name];
                            for (var attr_name in function_attrs) {
                                var attr_value = function_attrs[attr_name];
                                if (attr_value === null || typeof attr_value === 'object') {
                                    continue;
                                }
                                var flat = function_name + '/' + attr_name + '=' + attr_value;
                                attrs.push(flat);
                            }
                        }
                        return JSON.stringify(attrs);
                    }
                }, {
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'productName':
                                this._productName = val;
                                return 1;
                            case 'serialNumber':
                                this._serialNumber = val;
                                return 1;
                            case 'productId':
                                this._productId = parseInt(val);
                                return 1;
                            case 'productRelease':
                                this._productRelease = parseInt(val);
                                return 1;
                            case 'firmwareRelease':
                                this._firmwareRelease = val;
                                return 1;
                            case 'persistentSettings':
                                this._persistentSettings = parseInt(val);
                                return 1;
                            case 'luminosity':
                                this._luminosity = parseInt(val);
                                return 1;
                            case 'beacon':
                                this._beacon = parseInt(val);
                                return 1;
                            case 'upTime':
                                this._upTime = parseInt(val);
                                return 1;
                            case 'usbCurrent':
                                this._usbCurrent = parseInt(val);
                                return 1;
                            case 'rebootCountdown':
                                this._rebootCountdown = parseInt(val);
                                return 1;
                            case 'userVar':
                                this._userVar = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YModule.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_productName',
                    value: function get_productName() {
                        var dev;
                        return _regeneratorRuntime.async(function get_productName$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    dev = undefined;

                                    if (!(this._cacheExpiration == 0)) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    dev = this.imm_getDev();

                                    if (dev == null) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', dev.imm_getProductName());

                                case 5:
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 7:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PRODUCTNAME_INVALID);

                                case 11:
                                    return context$2$0.abrupt('return', this._productName);

                                case 12:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_serialNumber',
                    value: function get_serialNumber() {
                        var dev;
                        return _regeneratorRuntime.async(function get_serialNumber$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    dev = undefined;

                                    if (!(this._cacheExpiration == 0)) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    dev = this.imm_getDev();

                                    if (dev == null) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', dev.imm_getSerialNumber());

                                case 5:
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 7:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SERIALNUMBER_INVALID);

                                case 11:
                                    return context$2$0.abrupt('return', this._serialNumber);

                                case 12:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_productId',
                    value: function get_productId() {
                        var dev;
                        return _regeneratorRuntime.async(function get_productId$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    dev = undefined;

                                    if (!(this._cacheExpiration == 0)) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    dev = this.imm_getDev();

                                    if (dev == null) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', dev.imm_getProductId());

                                case 5:
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 7:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PRODUCTID_INVALID);

                                case 11:
                                    return context$2$0.abrupt('return', this._productId);

                                case 12:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_productRelease',
                    value: function get_productRelease() {
                        return _regeneratorRuntime.async(function get_productRelease$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration == 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PRODUCTRELEASE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._productRelease);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_firmwareRelease',
                    value: function get_firmwareRelease() {
                        return _regeneratorRuntime.async(function get_firmwareRelease$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_FIRMWARERELEASE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._firmwareRelease);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_persistentSettings',
                    value: function get_persistentSettings() {
                        return _regeneratorRuntime.async(function get_persistentSettings$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_PERSISTENTSETTINGS_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._persistentSettings);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_persistentSettings',
                    value: function set_persistentSettings(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_persistentSettings$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('persistentSettings', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_luminosity',
                    value: function get_luminosity() {
                        return _regeneratorRuntime.async(function get_luminosity$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LUMINOSITY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._luminosity);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_luminosity',
                    value: function set_luminosity(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_luminosity$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('luminosity', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_beacon',
                    value: function get_beacon() {
                        var dev;
                        return _regeneratorRuntime.async(function get_beacon$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    dev = undefined;

                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    dev = this.imm_getDev();

                                    if (dev == null) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', dev.imm_getBeacon());

                                case 5:
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 7:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_BEACON_INVALID);

                                case 11:
                                    return context$2$0.abrupt('return', this._beacon);

                                case 12:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_beacon',
                    value: function set_beacon(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_beacon$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('beacon', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_upTime',
                    value: function get_upTime() {
                        return _regeneratorRuntime.async(function get_upTime$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_UPTIME_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._upTime);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_usbCurrent',
                    value: function get_usbCurrent() {
                        return _regeneratorRuntime.async(function get_usbCurrent$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_USBCURRENT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._usbCurrent);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_rebootCountdown',
                    value: function get_rebootCountdown() {
                        return _regeneratorRuntime.async(function get_rebootCountdown$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_REBOOTCOUNTDOWN_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._rebootCountdown);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_rebootCountdown',
                    value: function set_rebootCountdown(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_rebootCountdown$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('rebootCountdown', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_userVar',
                    value: function get_userVar() {
                        return _regeneratorRuntime.async(function get_userVar$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_USERVAR_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._userVar);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_userVar',
                    value: function set_userVar(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_userVar$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(newval);
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('userVar', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'saveToFlash',
                    value: function saveToFlash() {
                        return _regeneratorRuntime.async(function saveToFlash$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_persistentSettings(Y_PERSISTENTSETTINGS_SAVED));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'revertFromFlash',
                    value: function revertFromFlash() {
                        return _regeneratorRuntime.async(function revertFromFlash$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_persistentSettings(Y_PERSISTENTSETTINGS_LOADED));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'reboot',
                    value: function reboot(secBeforeReboot) {
                        return _regeneratorRuntime.async(function reboot$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_rebootCountdown(secBeforeReboot));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'triggerFirmwareUpdate',
                    value: function triggerFirmwareUpdate(secBeforeReboot) {
                        return _regeneratorRuntime.async(function triggerFirmwareUpdate$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_rebootCountdown(-secBeforeReboot));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'checkFirmware',
                    value: function checkFirmware(path, onlynew) {
                        var serial, release, tmp_res;
                        return _regeneratorRuntime.async(function checkFirmware$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    serial = undefined;
                                    release = undefined;
                                    tmp_res = undefined;

                                    if (!onlynew) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    context$2$0.t0 = this._yapi;
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this.get_firmwareRelease());

                                case 7:
                                    context$2$0.t1 = context$2$0.sent;
                                    release = context$2$0.t0.imm_atoi.call(context$2$0.t0, context$2$0.t1);
                                    context$2$0.next = 12;
                                    break;

                                case 11:
                                    release = 0;

                                case 12:
                                    context$2$0.next = 14;
                                    return _regeneratorRuntime.awrap(this.get_serialNumber());

                                case 14:
                                    serial = context$2$0.sent;
                                    context$2$0.next = 17;
                                    return _regeneratorRuntime.awrap(YFirmwareUpdate.CheckFirmware(serial, path, release));

                                case 17:
                                    tmp_res = context$2$0.sent;

                                    if (tmp_res.indexOf('error:') == 0) {
                                        this._throw(YAPI_INVALID_ARGUMENT, tmp_res);
                                    }
                                    return context$2$0.abrupt('return', tmp_res);

                                case 20:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'updateFirmware',
                    value: function updateFirmware(path) {
                        var serial, settings;
                        return _regeneratorRuntime.async(function updateFirmware$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    serial = undefined;
                                    settings = undefined;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.get_serialNumber());

                                case 4:
                                    serial = context$2$0.sent;
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this.get_allSettings());

                                case 7:
                                    settings = context$2$0.sent;

                                    if (settings.length == 0) {
                                        this._throw(YAPI_IO_ERROR, 'Unable to get device settings');
                                        settings = this._yapi.imm_str2bin('error:Unable to get device settings');
                                    }
                                    return context$2$0.abrupt('return', new YFirmwareUpdate(serial, path, settings));

                                case 10:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_allSettings',
                    value: function get_allSettings() {
                        var settings, json, res, sep, name, item, t_type, id, url, file_data, file_data_bin, temp_data_bin, ext_settings, filelist, templist, ii;
                        return _regeneratorRuntime.async(function get_allSettings$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    settings = undefined;
                                    json = undefined;
                                    res = undefined;
                                    sep = undefined;
                                    name = undefined;
                                    item = undefined;
                                    t_type = undefined;
                                    id = undefined;
                                    url = undefined;
                                    file_data = undefined;
                                    file_data_bin = undefined;
                                    temp_data_bin = undefined;
                                    ext_settings = undefined;
                                    filelist = [];
                                    templist = [];
                                    context$2$0.next = 17;
                                    return _regeneratorRuntime.awrap(this._download('api.json'));

                                case 17:
                                    settings = context$2$0.sent;

                                    if (!(settings.length == 0)) {
                                        context$2$0.next = 20;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', settings);

                                case 20:
                                    ext_settings = ', "extras":[';
                                    context$2$0.next = 23;
                                    return _regeneratorRuntime.awrap(this.get_functionIds('Temperature'));

                                case 23:
                                    templist = context$2$0.sent;

                                    sep = '';
                                    context$2$0.t0 = _regeneratorRuntime.keys(templist);

                                case 26:
                                    if ((context$2$0.t1 = context$2$0.t0()).done) {
                                        context$2$0.next = 52;
                                        break;
                                    }

                                    ii = context$2$0.t1.value;
                                    context$2$0.t2 = this._yapi;
                                    context$2$0.next = 31;
                                    return _regeneratorRuntime.awrap(this.get_firmwareRelease());

                                case 31:
                                    context$2$0.t3 = context$2$0.sent;
                                    context$2$0.t4 = context$2$0.t2.imm_atoi.call(context$2$0.t2, context$2$0.t3);

                                    if (!(context$2$0.t4 > 9000)) {
                                        context$2$0.next = 50;
                                        break;
                                    }

                                    url = 'api/' + templist[ii] + '/sensorType';
                                    context$2$0.t5 = this._yapi;
                                    context$2$0.next = 38;
                                    return _regeneratorRuntime.awrap(this._download(url));

                                case 38:
                                    context$2$0.t6 = context$2$0.sent;
                                    t_type = context$2$0.t5.imm_bin2str.call(context$2$0.t5, context$2$0.t6);

                                    if (!(t_type == 'RES_NTC')) {
                                        context$2$0.next = 50;
                                        break;
                                    }

                                    id = templist[ii].substr(11, templist[ii].length - 11);
                                    context$2$0.next = 44;
                                    return _regeneratorRuntime.awrap(this._download('extra.json?page=' + id));

                                case 44:
                                    temp_data_bin = context$2$0.sent;

                                    if (!(temp_data_bin.length == 0)) {
                                        context$2$0.next = 47;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', temp_data_bin);

                                case 47:
                                    item = sep + '{"fid":"' + templist[ii] + '", "json":' + this._yapi.imm_bin2str(temp_data_bin) + '}\n';
                                    ext_settings = ext_settings + item;
                                    sep = ',';

                                case 50:
                                    context$2$0.next = 26;
                                    break;

                                case 52:
                                    ext_settings = ext_settings + '],\n"files":[';
                                    context$2$0.next = 55;
                                    return _regeneratorRuntime.awrap(this.hasFunction('files'));

                                case 55:
                                    if (!context$2$0.sent) {
                                        context$2$0.next = 79;
                                        break;
                                    }

                                    context$2$0.next = 58;
                                    return _regeneratorRuntime.awrap(this._download('files.json?a=dir&f='));

                                case 58:
                                    json = context$2$0.sent;

                                    if (!(json.length == 0)) {
                                        context$2$0.next = 61;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', json);

                                case 61:
                                    filelist = this.imm_json_get_array(json);
                                    sep = '';
                                    context$2$0.t7 = _regeneratorRuntime.keys(filelist);

                                case 64:
                                    if ((context$2$0.t8 = context$2$0.t7()).done) {
                                        context$2$0.next = 79;
                                        break;
                                    }

                                    ii = context$2$0.t8.value;

                                    name = this.imm_json_get_key(this._yapi.imm_str2bin(filelist[ii]), 'name');

                                    if (!(name.length == 0)) {
                                        context$2$0.next = 69;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._yapi.imm_str2bin(name));

                                case 69:
                                    context$2$0.next = 71;
                                    return _regeneratorRuntime.awrap(this._download(this.imm_escapeAttr(name)));

                                case 71:
                                    file_data_bin = context$2$0.sent;

                                    file_data = this._yapi.imm_bin2hexstr(file_data_bin);
                                    item = sep + '{"name":"' + name + '", "data":"' + file_data + '"}\n';
                                    ext_settings = ext_settings + item;
                                    sep = ',';;
                                    context$2$0.next = 64;
                                    break;

                                case 79:
                                    ext_settings = ext_settings + ']}';
                                    res = this._yapi.imm_str2bin('{ "api":') + settings + this._yapi.imm_str2bin(ext_settings);
                                    return context$2$0.abrupt('return', res);

                                case 82:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'loadThermistorExtra',
                    value: function loadThermistorExtra(funcId, jsonExtra) {
                        var values, url, curr, currTemp, ofs, size;
                        return _regeneratorRuntime.async(function loadThermistorExtra$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    values = [];
                                    url = undefined;
                                    curr = undefined;
                                    currTemp = undefined;
                                    ofs = undefined;
                                    size = undefined;

                                    url = 'api/' + funcId + '.json?command=Z';
                                    context$2$0.next = 9;
                                    return _regeneratorRuntime.awrap(this._download(url));

                                case 9:
                                    values = this.imm_json_get_array(this._yapi.imm_str2bin(jsonExtra));
                                    ofs = 0;
                                    size = values.length;

                                case 12:
                                    if (!(ofs + 1 < size)) {
                                        context$2$0.next = 21;
                                        break;
                                    }

                                    curr = values[ofs];
                                    currTemp = values[ofs + 1];
                                    url = 'api/' + funcId + '/.json?command=m' + curr + ':' + currTemp;
                                    context$2$0.next = 18;
                                    return _regeneratorRuntime.awrap(this._download(url));

                                case 18:
                                    ofs = ofs + 2;
                                    context$2$0.next = 12;
                                    break;

                                case 21:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 22:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_extraSettings',
                    value: function set_extraSettings(jsonExtra) {
                        var extras, functionId, data, ii;
                        return _regeneratorRuntime.async(function set_extraSettings$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    extras = [];
                                    functionId = undefined;
                                    data = undefined;

                                    extras = this.imm_json_get_array(this._yapi.imm_str2bin(jsonExtra));
                                    context$2$0.t0 = _regeneratorRuntime.keys(extras);

                                case 5:
                                    if ((context$2$0.t1 = context$2$0.t0()).done) {
                                        context$2$0.next = 17;
                                        break;
                                    }

                                    ii = context$2$0.t1.value;

                                    functionId = this.imm_get_json_path(extras[ii], 'fid');
                                    functionId = this.imm_decode_json_string(functionId);
                                    data = this.imm_get_json_path(extras[ii], 'json');
                                    context$2$0.next = 12;
                                    return _regeneratorRuntime.awrap(this.hasFunction(functionId));

                                case 12:
                                    if (!context$2$0.sent) {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    context$2$0.next = 15;
                                    return _regeneratorRuntime.awrap(this.loadThermistorExtra(functionId, data));

                                case 15:
                                    context$2$0.next = 5;
                                    break;

                                case 17:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 18:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_allSettingsAndFiles',
                    value: function set_allSettingsAndFiles(settings) {
                        var down, json, json_api, json_files, json_extra, files, res, _name, data, ii;

                        return _regeneratorRuntime.async(function set_allSettingsAndFiles$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    down = undefined;
                                    json = undefined;
                                    json_api = undefined;
                                    json_files = undefined;
                                    json_extra = undefined;

                                    json = this._yapi.imm_bin2str(settings);
                                    json_api = this.imm_get_json_path(json, 'api');

                                    if (!(json_api == '')) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    context$2$0.next = 10;
                                    return _regeneratorRuntime.awrap(this.set_allSettings(settings));

                                case 10:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 11:
                                    json_extra = this.imm_get_json_path(json, 'extras');

                                    if (json_extra == '') {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    context$2$0.next = 15;
                                    return _regeneratorRuntime.awrap(this.set_extraSettings(json_extra));

                                case 15:
                                    context$2$0.next = 17;
                                    return _regeneratorRuntime.awrap(this.set_allSettings(this._yapi.imm_str2bin(json_api)));

                                case 17:
                                    context$2$0.next = 19;
                                    return _regeneratorRuntime.awrap(this.hasFunction('files'));

                                case 19:
                                    if (!context$2$0.sent) {
                                        context$2$0.next = 45;
                                        break;
                                    }

                                    files = [];
                                    res = undefined;
                                    _name = undefined;
                                    data = undefined;
                                    context$2$0.next = 26;
                                    return _regeneratorRuntime.awrap(this._download('files.json?a=format'));

                                case 26:
                                    down = context$2$0.sent;

                                    res = this.imm_get_json_path(this._yapi.imm_bin2str(down), 'res');
                                    res = this.imm_decode_json_string(res);

                                    if (res == 'ok') {
                                        context$2$0.next = 31;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_IO_ERROR, 'format failed', YAPI_IO_ERROR));

                                case 31:
                                    json_files = this.imm_get_json_path(json, 'files');
                                    files = this.imm_json_get_array(this._yapi.imm_str2bin(json_files));
                                    context$2$0.t0 = _regeneratorRuntime.keys(files);

                                case 34:
                                    if ((context$2$0.t1 = context$2$0.t0()).done) {
                                        context$2$0.next = 45;
                                        break;
                                    }

                                    ii = context$2$0.t1.value;

                                    _name = this.imm_get_json_path(files[ii], 'name');
                                    _name = this.imm_decode_json_string(_name);
                                    data = this.imm_get_json_path(files[ii], 'data');
                                    data = this.imm_decode_json_string(data);
                                    context$2$0.next = 42;
                                    return _regeneratorRuntime.awrap(this._upload(_name, this._yapi.imm_hexstr2bin(data)));

                                case 42:
                                    ;
                                    context$2$0.next = 34;
                                    break;

                                case 45:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 46:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'hasFunction',
                    value: function hasFunction(funcId) {
                        var count, i, fid;
                        return _regeneratorRuntime.async(function hasFunction$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    count = undefined;
                                    i = undefined;
                                    fid = undefined;
                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this.functionCount());

                                case 5:
                                    count = context$2$0.sent;

                                    i = 0;

                                case 7:
                                    if (!(i < count)) {
                                        context$2$0.next = 16;
                                        break;
                                    }

                                    context$2$0.next = 10;
                                    return _regeneratorRuntime.awrap(this.functionId(i));

                                case 10:
                                    fid = context$2$0.sent;

                                    if (!(fid == funcId)) {
                                        context$2$0.next = 13;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', true);

                                case 13:
                                    i = i + 1;
                                    context$2$0.next = 7;
                                    break;

                                case 16:
                                    return context$2$0.abrupt('return', false);

                                case 17:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_functionIds',
                    value: function get_functionIds(funType) {
                        var count, i, ftype, res;
                        return _regeneratorRuntime.async(function get_functionIds$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    count = undefined;
                                    i = undefined;
                                    ftype = undefined;
                                    res = [];
                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this.functionCount());

                                case 6:
                                    count = context$2$0.sent;

                                    i = 0;

                                case 8:
                                    if (!(i < count)) {
                                        context$2$0.next = 32;
                                        break;
                                    }

                                    context$2$0.next = 11;
                                    return _regeneratorRuntime.awrap(this.functionType(i));

                                case 11:
                                    ftype = context$2$0.sent;

                                    if (!(ftype == funType)) {
                                        context$2$0.next = 20;
                                        break;
                                    }

                                    context$2$0.t0 = res;
                                    context$2$0.next = 16;
                                    return _regeneratorRuntime.awrap(this.functionId(i));

                                case 16:
                                    context$2$0.t1 = context$2$0.sent;
                                    context$2$0.t0.push.call(context$2$0.t0, context$2$0.t1);
                                    context$2$0.next = 29;
                                    break;

                                case 20:
                                    context$2$0.next = 22;
                                    return _regeneratorRuntime.awrap(this.functionBaseType(i));

                                case 22:
                                    ftype = context$2$0.sent;

                                    if (!(ftype == funType)) {
                                        context$2$0.next = 29;
                                        break;
                                    }

                                    context$2$0.t2 = res;
                                    context$2$0.next = 27;
                                    return _regeneratorRuntime.awrap(this.functionId(i));

                                case 27:
                                    context$2$0.t3 = context$2$0.sent;
                                    context$2$0.t2.push.call(context$2$0.t2, context$2$0.t3);

                                case 29:
                                    i = i + 1;
                                    context$2$0.next = 8;
                                    break;

                                case 32:
                                    return context$2$0.abrupt('return', res);

                                case 33:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'calibVersion',
                    value: function calibVersion(cparams) {
                        return _regeneratorRuntime.async(function calibVersion$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(cparams == '0,')) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', 3);

                                case 2:
                                    if (!(cparams.indexOf(',') >= 0)) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    if (!(cparams.indexOf(' ') > 0)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', 3);

                                case 7:
                                    return context$2$0.abrupt('return', 1);

                                case 8:
                                    if (!(cparams == '' || cparams == '0')) {
                                        context$2$0.next = 10;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', 1);

                                case 10:
                                    if (!(cparams.length < 2 || cparams.indexOf('.') >= 0)) {
                                        context$2$0.next = 14;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', 0);

                                case 14:
                                    return context$2$0.abrupt('return', 2);

                                case 15:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'calibScale',
                    value: function calibScale(unit_name, sensorType) {
                        return _regeneratorRuntime.async(function calibScale$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(unit_name == 'g' || unit_name == 'gauss' || unit_name == 'W')) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', 1000);

                                case 2:
                                    if (!(unit_name == 'C')) {
                                        context$2$0.next = 10;
                                        break;
                                    }

                                    if (!(sensorType == '')) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', 16);

                                case 5:
                                    if (!(this._yapi.imm_atoi(sensorType) < 8)) {
                                        context$2$0.next = 9;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', 16);

                                case 9:
                                    return context$2$0.abrupt('return', 100);

                                case 10:
                                    if (!(unit_name == 'm' || unit_name == 'deg')) {
                                        context$2$0.next = 12;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', 10);

                                case 12:
                                    return context$2$0.abrupt('return', 1);

                                case 13:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'calibOffset',
                    value: function calibOffset(unit_name) {
                        return _regeneratorRuntime.async(function calibOffset$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(unit_name == '% RH' || unit_name == 'mbar' || unit_name == 'lx')) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', 0);

                                case 2:
                                    return context$2$0.abrupt('return', 32767);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'calibConvert',
                    value: function calibConvert(param, currentFuncValue, unit_name, sensorType) {
                        var paramVer, funVer, funScale, funOffset, paramScale, paramOffset, words, words_str, calibData, iCalib, calibType, i, maxSize, ratio, nPoints, wordVal, ii;
                        return _regeneratorRuntime.async(function calibConvert$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    paramVer = undefined;
                                    funVer = undefined;
                                    funScale = undefined;
                                    funOffset = undefined;
                                    paramScale = undefined;
                                    paramOffset = undefined;
                                    words = [];
                                    words_str = [];
                                    calibData = [];
                                    iCalib = [];
                                    calibType = undefined;
                                    i = undefined;
                                    maxSize = undefined;
                                    ratio = undefined;
                                    nPoints = undefined;
                                    wordVal = undefined;
                                    context$2$0.next = 18;
                                    return _regeneratorRuntime.awrap(this.calibVersion(param));

                                case 18:
                                    paramVer = context$2$0.sent;
                                    context$2$0.next = 21;
                                    return _regeneratorRuntime.awrap(this.calibVersion(currentFuncValue));

                                case 21:
                                    funVer = context$2$0.sent;
                                    context$2$0.next = 24;
                                    return _regeneratorRuntime.awrap(this.calibScale(unit_name, sensorType));

                                case 24:
                                    funScale = context$2$0.sent;
                                    context$2$0.next = 27;
                                    return _regeneratorRuntime.awrap(this.calibOffset(unit_name));

                                case 27:
                                    funOffset = context$2$0.sent;

                                    paramScale = funScale;
                                    paramOffset = funOffset;
                                    if (funVer < 3) {
                                        if (funVer == 2) {
                                            words = this._yapi.imm_decodeWords(currentFuncValue);
                                            if (words[0] == 1366 && words[1] == 12500) {
                                                funScale = 1;
                                                funOffset = 0;
                                            } else {
                                                funScale = words[1];
                                                funOffset = words[0];
                                            }
                                        } else {
                                            if (funVer == 1) {
                                                if (currentFuncValue == '' || this._yapi.imm_atoi(currentFuncValue) > 10) {
                                                    funScale = 0;
                                                }
                                            }
                                        }
                                    }
                                    calibData.length = 0;
                                    calibType = 0;
                                    if (paramVer < 3) {
                                        if (paramVer == 2) {
                                            words = this._yapi.imm_decodeWords(param);
                                            if (words[0] == 1366 && words[1] == 12500) {
                                                paramScale = 1;
                                                paramOffset = 0;
                                            } else {
                                                paramScale = words[1];
                                                paramOffset = words[0];
                                            }
                                            if (words.length >= 3 && words[2] > 0) {
                                                maxSize = 3 + 2 * (words[2] % 10);
                                                if (maxSize > words.length) {
                                                    maxSize = words.length;
                                                }
                                                i = 3;
                                                while (i < maxSize) {
                                                    calibData.push(words[i]);
                                                    i = i + 1;
                                                }
                                            }
                                        } else {
                                            if (paramVer == 1) {
                                                words_str = param.split(',');
                                                for (ii in words_str) {
                                                    words.push(this._yapi.imm_atoi(words_str[ii]));
                                                }
                                                if (param == '' || words[0] > 10) {
                                                    paramScale = 0;
                                                }
                                                if (words.length > 0 && words[0] > 0) {
                                                    maxSize = 1 + 2 * (words[0] % 10);
                                                    if (maxSize > words.length) {
                                                        maxSize = words.length;
                                                    }
                                                    i = 1;
                                                    while (i < maxSize) {
                                                        calibData.push(words[i]);
                                                        i = i + 1;
                                                    }
                                                }
                                            } else {
                                                if (paramVer == 0) {
                                                    ratio = parseFloat(param);
                                                    if (ratio > 0) {
                                                        calibData.push(0.0);
                                                        calibData.push(0.0);
                                                        calibData.push(Math.round(65535 / ratio));
                                                        calibData.push(65535.0);
                                                    }
                                                }
                                            }
                                        }
                                        i = 0;
                                        while (i < calibData.length) {
                                            if (paramScale > 0) {
                                                calibData[i] = (calibData[i] - paramOffset) / paramScale;
                                            } else {
                                                calibData[i] = this._yapi.imm_decimalToDouble(Math.round(calibData[i]));
                                            }
                                            i = i + 1;
                                        }
                                    } else {
                                        iCalib = this._yapi.imm_decodeFloats(param);
                                        calibType = Math.round(iCalib[0] / 1000.0);
                                        if (calibType >= 30) {
                                            calibType = calibType - 30;
                                        }
                                        i = 1;
                                        while (i < iCalib.length) {
                                            calibData.push(iCalib[i] / 1000.0);
                                            i = i + 1;
                                        }
                                    }
                                    if (funVer >= 3) {
                                        if (calibData.length == 0) {
                                            param = '0,';
                                        } else {
                                            param = 30 + calibType;
                                            i = 0;
                                            while (i < calibData.length) {
                                                if ((i & 1) > 0) {
                                                    param = param + ':';
                                                } else {
                                                    param = param + ' ';
                                                }
                                                param = param + Math.round(calibData[i] * 1000.0 / 1000.0);
                                                i = i + 1;
                                            }
                                            param = param + ',';
                                        }
                                    } else {
                                        if (funVer >= 1) {
                                            nPoints = parseInt(calibData.length / 2, 10);
                                            param = nPoints;
                                            i = 0;
                                            while (i < 2 * nPoints) {
                                                if (funScale == 0) {
                                                    wordVal = this._yapi.imm_doubleToDecimal(Math.round(calibData[i]));
                                                } else {
                                                    wordVal = calibData[i] * funScale + funOffset;
                                                }
                                                param = param + ',' + Math.round(wordVal);
                                                i = i + 1;
                                            }
                                        } else {
                                            if (calibData.length == 4) {
                                                param = Math.round(1000 * (calibData[3] - calibData[1]) / calibData[2] - calibData[0]);
                                            }
                                        }
                                    }
                                    return context$2$0.abrupt('return', param);

                                case 36:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_allSettings',
                    value: function set_allSettings(settings) {
                        var restoreLast, old_json_flat, old_dslist, old_jpath, old_jpath_len, old_val_arr, actualSettings, new_dslist, new_jpath, new_jpath_len, new_val_arr, cpos, eqpos, leng, i, j, njpath, jpath, fun, attr, value, url, tmp, new_calib, sensorType, unit_name, newval, oldval, old_calib, each_str, do_update, found, ii;
                        return _regeneratorRuntime.async(function set_allSettings$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    restoreLast = [];
                                    old_json_flat = undefined;
                                    old_dslist = [];
                                    old_jpath = [];
                                    old_jpath_len = [];
                                    old_val_arr = [];
                                    actualSettings = undefined;
                                    new_dslist = [];
                                    new_jpath = [];
                                    new_jpath_len = [];
                                    new_val_arr = [];
                                    cpos = undefined;
                                    eqpos = undefined;
                                    leng = undefined;
                                    i = undefined;
                                    j = undefined;
                                    njpath = undefined;
                                    jpath = undefined;
                                    fun = undefined;
                                    attr = undefined;
                                    value = undefined;
                                    url = undefined;
                                    tmp = undefined;
                                    new_calib = undefined;
                                    sensorType = undefined;
                                    unit_name = undefined;
                                    newval = undefined;
                                    oldval = undefined;
                                    old_calib = undefined;
                                    each_str = undefined;
                                    do_update = undefined;
                                    found = undefined;

                                    tmp = this._yapi.imm_bin2str(settings);
                                    tmp = this.imm_get_json_path(tmp, 'api');
                                    if (!(tmp == '')) {
                                        settings = this._yapi.imm_str2bin(tmp);
                                    }
                                    oldval = '';
                                    newval = '';
                                    old_json_flat = this.imm_flattenJsonStruct(settings);
                                    old_dslist = this.imm_json_get_array(old_json_flat);
                                    context$2$0.t0 = _regeneratorRuntime.keys(old_dslist);

                                case 40:
                                    if ((context$2$0.t1 = context$2$0.t0()).done) {
                                        context$2$0.next = 57;
                                        break;
                                    }

                                    ii = context$2$0.t1.value;

                                    each_str = this.imm_json_get_string(this._yapi.imm_str2bin(old_dslist[ii]));
                                    leng = each_str.length;
                                    eqpos = each_str.indexOf('=');

                                    if (!(eqpos < 0 || leng == 0)) {
                                        context$2$0.next = 48;
                                        break;
                                    }

                                    this._throw(YAPI_INVALID_ARGUMENT, 'Invalid settings');
                                    return context$2$0.abrupt('return', YAPI_INVALID_ARGUMENT);

                                case 48:
                                    jpath = each_str.substr(0, eqpos);
                                    eqpos = eqpos + 1;
                                    value = each_str.substr(eqpos, leng - eqpos);
                                    old_jpath.push(jpath);
                                    old_jpath_len.push(jpath.length);
                                    old_val_arr.push(value);;
                                    context$2$0.next = 40;
                                    break;

                                case 57:
                                    context$2$0.next = 59;
                                    return _regeneratorRuntime.awrap(this._download('api.json'));

                                case 59:
                                    actualSettings = context$2$0.sent;

                                    actualSettings = this.imm_flattenJsonStruct(actualSettings);
                                    new_dslist = this.imm_json_get_array(actualSettings);
                                    context$2$0.t2 = _regeneratorRuntime.keys(new_dslist);

                                case 63:
                                    if ((context$2$0.t3 = context$2$0.t2()).done) {
                                        context$2$0.next = 80;
                                        break;
                                    }

                                    ii = context$2$0.t3.value;

                                    each_str = this.imm_json_get_string(this._yapi.imm_str2bin(new_dslist[ii]));
                                    leng = each_str.length;
                                    eqpos = each_str.indexOf('=');

                                    if (!(eqpos < 0 || leng == 0)) {
                                        context$2$0.next = 71;
                                        break;
                                    }

                                    this._throw(YAPI_INVALID_ARGUMENT, 'Invalid settings');
                                    return context$2$0.abrupt('return', YAPI_INVALID_ARGUMENT);

                                case 71:
                                    jpath = each_str.substr(0, eqpos);
                                    eqpos = eqpos + 1;
                                    value = each_str.substr(eqpos, leng - eqpos);
                                    new_jpath.push(jpath);
                                    new_jpath_len.push(jpath.length);
                                    new_val_arr.push(value);;
                                    context$2$0.next = 63;
                                    break;

                                case 80:
                                    i = 0;

                                case 81:
                                    if (!(i < new_jpath.length)) {
                                        context$2$0.next = 164;
                                        break;
                                    }

                                    njpath = new_jpath[i];
                                    leng = njpath.length;
                                    cpos = njpath.indexOf('/');

                                    if (!(cpos < 0 || leng == 0)) {
                                        context$2$0.next = 87;
                                        break;
                                    }

                                    return context$2$0.abrupt('continue', 81);

                                case 87:
                                    fun = njpath.substr(0, cpos);
                                    cpos = cpos + 1;
                                    attr = njpath.substr(cpos, leng - cpos);
                                    do_update = true;
                                    if (fun == 'services') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'firmwareRelease') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'usbCurrent') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'upTime') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'persistentSettings') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'adminPassword') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'userPassword') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'rebootCountdown') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'advertisedValue') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'poeCurrent') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'readiness') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'ipAddress') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'subnetMask') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'router') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'linkQuality') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'ssid') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'channel') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'security') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'message') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'currentValue') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'currentRawValue') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'currentRunIndex') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'pulseTimer') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'lastTimePressed') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'lastTimeReleased') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'filesCount') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'freeSpace') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'timeUTC') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'rtcTime') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'unixTime') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'dateTime') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'rawValue') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'lastMsg') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'delayedPulseTimer') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'rxCount') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'txCount') {
                                        do_update = false;
                                    }
                                    if (do_update && attr == 'msgCount') {
                                        do_update = false;
                                    }
                                    if (do_update) {
                                        do_update = false;
                                        newval = new_val_arr[i];
                                        j = 0;
                                        found = false;
                                        while (j < old_jpath.length && !found) {
                                            if (new_jpath_len[i] == old_jpath_len[j] && new_jpath[i] == old_jpath[j]) {
                                                found = true;
                                                oldval = old_val_arr[j];
                                                if (!(newval == oldval)) {
                                                    do_update = true;
                                                }
                                            }
                                            j = j + 1;
                                        }
                                    }

                                    if (!do_update) {
                                        context$2$0.next = 161;
                                        break;
                                    }

                                    if (!(attr == 'calibrationParam')) {
                                        context$2$0.next = 154;
                                        break;
                                    }

                                    old_calib = '';
                                    unit_name = '';
                                    sensorType = '';
                                    new_calib = newval;
                                    j = 0;
                                    found = false;
                                    while (j < old_jpath.length && !found) {
                                        if (new_jpath_len[i] == old_jpath_len[j] && new_jpath[i] == old_jpath[j]) {
                                            found = true;
                                            old_calib = old_val_arr[j];
                                        }
                                        j = j + 1;
                                    }
                                    tmp = fun + '/unit';
                                    j = 0;
                                    found = false;
                                    while (j < new_jpath.length && !found) {
                                        if (tmp == new_jpath[j]) {
                                            found = true;
                                            unit_name = new_val_arr[j];
                                        }
                                        j = j + 1;
                                    }
                                    tmp = fun + '/sensorType';
                                    j = 0;
                                    found = false;
                                    while (j < new_jpath.length && !found) {
                                        if (tmp == new_jpath[j]) {
                                            found = true;
                                            sensorType = new_val_arr[j];
                                        }
                                        j = j + 1;
                                    }
                                    context$2$0.next = 148;
                                    return _regeneratorRuntime.awrap(this.calibConvert(old_calib, new_val_arr[i], unit_name, sensorType));

                                case 148:
                                    newval = context$2$0.sent;

                                    url = 'api/' + fun + '.json?' + attr + '=' + this.imm_escapeAttr(newval);
                                    context$2$0.next = 152;
                                    return _regeneratorRuntime.awrap(this._download(url));

                                case 152:
                                    context$2$0.next = 161;
                                    break;

                                case 154:
                                    url = 'api/' + fun + '.json?' + attr + '=' + this.imm_escapeAttr(oldval);

                                    if (!(attr == 'resolution')) {
                                        context$2$0.next = 159;
                                        break;
                                    }

                                    restoreLast.push(url);
                                    context$2$0.next = 161;
                                    break;

                                case 159:
                                    context$2$0.next = 161;
                                    return _regeneratorRuntime.awrap(this._download(url));

                                case 161:
                                    i = i + 1;
                                    context$2$0.next = 81;
                                    break;

                                case 164:
                                    context$2$0.t4 = _regeneratorRuntime.keys(restoreLast);

                                case 165:
                                    if ((context$2$0.t5 = context$2$0.t4()).done) {
                                        context$2$0.next = 172;
                                        break;
                                    }

                                    ii = context$2$0.t5.value;
                                    context$2$0.next = 169;
                                    return _regeneratorRuntime.awrap(this._download(restoreLast[ii]));

                                case 169:
                                    ;
                                    context$2$0.next = 165;
                                    break;

                                case 172:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 173:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'download',
                    value: function download(pathname) {
                        return _regeneratorRuntime.async(function download$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._download(pathname));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_icon2d',
                    value: function get_icon2d() {
                        return _regeneratorRuntime.async(function get_icon2d$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._download('icon2d.png'));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_lastLogs',
                    value: function get_lastLogs() {
                        var content;
                        return _regeneratorRuntime.async(function get_lastLogs$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    content = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this._download('logs.txt'));

                                case 3:
                                    content = context$2$0.sent;
                                    return context$2$0.abrupt('return', this._yapi.imm_bin2str(content));

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextModule',
                    value: function nextModule() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YModule.FindModuleInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindModule',
                    value: function FindModule(func) {
                        var obj = undefined;

                        obj = YFunction._FindFromCache('Module', func);
                        if (obj == null) {
                            obj = new YModule(YAPI, func);
                            YFunction._AddToCache('Module', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindModuleInContext',
                    value: function FindModuleInContext(yctx, func) {
                        var obj = undefined;

                        obj = YFunction._FindFromCacheInContext(yctx, 'Module', func);
                        if (obj == null) {
                            obj = new YModule(yctx, func);
                            YFunction._AddToCache('Module', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstModule',
                    value: function FirstModule() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Module');
                        if (next_hwid == null) return null;
                        return YModule.FindModule(next_hwid);
                    }
                }, {
                    key: 'FirstModuleInContext',
                    value: function FirstModuleInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Module');
                        if (next_hwid == null) return null;
                        return YModule.FindModuleInContext(yctx, next_hwid);
                    }
                }]);

                return YModule;
            })(YFunction);

            _export('YModule', YModule);

            YSensor = (function (_YFunction2) {
                _inherits(YSensor, _YFunction2);

                function YSensor(obj_yapi, str_func) {
                    _classCallCheck(this, YSensor);

                    _get(Object.getPrototypeOf(YSensor.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Sensor';

                    this._unit = Y_UNIT_INVALID;

                    this._currentValue = Y_CURRENTVALUE_INVALID;

                    this._lowestValue = Y_LOWESTVALUE_INVALID;

                    this._highestValue = Y_HIGHESTVALUE_INVALID;

                    this._currentRawValue = Y_CURRENTRAWVALUE_INVALID;

                    this._logFrequency = Y_LOGFREQUENCY_INVALID;

                    this._reportFrequency = Y_REPORTFREQUENCY_INVALID;

                    this._calibrationParam = Y_CALIBRATIONPARAM_INVALID;

                    this._resolution = Y_RESOLUTION_INVALID;

                    this._sensorState = Y_SENSORSTATE_INVALID;

                    this._timedReportCallbackSensor = null;

                    this._prevTimedReport = 0;

                    this._iresol = 0;

                    this._offset = 0;

                    this._scale = 0;

                    this._decexp = 0;

                    this._isScal = 0;

                    this._isScal32 = 0;

                    this._caltyp = 0;

                    this._calpar = [];

                    this._calraw = [];

                    this._calref = [];

                    this._calhdl = null;
                    this.imm_setConst({
                        UNIT_INVALID: YAPI_INVALID_STRING,
                        CURRENTVALUE_INVALID: YAPI_INVALID_DOUBLE,
                        LOWESTVALUE_INVALID: YAPI_INVALID_DOUBLE,
                        HIGHESTVALUE_INVALID: YAPI_INVALID_DOUBLE,
                        CURRENTRAWVALUE_INVALID: YAPI_INVALID_DOUBLE,
                        LOGFREQUENCY_INVALID: YAPI_INVALID_STRING,
                        REPORTFREQUENCY_INVALID: YAPI_INVALID_STRING,
                        CALIBRATIONPARAM_INVALID: YAPI_INVALID_STRING,
                        RESOLUTION_INVALID: YAPI_INVALID_DOUBLE,
                        SENSORSTATE_INVALID: YAPI_INVALID_INT
                    });
                }

                _createClass(YSensor, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'unit':
                                this._unit = val;
                                return 1;
                            case 'currentValue':
                                this._currentValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'lowestValue':
                                this._lowestValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'highestValue':
                                this._highestValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'currentRawValue':
                                this._currentRawValue = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'logFrequency':
                                this._logFrequency = val;
                                return 1;
                            case 'reportFrequency':
                                this._reportFrequency = val;
                                return 1;
                            case 'calibrationParam':
                                this._calibrationParam = val;
                                return 1;
                            case 'resolution':
                                this._resolution = Math.round(val * 1000.0 / 65536.0) / 1000.0;
                                return 1;
                            case 'sensorState':
                                this._sensorState = parseInt(val);
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YSensor.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_unit',
                    value: function get_unit() {
                        return _regeneratorRuntime.async(function get_unit$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_UNIT_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._unit);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_currentValue',
                    value: function get_currentValue() {
                        var res;
                        return _regeneratorRuntime.async(function get_currentValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    res = undefined;

                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 4:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CURRENTVALUE_INVALID);

                                case 8:
                                    context$2$0.next = 10;
                                    return _regeneratorRuntime.awrap(this._applyCalibration(this._currentRawValue));

                                case 10:
                                    res = context$2$0.sent;

                                    if (res == Y_CURRENTVALUE_INVALID) {
                                        res = this._currentValue;
                                    }
                                    res = res * this._iresol;
                                    return context$2$0.abrupt('return', Math.round(res) / this._iresol);

                                case 14:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_lowestValue',
                    value: function set_lowestValue(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_lowestValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('lowestValue', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_lowestValue',
                    value: function get_lowestValue() {
                        var res;
                        return _regeneratorRuntime.async(function get_lowestValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    res = undefined;

                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 4:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LOWESTVALUE_INVALID);

                                case 8:
                                    res = this._lowestValue * this._iresol;
                                    return context$2$0.abrupt('return', Math.round(res) / this._iresol);

                                case 10:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_highestValue',
                    value: function set_highestValue(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_highestValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('highestValue', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_highestValue',
                    value: function get_highestValue() {
                        var res;
                        return _regeneratorRuntime.async(function get_highestValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    res = undefined;

                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 4:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_HIGHESTVALUE_INVALID);

                                case 8:
                                    res = this._highestValue * this._iresol;
                                    return context$2$0.abrupt('return', Math.round(res) / this._iresol);

                                case 10:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_currentRawValue',
                    value: function get_currentRawValue() {
                        return _regeneratorRuntime.async(function get_currentRawValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CURRENTRAWVALUE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._currentRawValue);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_logFrequency',
                    value: function get_logFrequency() {
                        return _regeneratorRuntime.async(function get_logFrequency$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LOGFREQUENCY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._logFrequency);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_logFrequency',
                    value: function set_logFrequency(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_logFrequency$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('logFrequency', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_reportFrequency',
                    value: function get_reportFrequency() {
                        return _regeneratorRuntime.async(function get_reportFrequency$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_REPORTFREQUENCY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._reportFrequency);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_reportFrequency',
                    value: function set_reportFrequency(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_reportFrequency$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('reportFrequency', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_calibrationParam',
                    value: function get_calibrationParam() {
                        return _regeneratorRuntime.async(function get_calibrationParam$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CALIBRATIONPARAM_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._calibrationParam);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_calibrationParam',
                    value: function set_calibrationParam(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_calibrationParam$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('calibrationParam', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_resolution',
                    value: function set_resolution(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_resolution$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = String(Math.round(newval * 65536.0));
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('resolution', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_resolution',
                    value: function get_resolution() {
                        return _regeneratorRuntime.async(function get_resolution$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_RESOLUTION_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._resolution);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_sensorState',
                    value: function get_sensorState() {
                        return _regeneratorRuntime.async(function get_sensorState$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SENSORSTATE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._sensorState);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_parserHelper',
                    value: function _parserHelper() {
                        var position, maxpos, iCalib, iRaw, iRef, fRaw, fRef;
                        return _regeneratorRuntime.async(function _parserHelper$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    position = undefined;
                                    maxpos = undefined;
                                    iCalib = [];
                                    iRaw = undefined;
                                    iRef = undefined;
                                    fRaw = undefined;
                                    fRef = undefined;

                                    this._caltyp = -1;
                                    this._scale = -1;
                                    this._isScal32 = false;
                                    this._calpar.length = 0;
                                    this._calraw.length = 0;
                                    this._calref.length = 0;

                                    if (this._resolution > 0) {
                                        this._iresol = Math.round(1.0 / this._resolution);
                                    } else {
                                        this._iresol = 10000;
                                        this._resolution = 0.0001;
                                    }

                                    if (!(this._calibrationParam == '' || this._calibrationParam == '0')) {
                                        context$2$0.next = 17;
                                        break;
                                    }

                                    this._caltyp = 0;
                                    return context$2$0.abrupt('return', 0);

                                case 17:
                                    if (!(this._calibrationParam.indexOf(',') >= 0)) {
                                        context$2$0.next = 42;
                                        break;
                                    }

                                    iCalib = this._yapi.imm_decodeFloats(this._calibrationParam);
                                    this._caltyp = parseInt(iCalib[0] / 1000, 10);

                                    if (!(this._caltyp > 0)) {
                                        context$2$0.next = 28;
                                        break;
                                    }

                                    if (!(this._caltyp < YOCTO_CALIB_TYPE_OFS)) {
                                        context$2$0.next = 24;
                                        break;
                                    }

                                    this._caltyp = -1;
                                    return context$2$0.abrupt('return', 0);

                                case 24:
                                    this.imm_calhdl = this._yapi.imm_getCalibrationHandler(this._caltyp);

                                    if (this.imm_calhdl != null) {
                                        context$2$0.next = 28;
                                        break;
                                    }

                                    this._caltyp = -1;
                                    return context$2$0.abrupt('return', 0);

                                case 28:
                                    this._isScal = true;
                                    this._isScal32 = true;
                                    this._offset = 0;
                                    this._scale = 1000;
                                    maxpos = iCalib.length;
                                    this._calpar.length = 0;
                                    position = 1;
                                    while (position < maxpos) {
                                        this._calpar.push(iCalib[position]);
                                        position = position + 1;
                                    }
                                    this._calraw.length = 0;
                                    this._calref.length = 0;
                                    position = 1;
                                    while (position + 1 < maxpos) {
                                        fRaw = iCalib[position];
                                        fRaw = fRaw / 1000.0;
                                        fRef = iCalib[position + 1];
                                        fRef = fRef / 1000.0;
                                        this._calraw.push(fRaw);
                                        this._calref.push(fRef);
                                        position = position + 2;
                                    }
                                    context$2$0.next = 61;
                                    break;

                                case 42:
                                    iCalib = this._yapi.imm_decodeWords(this._calibrationParam);

                                    if (!(iCalib.length < 2)) {
                                        context$2$0.next = 46;
                                        break;
                                    }

                                    this._caltyp = -1;
                                    return context$2$0.abrupt('return', 0);

                                case 46:
                                    this._isScal = iCalib[1] > 0;
                                    if (this._isScal) {
                                        this._offset = iCalib[0];
                                        if (this._offset > 32767) {
                                            this._offset = this._offset - 65536;
                                        }
                                        this._scale = iCalib[1];
                                        this._decexp = 0;
                                    } else {
                                        this._offset = 0;
                                        this._scale = 1;
                                        this._decexp = 1.0;
                                        position = iCalib[0];
                                        while (position > 0) {
                                            this._decexp = this._decexp * 10;
                                            position = position - 1;
                                        }
                                    }

                                    if (!(iCalib.length == 2)) {
                                        context$2$0.next = 51;
                                        break;
                                    }

                                    this._caltyp = 0;
                                    return context$2$0.abrupt('return', 0);

                                case 51:
                                    this._caltyp = iCalib[2];
                                    this.imm_calhdl = this._yapi.imm_getCalibrationHandler(this._caltyp);
                                    if (this._caltyp <= 10) {
                                        maxpos = this._caltyp;
                                    } else {
                                        if (this._caltyp <= 20) {
                                            maxpos = this._caltyp - 10;
                                        } else {
                                            maxpos = 5;
                                        }
                                    }
                                    maxpos = 3 + 2 * maxpos;
                                    if (maxpos > iCalib.length) {
                                        maxpos = iCalib.length;
                                    }
                                    this._calpar.length = 0;
                                    this._calraw.length = 0;
                                    this._calref.length = 0;
                                    position = 3;
                                    while (position + 1 < maxpos) {
                                        iRaw = iCalib[position];
                                        iRef = iCalib[position + 1];
                                        this._calpar.push(iRaw);
                                        this._calpar.push(iRef);
                                        if (this._isScal) {
                                            fRaw = iRaw;
                                            fRaw = (fRaw - this._offset) / this._scale;
                                            fRef = iRef;
                                            fRef = (fRef - this._offset) / this._scale;
                                            this._calraw.push(fRaw);
                                            this._calref.push(fRef);
                                        } else {
                                            this._calraw.push(this._yapi.imm_decimalToDouble(iRaw));
                                            this._calref.push(this._yapi.imm_decimalToDouble(iRef));
                                        }
                                        position = position + 2;
                                    }

                                case 61:
                                    return context$2$0.abrupt('return', 0);

                                case 62:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'isSensorReady',
                    value: function isSensorReady() {
                        return _regeneratorRuntime.async(function isSensorReady$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.isOnline());

                                case 2:
                                    if (context$2$0.sent) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', false);

                                case 4:
                                    if (this._sensorState == 0) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', false);

                                case 6:
                                    return context$2$0.abrupt('return', true);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'startDataLogger',
                    value: function startDataLogger() {
                        var res;
                        return _regeneratorRuntime.async(function startDataLogger$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    res = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this._download('api/dataLogger/recording?recording=1'));

                                case 3:
                                    res = context$2$0.sent;

                                    if (res.length > 0) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_IO_ERROR, 'unable to start datalogger', YAPI_IO_ERROR));

                                case 6:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'stopDataLogger',
                    value: function stopDataLogger() {
                        var res;
                        return _regeneratorRuntime.async(function stopDataLogger$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    res = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this._download('api/dataLogger/recording?recording=0'));

                                case 3:
                                    res = context$2$0.sent;

                                    if (res.length > 0) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_IO_ERROR, 'unable to stop datalogger', YAPI_IO_ERROR));

                                case 6:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_recordedData',
                    value: function get_recordedData(startTime, endTime) {
                        var funcid, funit;
                        return _regeneratorRuntime.async(function get_recordedData$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    funcid = undefined;
                                    funit = undefined;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.get_functionId());

                                case 4:
                                    funcid = context$2$0.sent;
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this.get_unit());

                                case 7:
                                    funit = context$2$0.sent;
                                    return context$2$0.abrupt('return', new YDataSet(this, funcid, funit, startTime, endTime));

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'registerTimedReportCallback',
                    value: function registerTimedReportCallback(callback) {
                        return _regeneratorRuntime.async(function registerTimedReportCallback$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(callback != null)) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(YFunction._UpdateTimedReportCallbackList(this, true));

                                case 3:
                                    context$2$0.next = 7;
                                    break;

                                case 5:
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(YFunction._UpdateTimedReportCallbackList(this, false));

                                case 7:
                                    this._timedReportCallbackSensor = callback;
                                    return context$2$0.abrupt('return', 0);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_invokeTimedReportCallback',
                    value: function _invokeTimedReportCallback(value) {
                        return _regeneratorRuntime.async(function _invokeTimedReportCallback$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._timedReportCallbackSensor != null)) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this._timedReportCallbackSensor(this, value));

                                case 3:
                                    context$2$0.next = 5;
                                    break;

                                case 5:
                                    return context$2$0.abrupt('return', 0);

                                case 6:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'calibrateFromPoints',
                    value: function calibrateFromPoints(rawValues, refValues) {
                        var rest_val;
                        return _regeneratorRuntime.async(function calibrateFromPoints$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this._encodeCalibrationPoints(rawValues, refValues));

                                case 3:
                                    rest_val = context$2$0.sent;
                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this._setAttr('calibrationParam', rest_val));

                                case 6:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'loadCalibrationPoints',
                    value: function loadCalibrationPoints(rawValues, refValues) {
                        var ii;
                        return _regeneratorRuntime.async(function loadCalibrationPoints$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rawValues.length = 0;
                                    refValues.length = 0;

                                    if (!(this._scale == 0)) {
                                        context$2$0.next = 9;
                                        break;
                                    }

                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 5:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 9;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_DEVICE_NOT_FOUND);

                                case 9:
                                    if (!(this._caltyp < 0)) {
                                        context$2$0.next = 12;
                                        break;
                                    }

                                    this._throw(YAPI_NOT_SUPPORTED, 'Calibration parameters format mismatch. Please upgrade your library or firmware.');
                                    return context$2$0.abrupt('return', YAPI_NOT_SUPPORTED);

                                case 12:
                                    rawValues.length = 0;
                                    refValues.length = 0;
                                    for (ii in this._calraw) {
                                        rawValues.push(this._calraw[ii]);
                                    }
                                    for (ii in this._calref) {
                                        refValues.push(this._calref[ii]);
                                    }
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 17:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_encodeCalibrationPoints',
                    value: function _encodeCalibrationPoints(rawValues, refValues) {
                        var res, npt, idx, iRaw, iRef;
                        return _regeneratorRuntime.async(function _encodeCalibrationPoints$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    res = undefined;
                                    npt = undefined;
                                    idx = undefined;
                                    iRaw = undefined;
                                    iRef = undefined;

                                    npt = rawValues.length;

                                    if (!(npt != refValues.length)) {
                                        context$2$0.next = 9;
                                        break;
                                    }

                                    this._throw(YAPI_INVALID_ARGUMENT, 'Invalid calibration parameters (size mismatch)');
                                    return context$2$0.abrupt('return', YAPI_INVALID_STRING);

                                case 9:
                                    if (!(npt == 0)) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', '0');

                                case 11:
                                    if (!(this._scale == 0)) {
                                        context$2$0.next = 18;
                                        break;
                                    }

                                    context$2$0.next = 14;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 14:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 18;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_INVALID_STRING);

                                case 18:
                                    if (!(this._caltyp < 0 || this._scale < 0)) {
                                        context$2$0.next = 21;
                                        break;
                                    }

                                    this._throw(YAPI_NOT_SUPPORTED, 'Calibration parameters format mismatch. Please upgrade your library or firmware.');
                                    return context$2$0.abrupt('return', '0');

                                case 21:
                                    if (this._isScal32) {
                                        res = String(Math.round(YOCTO_CALIB_TYPE_OFS));
                                        idx = 0;
                                        while (idx < npt) {
                                            res = res + ',' + String(Math.round(rawValues[idx] * 1000) / 1000) + ',' + String(Math.round(refValues[idx] * 1000) / 1000);
                                            idx = idx + 1;
                                        }
                                    } else {
                                        if (this._isScal) {
                                            res = String(Math.round(npt));
                                            idx = 0;
                                            while (idx < npt) {
                                                iRaw = Math.round(rawValues[idx] * this._scale + this._offset);
                                                iRef = Math.round(refValues[idx] * this._scale + this._offset);
                                                res = res + ',' + String(Math.round(iRaw)) + ',' + String(Math.round(iRef));
                                                idx = idx + 1;
                                            }
                                        } else {
                                            res = String(Math.round(10 + npt));
                                            idx = 0;
                                            while (idx < npt) {
                                                iRaw = this._yapi.imm_doubleToDecimal(rawValues[idx]);
                                                iRef = this._yapi.imm_doubleToDecimal(refValues[idx]);
                                                res = res + ',' + String(Math.round(iRaw)) + ',' + String(Math.round(iRef));
                                                idx = idx + 1;
                                            }
                                        }
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 23:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_applyCalibration',
                    value: function _applyCalibration(rawValue) {
                        return _regeneratorRuntime.async(function _applyCalibration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(rawValue == Y_CURRENTVALUE_INVALID)) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CURRENTVALUE_INVALID);

                                case 2:
                                    if (!(this._caltyp == 0)) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', rawValue);

                                case 4:
                                    if (!(this._caltyp < 0)) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CURRENTVALUE_INVALID);

                                case 6:
                                    if (this.imm_calhdl != null) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CURRENTVALUE_INVALID);

                                case 8:
                                    return context$2$0.abrupt('return', this.imm_calhdl(rawValue, this._caltyp, this._calpar, this._calraw, this._calref));

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_decodeTimedReport',
                    value: function _decodeTimedReport(timestamp, report) {
                        var i, byteVal, poww, minRaw, avgRaw, maxRaw, sublen, difRaw, startTime, endTime, minVal, avgVal, maxVal;
                        return _regeneratorRuntime.async(function _decodeTimedReport$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    i = undefined;
                                    byteVal = undefined;
                                    poww = undefined;
                                    minRaw = undefined;
                                    avgRaw = undefined;
                                    maxRaw = undefined;
                                    sublen = undefined;
                                    difRaw = undefined;
                                    startTime = undefined;
                                    endTime = undefined;
                                    minVal = undefined;
                                    avgVal = undefined;
                                    maxVal = undefined;

                                    startTime = this._prevTimedReport;
                                    endTime = timestamp;
                                    this._prevTimedReport = endTime;
                                    if (startTime == 0) {
                                        startTime = endTime;
                                    }
                                    if (report[0] == 2) {
                                        if (report.length <= 5) {
                                            poww = 1;
                                            avgRaw = 0;
                                            byteVal = 0;
                                            i = 1;
                                            while (i < report.length) {
                                                byteVal = report[i];
                                                avgRaw = avgRaw + poww * byteVal;
                                                poww = poww * 0x100;
                                                i = i + 1;
                                            }
                                            if ((byteVal & 0x80) != 0) {
                                                avgRaw = avgRaw - poww;
                                            }
                                            avgVal = avgRaw / 1000.0;
                                            if (this._caltyp != 0) {
                                                if (this.imm_calhdl != null) {
                                                    avgVal = this.imm_calhdl(avgVal, this._caltyp, this._calpar, this._calraw, this._calref);
                                                }
                                            }
                                            minVal = avgVal;
                                            maxVal = avgVal;
                                        } else {
                                            sublen = 1 + (report[1] & 3);
                                            poww = 1;
                                            avgRaw = 0;
                                            byteVal = 0;
                                            i = 2;
                                            while (sublen > 0 && i < report.length) {
                                                byteVal = report[i];
                                                avgRaw = avgRaw + poww * byteVal;
                                                poww = poww * 0x100;
                                                i = i + 1;
                                                sublen = sublen - 1;
                                            }
                                            if ((byteVal & 0x80) != 0) {
                                                avgRaw = avgRaw - poww;
                                            }
                                            sublen = 1 + (report[1] >> 2 & 3);
                                            poww = 1;
                                            difRaw = 0;
                                            while (sublen > 0 && i < report.length) {
                                                byteVal = report[i];
                                                difRaw = difRaw + poww * byteVal;
                                                poww = poww * 0x100;
                                                i = i + 1;
                                                sublen = sublen - 1;
                                            }
                                            minRaw = avgRaw - difRaw;
                                            sublen = 1 + (report[1] >> 4 & 3);
                                            poww = 1;
                                            difRaw = 0;
                                            while (sublen > 0 && i < report.length) {
                                                byteVal = report[i];
                                                difRaw = difRaw + poww * byteVal;
                                                poww = poww * 0x100;
                                                i = i + 1;
                                                sublen = sublen - 1;
                                            }
                                            maxRaw = avgRaw + difRaw;
                                            avgVal = avgRaw / 1000.0;
                                            minVal = minRaw / 1000.0;
                                            maxVal = maxRaw / 1000.0;
                                            if (this._caltyp != 0) {
                                                if (this.imm_calhdl != null) {
                                                    avgVal = this.imm_calhdl(avgVal, this._caltyp, this._calpar, this._calraw, this._calref);
                                                    minVal = this.imm_calhdl(minVal, this._caltyp, this._calpar, this._calraw, this._calref);
                                                    maxVal = this.imm_calhdl(maxVal, this._caltyp, this._calpar, this._calraw, this._calref);
                                                }
                                            }
                                        }
                                    } else {
                                        if (report[0] == 0) {
                                            poww = 1;
                                            avgRaw = 0;
                                            byteVal = 0;
                                            i = 1;
                                            while (i < report.length) {
                                                byteVal = report[i];
                                                avgRaw = avgRaw + poww * byteVal;
                                                poww = poww * 0x100;
                                                i = i + 1;
                                            }
                                            if (this._isScal) {
                                                avgVal = this.imm_decodeVal(avgRaw);
                                            } else {
                                                if ((byteVal & 0x80) != 0) {
                                                    avgRaw = avgRaw - poww;
                                                }
                                                avgVal = this.imm_decodeAvg(avgRaw);
                                            }
                                            minVal = avgVal;
                                            maxVal = avgVal;
                                        } else {
                                            minRaw = report[1] + 0x100 * report[2];
                                            maxRaw = report[3] + 0x100 * report[4];
                                            avgRaw = report[5] + 0x100 * report[6] + 0x10000 * report[7];
                                            byteVal = report[8];
                                            if ((byteVal & 0x80) == 0) {
                                                avgRaw = avgRaw + 0x1000000 * byteVal;
                                            } else {
                                                avgRaw = avgRaw - 0x1000000 * (0x100 - byteVal);
                                            }
                                            minVal = this.imm_decodeVal(minRaw);
                                            avgVal = this.imm_decodeAvg(avgRaw);
                                            maxVal = this.imm_decodeVal(maxRaw);
                                        }
                                    }
                                    return context$2$0.abrupt('return', new YMeasure(startTime, endTime, minVal, avgVal, maxVal));

                                case 19:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'imm_decodeVal',
                    value: function imm_decodeVal(w) {
                        var val = undefined;
                        val = w;
                        if (this._isScal) {
                            val = (val - this._offset) / this._scale;
                        } else {
                            val = this._yapi.imm_decimalToDouble(w);
                        }
                        if (this._caltyp != 0) {
                            if (this.imm_calhdl != null) {
                                val = this.imm_calhdl(val, this._caltyp, this._calpar, this._calraw, this._calref);
                            }
                        }
                        return val;
                    }
                }, {
                    key: 'imm_decodeAvg',
                    value: function imm_decodeAvg(dw) {
                        var val = undefined;
                        val = dw;
                        if (this._isScal) {
                            val = (val / 100 - this._offset) / this._scale;
                        } else {
                            val = val / this._decexp;
                        }
                        if (this._caltyp != 0) {
                            if (this.imm_calhdl != null) {
                                val = this.imm_calhdl(val, this._caltyp, this._calpar, this._calraw, this._calref);
                            }
                        }
                        return val;
                    }
                }, {
                    key: 'nextSensor',
                    value: function nextSensor() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YSensor.FindSensorInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindSensor',
                    value: function FindSensor(func) {
                        var obj = undefined;

                        obj = YFunction._FindFromCache('Sensor', func);
                        if (obj == null) {
                            obj = new YSensor(YAPI, func);
                            YFunction._AddToCache('Sensor', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindSensorInContext',
                    value: function FindSensorInContext(yctx, func) {
                        var obj = undefined;

                        obj = YFunction._FindFromCacheInContext(yctx, 'Sensor', func);
                        if (obj == null) {
                            obj = new YSensor(yctx, func);
                            YFunction._AddToCache('Sensor', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstSensor',
                    value: function FirstSensor() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Sensor');
                        if (next_hwid == null) return null;
                        return YSensor.FindSensor(next_hwid);
                    }
                }, {
                    key: 'FirstSensorInContext',
                    value: function FirstSensorInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Sensor');
                        if (next_hwid == null) return null;
                        return YSensor.FindSensorInContext(yctx, next_hwid);
                    }
                }]);

                return YSensor;
            })(YFunction);

            YMeasure = (function () {
                function YMeasure(float_start, float_end, float_minVal, float_avgVal, float_maxVal) {
                    _classCallCheck(this, YMeasure);

                    this._start = 0;

                    this._end = 0;

                    this._minVal = 0;

                    this._avgVal = 0;

                    this._maxVal = 0;

                    this._start = float_start;
                    this._end = float_end;
                    this._minVal = float_minVal;
                    this._avgVal = float_avgVal;
                    this._maxVal = float_maxVal;
                }

                _createClass(YMeasure, [{
                    key: 'get_startTimeUTC',
                    value: function get_startTimeUTC() {
                        return this._start;
                    }
                }, {
                    key: 'get_endTimeUTC',
                    value: function get_endTimeUTC() {
                        return this._end;
                    }
                }, {
                    key: 'get_minValue',
                    value: function get_minValue() {
                        return this._minVal;
                    }
                }, {
                    key: 'get_averageValue',
                    value: function get_averageValue() {
                        return this._avgVal;
                    }
                }, {
                    key: 'get_maxValue',
                    value: function get_maxValue() {
                        return this._maxVal;
                    }
                }, {
                    key: 'get_startTimeUTC_asDate',
                    value: function get_startTimeUTC_asDate() {
                        return new Date(Math.round(this._start * 1000));
                    }
                }, {
                    key: 'get_endTimeUTC_asDate',
                    value: function get_endTimeUTC_asDate() {
                        return new Date(Math.round(this._end * 1000));
                    }
                }]);

                return YMeasure;
            })();

            YDataStream = (function () {
                function YDataStream(obj_parent, obj_dataset, encoded) {
                    _classCallCheck(this, YDataStream);

                    this._parent = null;

                    this._runNo = 0;

                    this._utcStamp = 0;

                    this._nCols = 0;

                    this._nRows = 0;

                    this._duration = 0;

                    this._columnNames = [];

                    this._functionId = '';

                    this._isClosed = 0;

                    this._isAvg = 0;

                    this._isScal = 0;

                    this._isScal32 = 0;

                    this._decimals = 0;

                    this._offset = 0;

                    this._scale = 0;

                    this._samplesPerHour = 0;

                    this._minVal = 0;

                    this._avgVal = 0;

                    this._maxVal = 0;

                    this._decexp = 0;

                    this._caltyp = 0;

                    this._calpar = [];

                    this._calraw = [];

                    this._calref = [];

                    this._values = [];

                    this._parent = obj_parent;
                    this._calhdl = null;
                    if (typeof obj_dataset != 'undefined') {
                        this.imm_initFromDataSet(obj_dataset, encoded);
                    }
                }

                _createClass(YDataStream, [{
                    key: 'imm_initFromDataSet',
                    value: function imm_initFromDataSet(dataset, encoded) {
                        var val = undefined;

                        var i = undefined;

                        var maxpos = undefined;

                        var iRaw = undefined;

                        var iRef = undefined;

                        var fRaw = undefined;

                        var fRef = undefined;

                        var duration_float = undefined;

                        var iCalib = [];

                        this._runNo = encoded[0] + (encoded[1] << 16);
                        this._utcStamp = encoded[2] + (encoded[3] << 16);
                        val = encoded[4];
                        this._isAvg = (val & 0x100) == 0;
                        this._samplesPerHour = val & 0xff;
                        if ((val & 0x100) != 0) {
                            this._samplesPerHour = this._samplesPerHour * 3600;
                        } else {
                            if ((val & 0x200) != 0) {
                                this._samplesPerHour = this._samplesPerHour * 60;
                            }
                        }
                        val = encoded[5];
                        if (val > 32767) {
                            val = val - 65536;
                        }
                        this._decimals = val;
                        this._offset = val;
                        this._scale = encoded[6];
                        this._isScal = this._scale != 0;
                        this._isScal32 = encoded.length >= 14;
                        val = encoded[7];
                        this._isClosed = val != 0xffff;
                        if (val == 0xffff) {
                            val = 0;
                        }
                        this._nRows = val;
                        duration_float = this._nRows * 3600 / this._samplesPerHour;
                        this._duration = Math.round(duration_float);

                        this._decexp = 1.0;
                        if (this._scale == 0) {
                            i = 0;
                            while (i < this._decimals) {
                                this._decexp = this._decexp * 10.0;
                                i = i + 1;
                            }
                        }
                        iCalib = dataset.imm_get_calibration();
                        this._caltyp = iCalib[0];
                        if (this._caltyp != 0) {
                            this.imm_calhdl = this._yapi.imm_getCalibrationHandler(this._caltyp);
                            maxpos = iCalib.length;
                            this._calpar.length = 0;
                            this._calraw.length = 0;
                            this._calref.length = 0;
                            if (this._isScal32) {
                                i = 1;
                                while (i < maxpos) {
                                    this._calpar.push(iCalib[i]);
                                    i = i + 1;
                                }
                                i = 1;
                                while (i + 1 < maxpos) {
                                    fRaw = iCalib[i];
                                    fRaw = fRaw / 1000.0;
                                    fRef = iCalib[i + 1];
                                    fRef = fRef / 1000.0;
                                    this._calraw.push(fRaw);
                                    this._calref.push(fRef);
                                    i = i + 2;
                                }
                            } else {
                                i = 1;
                                while (i + 1 < maxpos) {
                                    iRaw = iCalib[i];
                                    iRef = iCalib[i + 1];
                                    this._calpar.push(iRaw);
                                    this._calpar.push(iRef);
                                    if (this._isScal) {
                                        fRaw = iRaw;
                                        fRaw = (fRaw - this._offset) / this._scale;
                                        fRef = iRef;
                                        fRef = (fRef - this._offset) / this._scale;
                                        this._calraw.push(fRaw);
                                        this._calref.push(fRef);
                                    } else {
                                        this._calraw.push(this._yapi.imm_decimalToDouble(iRaw));
                                        this._calref.push(this._yapi.imm_decimalToDouble(iRef));
                                    }
                                    i = i + 2;
                                }
                            }
                        }

                        this._functionId = dataset.imm_get_functionId();
                        if (this._isAvg) {
                            this._columnNames.length = 0;
                            this._columnNames.push(this._functionId + '_min');
                            this._columnNames.push(this._functionId + '_avg');
                            this._columnNames.push(this._functionId + '_max');
                            this._nCols = 3;
                        } else {
                            this._columnNames.length = 0;
                            this._columnNames.push(this._functionId);
                            this._nCols = 1;
                        }

                        if (this._nRows > 0) {
                            if (this._isScal32) {
                                this._avgVal = this.imm_decodeAvg(encoded[8] + ((encoded[9] ^ 0x8000) << 16), 1);
                                this._minVal = this.imm_decodeVal(encoded[10] + (encoded[11] << 16));
                                this._maxVal = this.imm_decodeVal(encoded[12] + (encoded[13] << 16));
                            } else {
                                this._minVal = this.imm_decodeVal(encoded[8]);
                                this._maxVal = this.imm_decodeVal(encoded[9]);
                                this._avgVal = this.imm_decodeAvg(encoded[10] + (encoded[11] << 16), this._nRows);
                            }
                        }
                        return 0;
                    }
                }, {
                    key: 'imm_parseStream',
                    value: function imm_parseStream(sdata) {
                        var idx = undefined;

                        var udat = [];

                        var dat = [];
                        if (sdata.length == 0) {
                            this._nRows = 0;
                            return YAPI_SUCCESS;
                        }

                        udat = this._yapi.imm_decodeWords(this._parent.imm_json_get_string(sdata));
                        this._values.length = 0;
                        idx = 0;
                        if (this._isAvg) {
                            while (idx + 3 < udat.length) {
                                dat.length = 0;
                                if (this._isScal32) {
                                    dat.push(this.imm_decodeVal(udat[idx + 2] + (udat[idx + 3] << 16)));
                                    dat.push(this.imm_decodeAvg(udat[idx] + ((udat[idx + 1] ^ 0x8000) << 16), 1));
                                    dat.push(this.imm_decodeVal(udat[idx + 4] + (udat[idx + 5] << 16)));
                                    idx = idx + 6;
                                } else {
                                    dat.push(this.imm_decodeVal(udat[idx]));
                                    dat.push(this.imm_decodeAvg(udat[idx + 2] + (udat[idx + 3] << 16), 1));
                                    dat.push(this.imm_decodeVal(udat[idx + 1]));
                                    idx = idx + 4;
                                }
                                this._values.push(dat.slice());
                            }
                        } else {
                            if (this._isScal && !this._isScal32) {
                                while (idx < udat.length) {
                                    dat.length = 0;
                                    dat.push(this.imm_decodeVal(udat[idx]));
                                    this._values.push(dat.slice());
                                    idx = idx + 1;
                                }
                            } else {
                                while (idx + 1 < udat.length) {
                                    dat.length = 0;
                                    dat.push(this.imm_decodeAvg(udat[idx] + ((udat[idx + 1] ^ 0x8000) << 16), 1));
                                    this._values.push(dat.slice());
                                    idx = idx + 2;
                                }
                            }
                        }

                        this._nRows = this._values.length;
                        return YAPI_SUCCESS;
                    }
                }, {
                    key: 'imm_get_url',
                    value: function imm_get_url() {
                        var url = undefined;
                        url = 'logger.json?id=' + this._functionId + '&run=' + String(Math.round(this._runNo)) + '&utc=' + String(Math.round(this._utcStamp));
                        return url;
                    }
                }, {
                    key: 'loadStream',
                    value: function loadStream() {
                        return _regeneratorRuntime.async(function loadStream$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.t0 = this;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this._parent._download(this.imm_get_url()));

                                case 3:
                                    context$2$0.t1 = context$2$0.sent;
                                    return context$2$0.abrupt('return', context$2$0.t0.imm_parseStream.call(context$2$0.t0, context$2$0.t1));

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'imm_decodeVal',
                    value: function imm_decodeVal(w) {
                        var val = undefined;
                        val = w;
                        if (this._isScal32) {
                            val = val / 1000.0;
                        } else {
                            if (this._isScal) {
                                val = (val - this._offset) / this._scale;
                            } else {
                                val = this._yapi.imm_decimalToDouble(w);
                            }
                        }
                        if (this._caltyp != 0) {
                            val = this.imm_calhdl(val, this._caltyp, this._calpar, this._calraw, this._calref);
                        }
                        return val;
                    }
                }, {
                    key: 'imm_decodeAvg',
                    value: function imm_decodeAvg(dw, count) {
                        var val = undefined;
                        val = dw;
                        if (this._isScal32) {
                            val = val / 1000.0;
                        } else {
                            if (this._isScal) {
                                val = (val / (100 * count) - this._offset) / this._scale;
                            } else {
                                val = val / (count * this._decexp);
                            }
                        }
                        if (this._caltyp != 0) {
                            val = this.imm_calhdl(val, this._caltyp, this._calpar, this._calraw, this._calref);
                        }
                        return val;
                    }
                }, {
                    key: 'isClosed',
                    value: function isClosed() {
                        return _regeneratorRuntime.async(function isClosed$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._isClosed);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_runIndex',
                    value: function get_runIndex() {
                        return _regeneratorRuntime.async(function get_runIndex$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._runNo);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_startTime',
                    value: function get_startTime() {
                        return _regeneratorRuntime.async(function get_startTime$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._utcStamp - parseInt(+new Date() / 1000, 10));

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_startTimeUTC',
                    value: function get_startTimeUTC() {
                        return _regeneratorRuntime.async(function get_startTimeUTC$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._utcStamp);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_dataSamplesIntervalMs',
                    value: function get_dataSamplesIntervalMs() {
                        return _regeneratorRuntime.async(function get_dataSamplesIntervalMs$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', parseInt(3600000 / this._samplesPerHour, 10));

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_dataSamplesInterval',
                    value: function get_dataSamplesInterval() {
                        return _regeneratorRuntime.async(function get_dataSamplesInterval$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', 3600.0 / this._samplesPerHour);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_rowCount',
                    value: function get_rowCount() {
                        return _regeneratorRuntime.async(function get_rowCount$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._nRows != 0 && this._isClosed)) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._nRows);

                                case 2:
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.loadStream());

                                case 4:
                                    return context$2$0.abrupt('return', this._nRows);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_columnCount',
                    value: function get_columnCount() {
                        return _regeneratorRuntime.async(function get_columnCount$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._nCols != 0)) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._nCols);

                                case 2:
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.loadStream());

                                case 4:
                                    return context$2$0.abrupt('return', this._nCols);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_columnNames',
                    value: function get_columnNames() {
                        return _regeneratorRuntime.async(function get_columnNames$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._columnNames.length != 0)) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._columnNames);

                                case 2:
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this.loadStream());

                                case 4:
                                    return context$2$0.abrupt('return', this._columnNames);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_minValue',
                    value: function get_minValue() {
                        return _regeneratorRuntime.async(function get_minValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._minVal);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_averageValue',
                    value: function get_averageValue() {
                        return _regeneratorRuntime.async(function get_averageValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._avgVal);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_maxValue',
                    value: function get_maxValue() {
                        return _regeneratorRuntime.async(function get_maxValue$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._maxVal);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_duration',
                    value: function get_duration() {
                        return _regeneratorRuntime.async(function get_duration$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!this._isClosed) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._duration);

                                case 2:
                                    return context$2$0.abrupt('return', parseInt(+new Date() / 1000, 10) - this._utcStamp);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_dataRows',
                    value: function get_dataRows() {
                        return _regeneratorRuntime.async(function get_dataRows$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._values.length == 0 || !this._isClosed)) {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.loadStream());

                                case 3:
                                    return context$2$0.abrupt('return', this._values);

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_data',
                    value: function get_data(row, col) {
                        return _regeneratorRuntime.async(function get_data$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._values.length == 0 || !this._isClosed)) {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.loadStream());

                                case 3:
                                    if (!(row >= this._values.length)) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DATA_INVALID);

                                case 5:
                                    if (!(col >= this._values[row].length)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_DATA_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._values[row][col]);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YDataStream;
            })();

            YDataSet = (function () {
                function YDataSet(obj_parent, str_functionId, str_unit, u32_startTime, u32_endTime) {
                    _classCallCheck(this, YDataSet);

                    this._parent = null;

                    this._hardwareId = '';

                    this._functionId = '';

                    this._unit = '';

                    this._startTime = 0;

                    this._endTime = 0;

                    this._progress = 0;

                    this._calib = [];

                    this._streams = [];

                    this._summary = null;

                    this._preview = [];

                    this._measures = [];

                    this._summary = new YMeasure(0, 0, 0, 0, 0);
                    if (typeof str_unit === 'undefined') {
                        this._parent = obj_parent;

                        this._yapi = obj_parent._yapi;
                        this._startTime = 0;
                        this._endTime = 0;
                    } else {
                            this._parent = obj_parent;

                            this._yapi = obj_parent._yapi;
                            this._functionId = str_functionId;
                            this._unit = str_unit;
                            this._startTime = u32_startTime;
                            this._endTime = u32_endTime;
                            this._progress = -1;
                        }
                }

                _createClass(YDataSet, [{
                    key: 'imm_get_functionId',
                    value: function imm_get_functionId() {
                        return this._functionId;
                    }
                }, {
                    key: 'imm_get_calibration',
                    value: function imm_get_calibration() {
                        return this._calib;
                    }
                }, {
                    key: 'processMore',
                    value: function processMore(progress, data) {
                        var stream, dataRows, strdata, tim, itv, nCols, minCol, avgCol, maxCol, ii;
                        return _regeneratorRuntime.async(function processMore$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    stream = undefined;
                                    dataRows = [];
                                    strdata = undefined;
                                    tim = undefined;
                                    itv = undefined;
                                    nCols = undefined;
                                    minCol = undefined;
                                    avgCol = undefined;
                                    maxCol = undefined;

                                    if (!(progress != this._progress)) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._progress);

                                case 11:
                                    if (!(this._progress < 0)) {
                                        context$2$0.next = 19;
                                        break;
                                    }

                                    strdata = this._yapi.imm_bin2str(data);

                                    if (!(strdata == '{}')) {
                                        context$2$0.next = 16;
                                        break;
                                    }

                                    this._parent._throw(YAPI_VERSION_MISMATCH, 'device firmware is too old');
                                    return context$2$0.abrupt('return', YAPI_VERSION_MISMATCH);

                                case 16:
                                    context$2$0.next = 18;
                                    return _regeneratorRuntime.awrap(this._parse(strdata));

                                case 18:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 19:
                                    stream = this._streams[this._progress];
                                    stream.imm_parseStream(data);
                                    context$2$0.next = 23;
                                    return _regeneratorRuntime.awrap(stream.get_dataRows());

                                case 23:
                                    dataRows = context$2$0.sent;

                                    this._progress = this._progress + 1;

                                    if (!(dataRows.length == 0)) {
                                        context$2$0.next = 29;
                                        break;
                                    }

                                    context$2$0.next = 28;
                                    return _regeneratorRuntime.awrap(this.get_progress());

                                case 28:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 29:
                                    context$2$0.next = 31;
                                    return _regeneratorRuntime.awrap(stream.get_startTimeUTC());

                                case 31:
                                    tim = context$2$0.sent;
                                    context$2$0.next = 34;
                                    return _regeneratorRuntime.awrap(stream.get_dataSamplesInterval());

                                case 34:
                                    itv = context$2$0.sent;

                                    if (tim < itv) {
                                        tim = itv;
                                    }
                                    nCols = dataRows[0].length;
                                    minCol = 0;
                                    if (nCols > 2) {
                                        avgCol = 1;
                                    } else {
                                        avgCol = 0;
                                    }
                                    if (nCols > 2) {
                                        maxCol = 2;
                                    } else {
                                        maxCol = 0;
                                    }

                                    for (ii in dataRows) {
                                        if (tim >= this._startTime && (this._endTime == 0 || tim <= this._endTime)) {
                                            this._measures.push(new YMeasure(tim - itv, tim, dataRows[ii][minCol], dataRows[ii][avgCol], dataRows[ii][maxCol]));
                                        }
                                        tim = tim + itv;
                                    }

                                    context$2$0.next = 43;
                                    return _regeneratorRuntime.awrap(this.get_progress());

                                case 43:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 44:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_privateDataStreams',
                    value: function get_privateDataStreams() {
                        return _regeneratorRuntime.async(function get_privateDataStreams$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._streams);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_hardwareId',
                    value: function get_hardwareId() {
                        var mo;
                        return _regeneratorRuntime.async(function get_hardwareId$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    mo = undefined;

                                    if (this._hardwareId == '') {
                                        context$2$0.next = 3;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._hardwareId);

                                case 3:
                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this._parent.get_module());

                                case 5:
                                    mo = context$2$0.sent;
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(mo.get_serialNumber());

                                case 8:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = context$2$0.t0 + '.';
                                    context$2$0.next = 12;
                                    return _regeneratorRuntime.awrap(this.get_functionId());

                                case 12:
                                    context$2$0.t2 = context$2$0.sent;
                                    this._hardwareId = context$2$0.t1 + context$2$0.t2;
                                    return context$2$0.abrupt('return', this._hardwareId);

                                case 15:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_functionId',
                    value: function get_functionId() {
                        return _regeneratorRuntime.async(function get_functionId$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._functionId);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_unit',
                    value: function get_unit() {
                        return _regeneratorRuntime.async(function get_unit$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._unit);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_startTimeUTC',
                    value: function get_startTimeUTC() {
                        return _regeneratorRuntime.async(function get_startTimeUTC$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._startTime);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_endTimeUTC',
                    value: function get_endTimeUTC() {
                        return _regeneratorRuntime.async(function get_endTimeUTC$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._endTime);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_progress',
                    value: function get_progress() {
                        return _regeneratorRuntime.async(function get_progress$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._progress < 0)) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', 0);

                                case 2:
                                    if (!(this._progress >= this._streams.length)) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', 100);

                                case 4:
                                    return context$2$0.abrupt('return', parseInt((1 + (1 + this._progress) * 98) / (1 + this._streams.length), 10));

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'loadMore',
                    value: function loadMore() {
                        var url, stream;
                        return _regeneratorRuntime.async(function loadMore$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    url = undefined;
                                    stream = undefined;

                                    if (!(this._progress < 0)) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    url = 'logger.json?id=' + this._functionId;
                                    context$2$0.next = 12;
                                    break;

                                case 6:
                                    if (!(this._progress >= this._streams.length)) {
                                        context$2$0.next = 10;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', 100);

                                case 10:
                                    stream = this._streams[this._progress];
                                    url = stream.imm_get_url();

                                case 12:
                                    context$2$0.t0 = _regeneratorRuntime;
                                    context$2$0.t1 = this;
                                    context$2$0.t2 = this._progress;
                                    context$2$0.next = 17;
                                    return _regeneratorRuntime.awrap(this._parent._download(url));

                                case 17:
                                    context$2$0.t3 = context$2$0.sent;
                                    context$2$0.t4 = context$2$0.t1.processMore.call(context$2$0.t1, context$2$0.t2, context$2$0.t3);
                                    context$2$0.next = 21;
                                    return context$2$0.t0.awrap.call(context$2$0.t0, context$2$0.t4);

                                case 21:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 22:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_summary',
                    value: function get_summary() {
                        return _regeneratorRuntime.async(function get_summary$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._summary);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_preview',
                    value: function get_preview() {
                        return _regeneratorRuntime.async(function get_preview$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._preview);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_measuresAt',
                    value: function get_measuresAt(measure) {
                        var startUtc, stream, dataRows, measures, tim, itv, nCols, minCol, avgCol, maxCol, ii;
                        return _regeneratorRuntime.async(function get_measuresAt$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    startUtc = undefined;
                                    stream = undefined;
                                    dataRows = [];
                                    measures = [];
                                    tim = undefined;
                                    itv = undefined;
                                    nCols = undefined;
                                    minCol = undefined;
                                    avgCol = undefined;
                                    maxCol = undefined;

                                    startUtc = Math.round(measure.get_startTimeUTC());
                                    stream = null;
                                    context$2$0.t0 = _regeneratorRuntime.keys(this._streams);

                                case 13:
                                    if ((context$2$0.t1 = context$2$0.t0()).done) {
                                        context$2$0.next = 25;
                                        break;
                                    }

                                    ii = context$2$0.t1.value;
                                    context$2$0.next = 17;
                                    return _regeneratorRuntime.awrap(this._streams[ii].get_startTimeUTC());

                                case 17:
                                    context$2$0.t2 = context$2$0.sent;
                                    context$2$0.t3 = startUtc;

                                    if (!(context$2$0.t2 == context$2$0.t3)) {
                                        context$2$0.next = 21;
                                        break;
                                    }

                                    stream = this._streams[ii];

                                case 21:
                                    ;;
                                    context$2$0.next = 13;
                                    break;

                                case 25:
                                    if (!(stream == null)) {
                                        context$2$0.next = 27;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', measures);

                                case 27:
                                    context$2$0.next = 29;
                                    return _regeneratorRuntime.awrap(stream.get_dataRows());

                                case 29:
                                    dataRows = context$2$0.sent;

                                    if (!(dataRows.length == 0)) {
                                        context$2$0.next = 32;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', measures);

                                case 32:
                                    context$2$0.next = 34;
                                    return _regeneratorRuntime.awrap(stream.get_startTimeUTC());

                                case 34:
                                    tim = context$2$0.sent;
                                    context$2$0.next = 37;
                                    return _regeneratorRuntime.awrap(stream.get_dataSamplesInterval());

                                case 37:
                                    itv = context$2$0.sent;

                                    if (tim < itv) {
                                        tim = itv;
                                    }
                                    nCols = dataRows[0].length;
                                    minCol = 0;
                                    if (nCols > 2) {
                                        avgCol = 1;
                                    } else {
                                        avgCol = 0;
                                    }
                                    if (nCols > 2) {
                                        maxCol = 2;
                                    } else {
                                        maxCol = 0;
                                    }

                                    for (ii in dataRows) {
                                        if (tim >= this._startTime && (this._endTime == 0 || tim <= this._endTime)) {
                                            measures.push(new YMeasure(tim - itv, tim, dataRows[ii][minCol], dataRows[ii][avgCol], dataRows[ii][maxCol]));
                                        }
                                        tim = tim + itv;;
                                    }
                                    return context$2$0.abrupt('return', measures);

                                case 45:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_measures',
                    value: function get_measures() {
                        return _regeneratorRuntime.async(function get_measures$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', this._measures);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_parse',
                    value: function _parse(str_json) {
                        var summaryMinVal, summaryMaxVal, summaryTotalTime, summaryTotalAvg, startTime, endTime, loadval, i, stream, streamEndTime, streamStartTime, rec;
                        return _regeneratorRuntime.async(function _parse$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    summaryMinVal = Number.MAX_VALUE;
                                    summaryMaxVal = -Number.MAX_VALUE;
                                    summaryTotalTime = 0;
                                    summaryTotalAvg = 0;
                                    startTime = 0x7fffffff;
                                    endTime = 0;

                                    try {
                                        loadval = JSON.parse(str_json);
                                    } catch (err) {}

                                    if (loadval) {
                                        context$2$0.next = 10;
                                        break;
                                    }

                                    this._progress = 0;
                                    return context$2$0.abrupt('return', this);

                                case 10:

                                    this._functionId = loadval.id;
                                    this._unit = loadval.unit;
                                    if (loadval.calib) {
                                        this._calib = this._yapi.imm_decodeFloats(loadval.calib);
                                        this._calib[0] = parseInt(this._calib[0] / 1000);
                                    } else {
                                        this._calib = this._yapi.imm_decodeWords(loadval.cal);
                                    }
                                    this._summary = new YMeasure(0, 0, 0, 0, 0);
                                    this._streams = [];
                                    this._preview = [];
                                    this._measures = [];
                                    i = 0;

                                case 18:
                                    if (!(i < loadval.streams.length)) {
                                        context$2$0.next = 108;
                                        break;
                                    }

                                    stream = this._parent.imm_findDataStream(this, loadval.streams[i]);
                                    context$2$0.next = 22;
                                    return _regeneratorRuntime.awrap(stream.get_startTimeUTC());

                                case 22:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.next = 25;
                                    return _regeneratorRuntime.awrap(stream.get_duration());

                                case 25:
                                    context$2$0.t1 = context$2$0.sent;
                                    streamEndTime = context$2$0.t0 + context$2$0.t1;
                                    context$2$0.next = 29;
                                    return _regeneratorRuntime.awrap(stream.get_startTimeUTC());

                                case 29:
                                    context$2$0.t2 = context$2$0.sent;
                                    context$2$0.next = 32;
                                    return _regeneratorRuntime.awrap(stream.get_dataSamplesIntervalMs());

                                case 32:
                                    context$2$0.t3 = context$2$0.sent;
                                    context$2$0.t4 = context$2$0.t3 / 1000;
                                    context$2$0.t5 = parseInt(context$2$0.t4);
                                    streamStartTime = context$2$0.t2 - context$2$0.t5;

                                    if (!(this._startTime > 0 && streamEndTime <= this._startTime)) {
                                        context$2$0.next = 39;
                                        break;
                                    }

                                    context$2$0.next = 105;
                                    break;

                                case 39:
                                    context$2$0.t6 = this._endTime > 0;

                                    if (!context$2$0.t6) {
                                        context$2$0.next = 46;
                                        break;
                                    }

                                    context$2$0.next = 43;
                                    return _regeneratorRuntime.awrap(stream.get_startTimeUTC());

                                case 43:
                                    context$2$0.t7 = context$2$0.sent;
                                    context$2$0.t8 = this._endTime;
                                    context$2$0.t6 = context$2$0.t7 > context$2$0.t8;

                                case 46:
                                    if (!context$2$0.t6) {
                                        context$2$0.next = 49;
                                        break;
                                    }

                                    context$2$0.next = 105;
                                    break;

                                case 49:
                                    this._streams.push(stream);
                                    if (startTime > streamStartTime) {
                                        startTime = streamStartTime;
                                    }
                                    if (endTime < streamEndTime) {
                                        endTime = streamEndTime;
                                    }
                                    context$2$0.t10 = stream.isClosed();

                                    if (!context$2$0.t10) {
                                        context$2$0.next = 59;
                                        break;
                                    }

                                    context$2$0.next = 56;
                                    return _regeneratorRuntime.awrap(stream.get_startTimeUTC());

                                case 56:
                                    context$2$0.t11 = context$2$0.sent;
                                    context$2$0.t12 = this._startTime;
                                    context$2$0.t10 = context$2$0.t11 >= context$2$0.t12;

                                case 59:
                                    context$2$0.t9 = context$2$0.t10;

                                    if (!context$2$0.t9) {
                                        context$2$0.next = 62;
                                        break;
                                    }

                                    context$2$0.t9 = this._endTime == 0 || streamEndTime <= this._endTime;

                                case 62:
                                    if (!context$2$0.t9) {
                                        context$2$0.next = 105;
                                        break;
                                    }

                                    context$2$0.t13 = summaryMinVal;
                                    context$2$0.next = 66;
                                    return _regeneratorRuntime.awrap(stream.get_minValue());

                                case 66:
                                    context$2$0.t14 = context$2$0.sent;

                                    if (!(context$2$0.t13 > context$2$0.t14)) {
                                        context$2$0.next = 71;
                                        break;
                                    }

                                    context$2$0.next = 70;
                                    return _regeneratorRuntime.awrap(stream.get_minValue());

                                case 70:
                                    summaryMinVal = context$2$0.sent;

                                case 71:
                                    context$2$0.t15 = summaryMaxVal;
                                    context$2$0.next = 74;
                                    return _regeneratorRuntime.awrap(stream.get_maxValue());

                                case 74:
                                    context$2$0.t16 = context$2$0.sent;

                                    if (!(context$2$0.t15 < context$2$0.t16)) {
                                        context$2$0.next = 79;
                                        break;
                                    }

                                    context$2$0.next = 78;
                                    return _regeneratorRuntime.awrap(stream.get_maxValue());

                                case 78:
                                    summaryMaxVal = context$2$0.sent;

                                case 79:
                                    context$2$0.next = 81;
                                    return _regeneratorRuntime.awrap(stream.get_averageValue());

                                case 81:
                                    context$2$0.t17 = context$2$0.sent;
                                    context$2$0.next = 84;
                                    return _regeneratorRuntime.awrap(stream.get_duration());

                                case 84:
                                    context$2$0.t18 = context$2$0.sent;
                                    summaryTotalAvg += context$2$0.t17 * context$2$0.t18;
                                    context$2$0.next = 88;
                                    return _regeneratorRuntime.awrap(stream.get_duration());

                                case 88:
                                    summaryTotalTime += context$2$0.sent;
                                    context$2$0.t19 = YMeasure;
                                    context$2$0.next = 92;
                                    return _regeneratorRuntime.awrap(stream.get_startTimeUTC());

                                case 92:
                                    context$2$0.t20 = context$2$0.sent;
                                    context$2$0.t21 = streamEndTime;
                                    context$2$0.next = 96;
                                    return _regeneratorRuntime.awrap(stream.get_minValue());

                                case 96:
                                    context$2$0.t22 = context$2$0.sent;
                                    context$2$0.next = 99;
                                    return _regeneratorRuntime.awrap(stream.get_averageValue());

                                case 99:
                                    context$2$0.t23 = context$2$0.sent;
                                    context$2$0.next = 102;
                                    return _regeneratorRuntime.awrap(stream.get_maxValue());

                                case 102:
                                    context$2$0.t24 = context$2$0.sent;
                                    rec = new context$2$0.t19(context$2$0.t20, context$2$0.t21, context$2$0.t22, context$2$0.t23, context$2$0.t24);

                                    this._preview.push(rec);

                                case 105:
                                    i++;
                                    context$2$0.next = 18;
                                    break;

                                case 108:
                                    if (this._streams.length > 0 && summaryTotalTime > 0) {
                                        if (this._startTime < startTime) {
                                            this._startTime = startTime;
                                        }
                                        if (this._endTime == 0 || this._endTime > endTime) {
                                            this._endTime = endTime;
                                        }
                                        this._summary = new YMeasure(this._startTime, this._endTime, summaryMinVal, summaryTotalAvg / summaryTotalTime, summaryMaxVal);
                                    }
                                    this._progress = 0;
                                    return context$2$0.abrupt('return', this);

                                case 111:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YDataSet;
            })();

            YGenericHub = (function () {
                function YGenericHub(obj_yapi, var_urlInfo) {
                    _classCallCheck(this, YGenericHub);

                    this._yapi = obj_yapi;

                    this._lastErrorType = YAPI_SUCCESS;

                    this._lastErrorMsg = 'no error';

                    this.urlInfo = var_urlInfo;
                    this.notiflen = 32000;
                    this.devListValidity = 500;
                    this.devListExpires = 0;
                    this.serialByYdx = [];
                    this.retryDelay = 15;
                    this.notifPos = -1;
                    this.currPos = 0;
                    this.missing = {};
                    this.disconnecting = false;
                }

                _createClass(YGenericHub, [{
                    key: '_throw',
                    value: function _throw(int_errType, str_errMsg, obj_retVal) {
                        this._lastErrorType = int_errType;
                        this._lastErrorMsg = str_errMsg;
                        this._yapi._throw(int_errType, str_errMsg, obj_retVal);
                    }
                }, {
                    key: 'imm_forceUpdate',
                    value: function imm_forceUpdate() {
                        this.devListExpires = this._yapi.GetTickCount();
                    }
                }, {
                    key: 'testHub',
                    value: function testHub(errmsg) {
                        var yreq;
                        return _regeneratorRuntime.async(function testHub$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.request('GET', this.urlInfo.url, '/api/module.json', null));

                                case 2:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    errmsg.msg = yreq.errorMsg;
                                    return context$2$0.abrupt('return', yreq.errorType);

                                case 6:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'hubUpdateDeviceList',
                    value: function hubUpdateDeviceList() {
                        var hubDev, retcode, yreq, loadval, whitePages, yellowPages;
                        return _regeneratorRuntime.async(function hubUpdateDeviceList$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    hubDev = this._yapi.imm_getDevice(this.urlInfo.url);
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(hubDev.refresh());

                                case 3:
                                    retcode = context$2$0.sent;

                                    if (!(retcode != YAPI_SUCCESS)) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(retcode, hubDev._lastErrorMsg, retcode));

                                case 6:
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(hubDev.requestAPI(this._yapi.defaultCacheValidity));

                                case 8:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 11;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', yreq);

                                case 11:
                                    loadval = null;

                                    try {
                                        loadval = JSON.parse(this._yapi.imm_bin2str(yreq.bin_result));
                                    } catch (err) {}

                                    if (loadval) {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_IO_ERROR, 'Request failed, could not parse API result for ' + hubDev.imm_describe(), YAPI_IO_ERROR));

                                case 15:
                                    whitePages = loadval['services']['whitePages'];
                                    yellowPages = loadval['services']['yellowPages'];

                                    if (!(whitePages == undefined)) {
                                        context$2$0.next = 19;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(YAPI_INVALID_ARGUMENT, 'Device ' + hubDev.imm_describe() + ' is not a hub', YAPI_INVALID_ARGUMENT));

                                case 19:
                                    context$2$0.next = 21;
                                    return _regeneratorRuntime.awrap(this._yapi.updateDeviceList_process(this, hubDev, whitePages, yellowPages));

                                case 21:
                                    retcode = context$2$0.sent;

                                    if (!(retcode != YAPI_SUCCESS)) {
                                        context$2$0.next = 24;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(this._yapi._lastErrorType, this._yapi._lastErrorMsg, this._yapi._lastErrorType));

                                case 24:
                                    this.devListExpires = this._yapi.GetTickCount() + this.devListValidity;
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 26:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'request',
                    value: function request(method, baseUrl, devUrl, obj_body) {
                        var res;
                        return _regeneratorRuntime.async(function request$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    res = new YHTTPRequest(null);

                                    res.errorType = YAPI_NOT_SUPPORTED;
                                    res.errorMsg = 'GenericHub subclass expected';
                                    return context$2$0.abrupt('return', res);

                                case 4:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'disconnect',
                    value: function disconnect() {
                        return _regeneratorRuntime.async(function disconnect$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this.disconnecting = true;

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YGenericHub;
            })();

            _export('YGenericHub', YGenericHub);

            YHttpHub = (function (_YGenericHub) {
                _inherits(YHttpHub, _YGenericHub);

                function YHttpHub(obj_yapi, var_urlInfo) {
                    _classCallCheck(this, YHttpHub);

                    _get(Object.getPrototypeOf(YHttpHub.prototype), 'constructor', this).call(this, obj_yapi, var_urlInfo);

                    this.notbynRequest = null;

                    this.notbynOpenPromise = null;
                }

                _createClass(YHttpHub, [{
                    key: 'testHub',
                    value: function testHub(errmsg) {
                        var args;
                        return _regeneratorRuntime.async(function testHub$(context$2$0) {
                            var _this2 = this;

                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!this.disconnecting) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_IO_ERROR);

                                case 2:
                                    args = '?len=' + this.notiflen.toString();

                                    if (this.notifPos > 0) {
                                        args += '&abs=' + this.notifPos.toString();
                                    }
                                    this.notbynOpenPromise = new _Promise(function (resolve, reject) {
                                        _this2.notbynRequest = new XMLHttpRequest();
                                        _this2.notbynRequest.open('GET', _this2.urlInfo.url + 'not.byn' + args, true, '', '');
                                        _this2.notbynRequest.overrideMimeType('text/plain; charset=x-user-defined');
                                        _this2.notbynRequest.onreadystatechange = function () {
                                            if (_this2.disconnecting) {
                                                return;
                                            }
                                            if (_this2.notbynRequest.readyState >= 3) {
                                                resolve(YAPI_SUCCESS);
                                                if (_this2.notbynRequest.readyState == 4 && parseInt(_this2.notbynRequest.status) != 200 && parseInt(_this2.notbynRequest.status) != 304) {
                                                    if (_this2.retryDelay < 15000) _this2.retryDelay *= 2;
                                                    _this2.devListValidity = 500;
                                                    _this2.devListExpires = 0;
                                                    setTimeout(function () {
                                                        _this2.testHub(new YErrorMsg());
                                                    }, _this2.retryDelay);
                                                } else {
                                                    if (_this2.notbynRequest.readyState == 3) {
                                                        if (_this2.notiflen == 1) return;
                                                    }
                                                    var newlen = _this2.notbynRequest.responseText.length;
                                                    if (newlen > _this2.currPos) {
                                                        _this2._yapi.parseEvents(_this2, _this2.notbynRequest.responseText.substr(_this2.currPos, newlen - _this2.currPos));
                                                    }

                                                    if (_this2.notbynRequest.readyState == 4 && parseInt(_this2.notbynRequest.status) != 0) {
                                                        _this2.currPos = 0;
                                                        _this2.testHub(new YErrorMsg());
                                                    }
                                                }
                                            }
                                        };
                                        _this2.notbynRequest.send('');
                                    });
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(this.notbynOpenPromise);

                                case 7:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'request',
                    value: function request(method, baseUrl, devUrl, obj_body) {
                        var httpPromise;
                        return _regeneratorRuntime.async(function request$(context$2$0) {
                            var _this3 = this;

                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    httpPromise = new _Promise(function (resolve, reject) {
                                        var httpRequest = new XMLHttpRequest();
                                        httpRequest.open(method, baseUrl + devUrl, true, '', '');
                                        httpRequest.onreadystatechange = function () {
                                            if (httpRequest.readyState == 4) {
                                                var yreq = new YHTTPRequest(null);
                                                if (httpRequest.status != 200 && httpRequest.status != 304) {
                                                    yreq.errorType = YAPI_NOT_SUPPORTED;
                                                    yreq.errorMsg = 'HTTP Error ' + httpRequest.status;
                                                } else {
                                                    yreq.bin_result = _this3._yapi.imm_str2bin(httpRequest.responseText);
                                                }
                                                resolve(yreq);
                                            }
                                        };

                                        httpRequest.send(obj_body || '');
                                    });
                                    return context$2$0.abrupt('return', httpPromise);

                                case 2:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'disconnect',
                    value: function disconnect() {
                        return _regeneratorRuntime.async(function disconnect$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(YHttpHub.prototype), 'disconnect', this).call(this));

                                case 2:
                                    this.notbynRequest.abort();

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YHttpHub;
            })(YGenericHub);

            _export('YHttpHub', YHttpHub);

            YHttpNodeHub = (function (_YGenericHub2) {
                _inherits(YHttpNodeHub, _YGenericHub2);

                function YHttpNodeHub(obj_yapi, var_urlInfo) {
                    _classCallCheck(this, YHttpNodeHub);

                    _get(Object.getPrototypeOf(YHttpNodeHub.prototype), 'constructor', this).call(this, obj_yapi, var_urlInfo);
                    this.http = this._yapi._nodeRequire('http');

                    this.notbynRequest = null;

                    this.notbynOpenPromise = null;
                }

                _createClass(YHttpNodeHub, [{
                    key: 'testHub',
                    value: function testHub(errmsg) {
                        var args, options;
                        return _regeneratorRuntime.async(function testHub$(context$2$0) {
                            var _this4 = this;

                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!this.disconnecting) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_IO_ERROR);

                                case 2:
                                    args = '';

                                    if (this.notifPos > 0) {
                                        args = '?abs=' + this.notifPos.toString();
                                    }
                                    options = {
                                        method: 'GET',
                                        hostname: this.urlInfo.host,
                                        port: this.urlInfo.port,
                                        path: '/not.byn' + args
                                    };

                                    this.notbynOpenPromise = new _Promise(function (resolve, reject) {
                                        _this4.notbynRequest = _this4.http.request(options, function (res) {
                                            if (_this4.disconnecting) {
                                                return;
                                            }
                                            if (res.statusCode != 200 && res.statusCode != 304) {
                                                if (_this4.retryDelay < 15000) _this4.retryDelay *= 2;
                                                _this4.devListValidity = 500;
                                                _this4.devListExpires = 0;
                                                setTimeout(function () {
                                                    _this4.testHub(new YErrorMsg());
                                                }, _this4.retryDelay);
                                            } else {
                                                resolve(YAPI_SUCCESS);
                                                res.on('data', function (chunk) {
                                                    _this4._yapi.parseEvents(_this4, _this4._yapi.imm_bin2str(chunk));
                                                });
                                                res.on('end', function () {
                                                    _this4.currPos = 0;
                                                    _this4.testHub(new YErrorMsg());
                                                });
                                            }
                                        });
                                        _this4.notbynRequest.on('error', function () {
                                            _this4.devListValidity = 500;
                                            _this4.devListExpires = 0;
                                            setTimeout(function () {
                                                _this4.testHub(new YErrorMsg());
                                            }, 50);
                                        });
                                        _this4.notbynRequest.end();
                                    });
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(this.notbynOpenPromise);

                                case 8:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'request',
                    value: function request(str_method, baseUrl, devUrl, obj_body) {
                        var options, httpPromise;
                        return _regeneratorRuntime.async(function request$(context$2$0) {
                            var _this5 = this;

                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    options = {
                                        method: str_method,
                                        hostname: this.urlInfo.host,
                                        port: this.urlInfo.port,
                                        path: devUrl
                                    };
                                    httpPromise = new _Promise(function (resolve, reject) {
                                        var response = new Buffer(0);
                                        var httpRequest = _this5.http.request(options, function (res) {
                                            if (res.statusCode != 200 && res.statusCode != 304) {
                                                var yreq = new YHTTPRequest(null);
                                                yreq.errorType = YAPI_NOT_SUPPORTED;
                                                yreq.errorMsg = 'HTTP Error ' + res.statusCode.toString();
                                                resolve(yreq);
                                            } else {
                                                res.on('data', function (chunk) {
                                                    response = Buffer.concat([response, chunk]);
                                                });
                                                res.on('end', function () {
                                                    resolve(new YHTTPRequest(new Uint8Array(response)));
                                                });
                                            }
                                        });
                                        httpRequest.on('error', function (err) {
                                            var yreq = new YHTTPRequest(null);
                                            yreq.errorType = YAPI_IO_ERROR;
                                            yreq.errorMsg = err.errorMsg;
                                            resolve(yreq);
                                        });
                                        httpRequest.end();
                                    });
                                    return context$2$0.abrupt('return', httpPromise);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'disconnect',
                    value: function disconnect() {
                        return _regeneratorRuntime.async(function disconnect$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(YHttpNodeHub.prototype), 'disconnect', this).call(this));

                                case 2:
                                    this.notbynRequest.abort();

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YHttpNodeHub;
            })(YGenericHub);

            _export('YHttpNodeHub', YHttpNodeHub);

            YHttpCallbackHub = (function (_YGenericHub3) {
                _inherits(YHttpCallbackHub, _YGenericHub3);

                function YHttpCallbackHub(obj_yapi, var_urlInfo, incomingMessage, serverResponse) {
                    var _this6 = this;

                    _classCallCheck(this, YHttpCallbackHub);

                    _get(Object.getPrototypeOf(YHttpCallbackHub.prototype), 'constructor', this).call(this, obj_yapi, var_urlInfo);
                    this.crypto = this._yapi._nodeRequire('crypto');

                    this._incomingMessage = incomingMessage;

                    this._serverResponse = serverResponse;

                    this._callbackData = new Buffer(0);

                    this._callbackCache = null;

                    this.httpCallbackPromise = new _Promise(function (resolve, reject) {
                        _this6._incomingMessage.on('data', function (chunk) {
                            _this6._callbackData = Buffer.concat([_this6._callbackData, chunk]);
                        });
                        _this6._incomingMessage.on('end', function () {
                            _this6._callbackData = new Uint8Array(_this6._callbackData);
                            _this6._callbackCache = JSON.parse(_this6._yapi.imm_bin2str(_this6._callbackData));
                            resolve(true);
                        });
                    });
                }

                _createClass(YHttpCallbackHub, [{
                    key: 'testHub',
                    value: function testHub(errmsg) {
                        var sign, pass, salt, patched, check;
                        return _regeneratorRuntime.async(function testHub$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.httpCallbackPromise);

                                case 2:
                                    if (!(this._incomingMessage.method != 'POST')) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    errmsg.msg = 'HTTP POST expected';
                                    return context$2$0.abrupt('return', YAPI_INVALID_ARGUMENT);

                                case 5:
                                    if (!(this._callbackData.length == 0)) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    errmsg.msg = 'Empty POST body';
                                    return context$2$0.abrupt('return', YAPI_NO_MORE_DATA);

                                case 8:
                                    if (!(this.urlInfo.pass != '')) {
                                        context$2$0.next = 23;
                                        break;
                                    }

                                    if (this._callbackCache.sign) {
                                        context$2$0.next = 13;
                                        break;
                                    }

                                    errmsg.msg = 'missing signature from incoming YoctoHub (callback password required)';
                                    this._callbackCache = [];
                                    return context$2$0.abrupt('return', YAPI_NO_MORE_DATA);

                                case 13:
                                    sign = this._callbackCache['sign'];
                                    pass = this.urlInfo.pass;
                                    salt = undefined;

                                    if (pass.length == 32) {
                                        salt = this._yapi.imm_str2bin(pass.toLowerCase());
                                    } else {
                                        salt = this._yapi.imm_str2bin(this.crypto.createHash('md5').update(pass).digest('hex'));
                                    }
                                    patched = this._yapi.imm_bin2str(this._callbackData).replace(sign, salt);
                                    check = this.crypto.createHash('md5').update(patched).digest('hex');

                                    if (!(check.toLowerCase() != sign.toLowerCase())) {
                                        context$2$0.next = 23;
                                        break;
                                    }

                                    errmsg.msg = 'invalid signature from incoming YoctoHub (invalid callback password)';
                                    this._callbackCache = [];
                                    return context$2$0.abrupt('return', YAPI_UNAUTHORIZED);

                                case 23:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 24:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'request',
                    value: function request(str_method, baseUrl, devUrl, obj_body) {
                        var yreq, boundary, endb, jzon, subfun, jsonres;
                        return _regeneratorRuntime.async(function request$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    yreq = new YHTTPRequest(null);

                                    if (!(str_method == 'POST' && obj_body.length > 2)) {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    boundary = '???';
                                    endb = 0;

                                case 4:
                                    if (!(endb < obj_body.length)) {
                                        context$2$0.next = 10;
                                        break;
                                    }

                                    if (!(obj_body[endb] == 13)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('break', 10);

                                case 7:
                                    endb++;
                                    context$2$0.next = 4;
                                    break;

                                case 10:

                                    if (endb > 2 && endb < 20 && obj_body[0] == 45 && obj_body[1] == 45) {
                                        boundary = this._yapi.imm_bin2str(obj_body.subarray(2, endb));
                                    }
                                    this._serverResponse.write('\n@YoctoAPI:' + str_method + ' ' + devUrl + ' ' + obj_body.length + ':' + boundary + '\n');
                                    this._serverResponse.write(obj_body);
                                    context$2$0.next = 16;
                                    break;

                                case 15:
                                    if (str_method == 'GET') {
                                        jzon = devUrl.indexOf('?fw=');

                                        if (jzon != -1 && devUrl.indexOf('&', jzon) == -1) {
                                            devUrl = devUrl.slice(0, jzon);
                                        }
                                        if (devUrl.indexOf('?') == -1 || devUrl.indexOf('/logs.txt') != -1 || devUrl.indexOf('/logger.json') != -1 || devUrl.indexOf('/ping.txt') != -1 || devUrl.indexOf('/files.json?a=dir') != -1) {
                                            subfun = /\/api\/([a-z][A-Za-z0-9]*)[.]json$/.exec(devUrl);

                                            if (subfun) {
                                                devUrl = devUrl.slice(0, subfun.index) + '/api.json';
                                            }
                                            if (!this._callbackCache[devUrl]) {
                                                this._serverResponse.write('\n!YoctoAPI:' + devUrl + ' is not preloaded, adding to list');
                                                this._serverResponse.write('\n@YoctoAPI:+' + devUrl + '\n');
                                                yreq.errorType = YAPI_NO_MORE_DATA;
                                                yreq.errorMsg = 'URL ' + devUrl + ' not preloaded, adding to list';
                                            } else {
                                                jsonres = this._callbackCache[devUrl];

                                                if (subfun) {
                                                    jsonres = jsonres[subfun[1]];
                                                }
                                                yreq.bin_result = this._yapi.imm_str2bin(JSON.stringify(jsonres));
                                            }
                                        } else {
                                            this._serverResponse.write('\n@YoctoAPI:' + str_method + ' ' + devUrl + '\n');
                                            yreq.bin_result = new Uint8Array(0);
                                        }
                                    } else {
                                        yreq.errorType = YAPI_NOT_SUPPORTED;
                                        yreq.errorMsg = 'Unsupported HTTP method';
                                    }

                                case 16:
                                    return context$2$0.abrupt('return', yreq);

                                case 17:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YHttpCallbackHub;
            })(YGenericHub);

            _export('YHttpCallbackHub', YHttpCallbackHub);

            YWebSocketHub = (function (_YGenericHub4) {
                _inherits(YWebSocketHub, _YGenericHub4);

                function YWebSocketHub(obj_yapi, var_urlInfo) {
                    _classCallCheck(this, YWebSocketHub);

                    _get(Object.getPrototypeOf(YWebSocketHub.prototype), 'constructor', this).call(this, obj_yapi, var_urlInfo);

                    this.websocket = null;

                    this.websocketOpenPromise = null;

                    this.tcpChan = [];
                }

                _createClass(YWebSocketHub, [{
                    key: 'imm_webSocketOpen',
                    value: function imm_webSocketOpen(str_url) {
                        this.websocket = new WebSocket(str_url);
                        this.websocket.binaryType = 'arraybuffer';
                    }
                }, {
                    key: 'testHub',
                    value: function testHub(errmsg) {
                        return _regeneratorRuntime.async(function testHub$(context$2$0) {
                            var _this7 = this;

                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!this.disconnecting) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_IO_ERROR);

                                case 2:
                                    this.imm_webSocketOpen(this.urlInfo.url + 'not.byn');
                                    this.websocketOpenPromise = new _Promise(function (resolve, reject) {
                                        _this7.websocket.onmessage = function (evt) {
                                            resolve(YAPI_SUCCESS);
                                            _this7._webSocketMsg(new Uint8Array(evt.data));
                                        };
                                    });
                                    this.websocket.onclose = function (evt) {
                                        _this7.websocket = null;
                                        if (_this7.disconnecting) {
                                            return;
                                        }

                                        if (_this7.retryDelay < 15000) _this7.retryDelay *= 2;
                                        _this7.devListValidity = 500;
                                        _this7.devListExpires = 0;
                                        setTimeout(function () {
                                            _this7.testHub(new YErrorMsg());
                                        }, _this7.retryDelay);
                                    };
                                    this.websocket.onerror = function (evt) {
                                        console.log('WebSocket error: ', evt);
                                        _this7.websocket = null;
                                        if (_this7.disconnecting) {
                                            return;
                                        }

                                        if (_this7.retryDelay < 15000) _this7.retryDelay *= 2;
                                        _this7.devListValidity = 500;
                                        _this7.devListExpires = 0;
                                        setTimeout(function () {
                                            _this7.testHub(new YErrorMsg());
                                        }, _this7.retryDelay);
                                    };
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(this.websocketOpenPromise);

                                case 8:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 9:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_webSocketMsg',
                    value: function _webSocketMsg(arr_bytes) {
                        var text, i, ws, ystream, tcpchan, oldArr, newArr, frame, yreq, pos, header, words;
                        return _regeneratorRuntime.async(function _webSocketMsg$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    text = '';

                                    if (!(arr_bytes[0] == 8 * 8)) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    for (i = 1; i < arr_bytes.length; i++) {
                                        text += String.fromCharCode(arr_bytes[i]);
                                    }
                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this._yapi.parseEvents(this, text));

                                case 5:
                                    return context$2$0.abrupt('return');

                                case 6:
                                    ws = this.websocket;
                                    ystream = arr_bytes[0] >> 3;
                                    tcpchan = arr_bytes[0] & 7;

                                    if (!(ystream == 1 || ystream == 2)) {
                                        context$2$0.next = 20;
                                        break;
                                    }

                                    if (this.tcpChan[tcpchan]) {
                                        context$2$0.next = 13;
                                        break;
                                    }

                                    console.log('WS: Drop frame for closed tcpChan ' + tcpchan);
                                    return context$2$0.abrupt('return');

                                case 13:
                                    oldArr = this.tcpChan[tcpchan].bin_result;
                                    newArr = new Uint8Array(oldArr.length + arr_bytes.length - 1);

                                    newArr.set(oldArr, 0);
                                    newArr.set(arr_bytes.subarray(1), oldArr.length);
                                    this.tcpChan[tcpchan].bin_result = newArr;
                                    if (ystream == 2) {
                                        frame = new Uint8Array(1);

                                        frame[0] = 8 * 2 + tcpchan;
                                        this.websocket.send(frame);
                                        yreq = this.tcpChan[tcpchan];

                                        this.tcpChan[tcpchan] = null;
                                        pos = yreq.bin_result.indexOf(13);

                                        if (pos < 0) {
                                            yreq.errorType = YAPI_IO_ERROR;
                                            yreq.errorMsg = 'Bad response header';
                                        } else {
                                            header = this._yapi.imm_bin2str(yreq.bin_result.subarray(0, pos));
                                            words = header.split(' ');

                                            if (words[0] == 'OK') {
                                                yreq.errorType = YAPI_SUCCESS;
                                                yreq.bin_result = yreq.bin_result.subarray(4);
                                            } else if (words[0] == '0K') {
                                                yreq.errorType = YAPI_IO_ERROR;
                                                yreq.errorMsg = 'Unexpected persistent connection';
                                            } else {
                                                yreq.errorType = YAPI_IO_ERROR;
                                                yreq.errorMsg = 'HTTP error ' + header.slice(words[0].length + 1);
                                            }
                                        }
                                        yreq.acceptor(yreq);
                                    }
                                    return context$2$0.abrupt('return');

                                case 20:
                                    console.log('WS: Unsupported message', arr_bytes);

                                case 21:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'imm_webSocketSend',
                    value: function imm_webSocketSend(arr_bytes) {
                        this.websocket.send(arr_bytes);
                    }
                }, {
                    key: 'request',
                    value: function request(method, baseUrl, devUrl, obj_body) {
                        var httpPromise;
                        return _regeneratorRuntime.async(function request$(context$2$0) {
                            var _this8 = this;

                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    httpPromise = new _Promise(function (resolve, reject) {
                                        var subReq = method + ' ' + devUrl + ' \r\n\r\n';
                                        var ws = _this8.websocket;
                                        var tcpchan = 0;

                                        while (_this8.tcpChan[tcpchan]) {
                                            tcpchan++;
                                        }
                                        if (tcpchan > 2) {
                                            console.log('WebSocket: TOO MANY CONCURRENT TCP CHANNELS');
                                            return;
                                        }
                                        _this8.tcpChan[tcpchan] = new YHTTPRequest(new Uint8Array(0));
                                        _this8.tcpChan[tcpchan].acceptor = resolve;

                                        var pos = 0;
                                        while (pos < subReq.length) {
                                            var framelen = 1 + subReq.length - pos;
                                            if (framelen > 125) framelen = 125;
                                            var datalen = framelen - 1;
                                            var i,
                                                frame = new Uint8Array(framelen);

                                            frame[0] = 8 + tcpchan;
                                            for (i = 0; i < datalen; i++) {
                                                frame[1 + i] = subReq.charCodeAt(pos + i);
                                            }
                                            pos += framelen - 1;
                                            _this8.imm_webSocketSend(frame);
                                        }
                                    });
                                    return context$2$0.abrupt('return', httpPromise);

                                case 2:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'disconnect',
                    value: function disconnect() {
                        return _regeneratorRuntime.async(function disconnect$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(YWebSocketHub.prototype), 'disconnect', this).call(this));

                                case 2:
                                    this.websocket.close();

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YWebSocketHub;
            })(YGenericHub);

            _export('YWebSocketHub', YWebSocketHub);

            YWebSocketNodeHub = (function (_YWebSocketHub) {
                _inherits(YWebSocketNodeHub, _YWebSocketHub);

                function YWebSocketNodeHub(obj_yapi, var_urlInfo) {
                    _classCallCheck(this, YWebSocketNodeHub);

                    _get(Object.getPrototypeOf(YWebSocketNodeHub.prototype), 'constructor', this).call(this, obj_yapi, var_urlInfo);
                    this.wsWebSocket = this._yapi._nodeRequire('ws');
                }

                _createClass(YWebSocketNodeHub, [{
                    key: 'imm_webSocketOpen',
                    value: function imm_webSocketOpen(str_url) {
                        this.websocket = new this.wsWebSocket(this.urlInfo.url + 'not.byn');
                    }
                }, {
                    key: 'imm_webSocketSend',
                    value: function imm_webSocketSend(arr_bytes) {
                        this.websocket.send(arr_bytes, { binary: true, mask: false });
                    }
                }]);

                return YWebSocketNodeHub;
            })(YWebSocketHub);

            _export('YWebSocketNodeHub', YWebSocketNodeHub);

            YWebSocketCallbackHub = (function (_YWebSocketNodeHub) {
                _inherits(YWebSocketCallbackHub, _YWebSocketNodeHub);

                function YWebSocketCallbackHub(obj_yapi, var_urlInfo, ws) {
                    _classCallCheck(this, YWebSocketCallbackHub);

                    _get(Object.getPrototypeOf(YWebSocketCallbackHub.prototype), 'constructor', this).call(this, obj_yapi, var_urlInfo);
                    this.websocket = ws;
                }

                _createClass(YWebSocketCallbackHub, [{
                    key: 'imm_webSocketOpen',
                    value: function imm_webSocketOpen(str_url) {}
                }]);

                return YWebSocketCallbackHub;
            })(YWebSocketNodeHub);

            _export('YWebSocketCallbackHub', YWebSocketCallbackHub);

            YAPIContext = (function () {
                function YAPIContext() {
                    _classCallCheck(this, YAPIContext);

                    this.SUCCESS = 0;
                    this.NOT_INITIALIZED = -1;
                    this.INVALID_ARGUMENT = -2;
                    this.NOT_SUPPORTED = -3;
                    this.DEVICE_NOT_FOUND = -4;
                    this.VERSION_MISMATCH = -5;
                    this.DEVICE_BUSY = -6;
                    this.TIMEOUT = -7;
                    this.IO_ERROR = -8;
                    this.NO_MORE_DATA = -9;
                    this.EXHAUSTED = -10;
                    this.DOUBLE_ACCES = -11;
                    this.UNAUTHORIZED = -12;
                    this.RTC_NOT_READY = -13;
                    this.FILE_NOT_FOUND = -14;
                    this.INVALID_INT = YAPI_INVALID_INT;
                    this.INVALID_UINT = YAPI_INVALID_UINT;
                    this.INVALID_LONG = YAPI_INVALID_LONG;
                    this.INVALID_DOUBLE = YAPI_INVALID_DOUBLE;
                    this.INVALID_STRING = YAPI_INVALID_STRING;

                    this.DETECT_NONE = 0;
                    this.DETECT_USB = 1;
                    this.DETECT_NET = 2;
                    this.DETECT_ALL = this.DETECT_USB | this.DETECT_NET;

                    this.defaultEncoding = 'binary';

                    this.defaultCacheValidity = 5;

                    this.exceptionsDisabled = false;

                    this.imm_init();

                    for (var i = 1; i <= 20; i++) {
                        this.RegisterCalibrationHandler(i, this.LinearCalibrationHandler);
                    }
                    this.RegisterCalibrationHandler(YOCTO_CALIB_TYPE_OFS, this.LinearCalibrationHandler);
                }

                _createClass(YAPIContext, [{
                    key: 'imm_init',
                    value: function imm_init() {
                        this._hubs = [];
                        this._devs = {};
                        this._snByUrl = {};
                        this._snByName = {};
                        this._fnByType = {};
                        this._fnByType.Module = new YFunctionType(this, 'Module');

                        this._lastErrorType = YAPI_SUCCESS;

                        this._lastErrorMsg = 'no error';

                        this._firstArrival = true;

                        this._updateDevListStarted = false;

                        this._pendingCallbacks = [];

                        this._arrivalCallback = null;

                        this._namechgCallback = null;

                        this._removalCallback = null;

                        this._data_events = [];

                        this._forwardValues = 0;

                        this._calibHandlers = {};

                        this._ValueCallbackList = [];

                        this._TimedReportCallbackList = [];

                        this._isNodeJS = false;

                        this._nodeRequire = null;
                        if (typeof System != 'undefined') {
                            if (System._nodeRequire) {
                                this._isNodeJS = true;
                                this._nodeRequire = System._nodeRequire;
                            }
                        } else {
                            if (typeof require != 'undefined') {
                                this._isNodeJS = true;
                                this._nodeRequire = require;
                            }
                        }
                    }
                }, {
                    key: '_throw',
                    value: function _throw(int_errType, str_errMsg, obj_retVal) {
                        this._lastErrorType = int_errType;
                        this._lastErrorMsg = str_errMsg;

                        if (!this.exceptionsDisabled) {
                            try {
                                Trigger_Yocto_Error(int_errType, str_errMsg);
                            } catch (e) {
                                var key,
                                    exc = new Error(str_errMsg);
                                for (key in e) {
                                    if (key != 'name' && key != 'number' && key != 'message') exc[key] = e[key];
                                }
                                exc['name'] = 'YoctoError';
                                exc['message'] = str_errMsg;
                                exc['description'] = str_errMsg;
                                exc['number'] = int_errType;
                                throw exc;
                            }
                        }
                        return obj_retVal;
                    }
                }, {
                    key: '_addHub',
                    value: function _addHub(newhub) {
                        var serial, dev;
                        return _regeneratorRuntime.async(function _addHub$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._hubs.push(newhub);

                                    serial = this._snByUrl[newhub.urlInfo.url];

                                    if (serial) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    dev = new YDevice(this, newhub.urlInfo.url, null, null);
                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(dev.refresh());

                                case 6:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'imm_getHub',
                    value: function imm_getHub(str_rootUrl) {
                        var i, hubUrl;

                        for (i = 0; i < this._hubs.length; i++) {
                            hubUrl = this._hubs[i].urlInfo.url;
                            if (str_rootUrl.slice(0, hubUrl.length) == hubUrl) {
                                return this._hubs[i];
                            }
                        }
                        return null;
                    }
                }, {
                    key: '_updateDeviceList_internal',
                    value: function _updateDeviceList_internal(bool_forceupdate, bool_invokecallbacks) {
                        var i, hubs, hub, rootUrl, hubDev, serial, rooturl, huburl, nbEvents, evt;
                        return _regeneratorRuntime.async(function _updateDeviceList_internal$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (this._firstArrival && bool_invokecallbacks && this._arrivalCallback) {
                                        bool_forceupdate = true;
                                    }
                                    if (bool_forceupdate) {
                                        for (i = 0; i < this._hubs.length; i++) {
                                            this._hubs[i].imm_forceUpdate();
                                        }
                                    }

                                    if (!(this._updateDevListStarted && this.GetTickCount() - this._updateDevListStarted < 30 * 1000)) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', {
                                        errorType: YAPI_SUCCESS,
                                        errorMsg: 'no error',
                                        result: YAPI_SUCCESS
                                    });

                                case 4:
                                    context$2$0.prev = 4;

                                    this._updateDevListStarted = this.GetTickCount();

                                    hubs = [];
                                    i = 0;

                                case 8:
                                    if (!(i < this._hubs.length)) {
                                        context$2$0.next = 18;
                                        break;
                                    }

                                    hub = this._hubs[i];
                                    rootUrl = hub.urlInfo.url;
                                    hubDev = this.imm_getDevice(rootUrl);

                                    if (hubDev) {
                                        context$2$0.next = 14;
                                        break;
                                    }

                                    return context$2$0.abrupt('continue', 15);

                                case 14:
                                    if (hub.devListExpires <= this.GetTickCount()) {
                                        hub.missing = [];
                                        hubs.push(hub);
                                    }

                                case 15:
                                    i++;
                                    context$2$0.next = 8;
                                    break;

                                case 18:
                                    for (serial in this._devs) {
                                        rooturl = this._devs[serial].imm_getRootUrl();

                                        for (i = 0; i < hubs.length; i++) {
                                            huburl = hubs[i].urlInfo.url;

                                            if (rooturl.substr(0, huburl.length) == huburl) {
                                                hubs[i].missing[serial] = true;
                                            }
                                        }
                                    }

                                    context$2$0.next = 21;
                                    return _regeneratorRuntime.awrap(_Promise.all(_Array$from(hubs, function (hub) {
                                        return hub.hubUpdateDeviceList();
                                    })));

                                case 21:
                                    if (!bool_invokecallbacks) {
                                        context$2$0.next = 48;
                                        break;
                                    }

                                    nbEvents = this._pendingCallbacks.length;
                                    i = 0;

                                case 24:
                                    if (!(i < nbEvents)) {
                                        context$2$0.next = 46;
                                        break;
                                    }

                                    evt = this._pendingCallbacks[i];
                                    serial = evt.slice(1);
                                    context$2$0.t0 = evt.charAt(0);
                                    context$2$0.next = context$2$0.t0 === '+' ? 30 : context$2$0.t0 === '/' ? 34 : context$2$0.t0 === '-' ? 38 : 43;
                                    break;

                                case 30:
                                    if (!(this._arrivalCallback != undefined)) {
                                        context$2$0.next = 33;
                                        break;
                                    }

                                    context$2$0.next = 33;
                                    return _regeneratorRuntime.awrap(this._arrivalCallback(yFindModule(serial + '.module')));

                                case 33:
                                    return context$2$0.abrupt('break', 43);

                                case 34:
                                    if (!(this._namechgCallback != undefined)) {
                                        context$2$0.next = 37;
                                        break;
                                    }

                                    context$2$0.next = 37;
                                    return _regeneratorRuntime.awrap(this._namechgCallback(yFindModule(serial + '.module')));

                                case 37:
                                    return context$2$0.abrupt('break', 43);

                                case 38:
                                    if (!(this._removalCallback != undefined)) {
                                        context$2$0.next = 41;
                                        break;
                                    }

                                    context$2$0.next = 41;
                                    return _regeneratorRuntime.awrap(this._removalCallback(yFindModule(serial + '.module')));

                                case 41:
                                    this.imm_forgetDevice(this._devs[serial]);
                                    return context$2$0.abrupt('break', 43);

                                case 43:
                                    i++;
                                    context$2$0.next = 24;
                                    break;

                                case 46:
                                    this._pendingCallbacks = this._pendingCallbacks.slice(nbEvents);
                                    if (this._arrivalCallback != undefined && this._firstArrival) {
                                        this._firstArrival = false;
                                    }

                                case 48:
                                    context$2$0.prev = 48;

                                    this._updateDevListStarted = false;
                                    return context$2$0.finish(48);

                                case 51:
                                    return context$2$0.abrupt('return', {
                                        errorType: YAPI_SUCCESS,
                                        errorMsg: 'no error',
                                        result: YAPI_SUCCESS
                                    });

                                case 52:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this, [[4,, 48, 51]]);
                    }
                }, {
                    key: 'updateDeviceList_process',
                    value: function updateDeviceList_process(hub, hubDev, whitePages, yellowPages) {
                        var refresh, serial, classname, obj_yprecs, ftype, key, yprec, hwid, basetype, devkey, devinfo, devydx, rooturl, currdev;
                        return _regeneratorRuntime.async(function updateDeviceList_process$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    refresh = {};
                                    serial = null;

                                    for (classname in yellowPages) {
                                        obj_yprecs = yellowPages[classname];
                                        ftype = this._fnByType[classname];

                                        if (ftype == undefined) {
                                            ftype = new YFunctionType(this, classname);
                                            this._fnByType[classname] = ftype;
                                        }
                                        for (key in obj_yprecs) {
                                            yprec = obj_yprecs[key];
                                            hwid = yprec['hardwareId'];
                                            basetype = yprec['baseType'];

                                            if (ftype.imm_reindexFunction(hwid, yprec['logicalName'], yprec['advertisedValue'], basetype)) {
                                                serial = hwid.substr(0, hwid.indexOf('.'));
                                                refresh[serial] = true;
                                            }
                                        }
                                    }
                                    context$2$0.t0 = _regeneratorRuntime.keys(whitePages);

                                case 4:
                                    if ((context$2$0.t1 = context$2$0.t0()).done) {
                                        context$2$0.next = 31;
                                        break;
                                    }

                                    devkey = context$2$0.t1.value;
                                    devinfo = whitePages[devkey];

                                    serial = devinfo['serialNumber'];
                                    devydx = devinfo['index'];
                                    rooturl = devinfo.networkUrl.slice(0, -3);

                                    if (rooturl.charAt(0) == '/') rooturl = hubDev.imm_getRootUrl() + rooturl.substr(1);
                                    currdev = this._devs[serial];

                                    if (currdev && this._arrivalCallback != undefined && this._firstArrival) {
                                        this._pendingCallbacks.push('+' + serial);
                                    }
                                    hub.serialByYdx[devydx] = serial;

                                    if (currdev) {
                                        context$2$0.next = 19;
                                        break;
                                    }

                                    new YDevice(this, rooturl, devinfo, yellowPages);
                                    if (this._arrivalCallback != undefined) {
                                        this._pendingCallbacks.push('+' + serial);
                                    }
                                    context$2$0.next = 28;
                                    break;

                                case 19:
                                    if (!(currdev.imm_getLogicalName() != devinfo['logicalName'])) {
                                        context$2$0.next = 25;
                                        break;
                                    }

                                    context$2$0.next = 22;
                                    return _regeneratorRuntime.awrap(currdev.refresh());

                                case 22:
                                    if (this._namechgCallback != undefined) {
                                        this._pendingCallbacks.push('/' + serial);
                                    }
                                    context$2$0.next = 28;
                                    break;

                                case 25:
                                    if (!(refresh[serial] || currdev.imm_getRootUrl() != rooturl || currdev.imm_getBeacon() != devinfo['beacon'])) {
                                        context$2$0.next = 28;
                                        break;
                                    }

                                    context$2$0.next = 28;
                                    return _regeneratorRuntime.awrap(currdev.refresh());

                                case 28:
                                    hub.missing[serial] = false;
                                    context$2$0.next = 4;
                                    break;

                                case 31:
                                    for (serial in hub.missing) {
                                        if (hub.missing[serial]) {
                                            if (this._removalCallback != undefined) {
                                                this._pendingCallbacks.push('-' + serial);
                                            } else {
                                                this.imm_forgetDevice(this._devs[serial]);
                                            }
                                        }
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 33:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'parseEvents',
                    value: function parseEvents(hub, str_lines) {
                        var rows, nrows, value, idx, ev, firstCode, devydx, funydx, serial, funcid, pos, arr, dev, time, rawval, decodedval, notype, parts;
                        return _regeneratorRuntime.async(function parseEvents$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    hub.devListValidity = 10000;rows = str_lines.split('\n');
                                    nrows = rows.length;

                                    nrows--;
                                    idx = 0;

                                case 5:
                                    if (!(idx < nrows)) {
                                        context$2$0.next = 64;
                                        break;
                                    }

                                    ev = rows[idx];

                                    if (!(ev.length == 0)) {
                                        context$2$0.next = 9;
                                        break;
                                    }

                                    return context$2$0.abrupt('continue', 61);

                                case 9:
                                    firstCode = ev.charAt(0);

                                    if (!(ev.length >= 3 && firstCode >= NOTIFY_NETPKT_FLUSHV2YDX && firstCode <= NOTIFY_NETPKT_TIMEAVGYDX)) {
                                        context$2$0.next = 39;
                                        break;
                                    }

                                    hub.retryDelay = 15;
                                    if (hub.notifPos >= 0) hub.notifPos += ev.length + 1;
                                    devydx = ev.charCodeAt(1) - 65;
                                    funydx = ev.charCodeAt(2) - 48;

                                    if (funydx >= 64) {
                                        funydx -= 64;
                                        devydx += 128;
                                    }
                                    serial = hub.serialByYdx[devydx];

                                    if (!(serial && this._devs[serial])) {
                                        context$2$0.next = 37;
                                        break;
                                    }

                                    funcid = funydx == 0xf ? 'time' : this._devs[serial].imm_functionId(funydx);

                                    if (!(funcid != '')) {
                                        context$2$0.next = 37;
                                        break;
                                    }

                                    value = ev.slice(3);
                                    context$2$0.t0 = firstCode;
                                    context$2$0.next = context$2$0.t0 === NOTIFY_NETPKT_FUNCVALYDX ? 24 : context$2$0.t0 === NOTIFY_NETPKT_DEVLOGYDX ? 27 : context$2$0.t0 === NOTIFY_NETPKT_TIMEVALYDX ? 28 : context$2$0.t0 === NOTIFY_NETPKT_TIMEAVGYDX ? 28 : context$2$0.t0 === NOTIFY_NETPKT_TIMEV2YDX ? 28 : context$2$0.t0 === NOTIFY_NETPKT_FUNCV2YDX ? 33 : context$2$0.t0 === NOTIFY_NETPKT_FLUSHV2YDX ? 36 : 36;
                                    break;

                                case 24:
                                    if (value != '') value = value.split('\0')[0];

                                    this.imm_setFunctionValue(serial + '.' + funcid, value);
                                    return context$2$0.abrupt('break', 37);

                                case 27:
                                    return context$2$0.abrupt('break', 37);

                                case 28:
                                    arr = [firstCode == 'x' ? 0 : firstCode == 'z' ? 1 : 2];

                                    for (pos = 0; pos < value.length; pos += 2) {
                                        arr.push(parseInt(value.substr(pos, 2), 16));
                                    }
                                    dev = this._devs[serial];

                                    if (funcid == 'time') {
                                        time = arr[1] + 0x100 * arr[2] + 0x10000 * arr[3] + 0x1000000 * arr[4];

                                        dev.imm_setDeviceTime(time + arr[5] / 250.0);
                                    } else {
                                        this.imm_setTimedReport(serial + '.' + funcid, dev.imm_getDeviceTime(), arr);
                                    }
                                    return context$2$0.abrupt('break', 37);

                                case 33:
                                    rawval = this.imm_decodeNetFuncValV2(value);

                                    if (rawval != null) {
                                        decodedval = this.imm_decodePubVal(rawval[0], rawval, 1, 6);

                                        this.imm_setFunctionValue(serial + '.' + funcid, decodedval);
                                    }
                                    return context$2$0.abrupt('break', 37);

                                case 36:
                                    return context$2$0.abrupt('break', 37);

                                case 37:
                                    context$2$0.next = 60;
                                    break;

                                case 39:
                                    if (!(ev.length > 5 && ev.substr(0, 4) == 'YN01')) {
                                        context$2$0.next = 57;
                                        break;
                                    }

                                    hub.retryDelay = 15;
                                    if (hub.notifPos >= 0) hub.notifPos += ev.length + 1;
                                    notype = ev.substr(4, 1);

                                    if (!(notype == '@')) {
                                        context$2$0.next = 47;
                                        break;
                                    }

                                    hub.notifPos = parseInt(ev.slice(5));
                                    context$2$0.next = 55;
                                    break;

                                case 47:
                                    context$2$0.t1 = parseInt(notype);
                                    context$2$0.next = context$2$0.t1 === 0 ? 50 : context$2$0.t1 === 2 ? 50 : context$2$0.t1 === 4 ? 50 : context$2$0.t1 === 8 ? 50 : context$2$0.t1 === 5 ? 52 : 55;
                                    break;

                                case 50:
                                    hub.devListExpires = 0;
                                    return context$2$0.abrupt('break', 55);

                                case 52:
                                    parts = ev.slice(5).split(',');

                                    if (parts.length > 2) {
                                        value = parts[2].split('\0');
                                        this.imm_setFunctionValue(parts[0] + '.' + parts[1], value[0]);
                                    }
                                    return context$2$0.abrupt('break', 55);

                                case 55:
                                    context$2$0.next = 60;
                                    break;

                                case 57:
                                    hub.devListValidity = 500;
                                    hub.devListExpires = 0;

                                    hub.notifPos = -1;

                                case 60:
                                    hub.currPos += ev.length + 1;

                                case 61:
                                    idx++;
                                    context$2$0.next = 5;
                                    break;

                                case 64:
                                    if (!(this._forwardValues > 0)) {
                                        context$2$0.next = 67;
                                        break;
                                    }

                                    context$2$0.next = 67;
                                    return _regeneratorRuntime.awrap(this.HandleEvents(new YErrorMsg()));

                                case 67:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'imm_decodeNetFuncValV2',
                    value: function imm_decodeNetFuncValV2(p) {
                        var p_ofs = 0;
                        var ch = p.charCodeAt(p_ofs) & 0xff;
                        var len = 0;
                        var funcVal = [0, 0, 0, 0, 0, 0, 0];

                        if (ch < 32 || ch > 32 + 127) {
                            return null;
                        }

                        ch -= 32;
                        funcVal[0] = (ch & 0x40) != 0 ? NOTIFY_V2_6RAWBYTES : NOTIFY_V2_TYPEDDATA;

                        ch &= 0x3f;
                        while (len < YOCTO_PUBVAL_SIZE) {
                            p_ofs++;
                            if (p_ofs >= p.length) break;
                            var newCh = p.charCodeAt(p_ofs) & 0xff;
                            if (newCh == NOTIFY_NETPKT_STOP) {
                                break;
                            }
                            if (newCh < 32 || newCh > 32 + 127) {
                                return null;
                            }
                            newCh -= 32;
                            ch = (ch << 7) + newCh;
                            funcVal[len + 1] = ch >> 5 - len & 0xff;
                            len++;
                        }
                        return funcVal;
                    }
                }, {
                    key: 'imm_decodePubVal',
                    value: function imm_decodePubVal(int_typeV2, arr_funcval, int_ofs, int_funcvalen) {
                        var buffer = '';
                        var endp;
                        if (int_typeV2 == NOTIFY_V2_6RAWBYTES || int_typeV2 == NOTIFY_V2_TYPEDDATA) {
                            var funcValType;
                            if (int_typeV2 == NOTIFY_V2_6RAWBYTES) {
                                funcValType = PUBVAL_6RAWBYTES;
                            } else {
                                funcValType = arr_funcval[int_ofs++];
                            }
                            switch (funcValType) {
                                case PUBVAL_LEGACY:
                                    break;
                                case PUBVAL_1RAWBYTE:
                                case PUBVAL_2RAWBYTES:
                                case PUBVAL_3RAWBYTES:
                                case PUBVAL_4RAWBYTES:
                                case PUBVAL_5RAWBYTES:
                                case PUBVAL_6RAWBYTES:
                                    for (var i = 0; i < funcValType; i++) {
                                        var c = arr_funcval[int_ofs++];
                                        var b = c >> 4;
                                        buffer += b.toString(16);
                                        b = c & 0xf;
                                        buffer += b.toString(16);
                                    }
                                    return buffer;
                                case PUBVAL_C_LONG:
                                case PUBVAL_YOCTO_FLOAT_E3:
                                    var numVal = arr_funcval[int_ofs++];
                                    numVal += arr_funcval[int_ofs++] << 8;
                                    numVal += arr_funcval[int_ofs++] << 16;
                                    numVal += arr_funcval[int_ofs++] << 24;
                                    if (funcValType == PUBVAL_C_LONG) {
                                        return String(Math.round(numVal));
                                    } else {
                                        buffer = String(Math.round(numVal * 1000) / 1000000.0);
                                        endp = buffer.length;
                                        while (endp > 0 && buffer[endp - 1] == '0') {
                                            --endp;
                                        }
                                        if (endp > 0 && buffer[endp - 1] == '.') {
                                            --endp;
                                            buffer = buffer.substr(0, endp);
                                        }
                                        return buffer;
                                    }
                                case PUBVAL_C_FLOAT:
                                    var v = arr_funcval[int_ofs++];
                                    v += arr_funcval[int_ofs++] << 8;
                                    v += arr_funcval[int_ofs++] << 16;
                                    v += arr_funcval[int_ofs++] << 24;
                                    var fraction = (v & (1 << 23) - 1) + (1 << 23) * (v >> 31 | 1);
                                    var exp = (v >> 23 & 0xFF) - 127;
                                    var floatVal = fraction * Math.pow(2, exp - 23);
                                    buffer = String(Math.round(floatVal * 1000000) / 1000000);
                                    endp = buffer.length;
                                    while (endp > 0 && buffer[endp - 1] == '0') {
                                        --endp;
                                    }
                                    if (endp > 0 && buffer[endp - 1] == '.') {
                                        --endp;
                                        buffer = buffer.substr(0, endp);
                                    }
                                    return buffer;
                                default:
                                    return '?';
                            }

                            var len = 0;
                            buffer = '';
                            while (len < YOCTO_PUBVAL_SIZE && len < int_funcvalen) {
                                if (arr_funcval[len] == 0) break;
                                buffer += String.fromCharCode(arr_funcval[len]);
                                len++;
                            }
                        }
                        return buffer;
                    }
                }, {
                    key: 'imm_decExp',
                    value: function imm_decExp(int_pow) {
                        var arr = [1.0e-6, 1.0e-5, 1.0e-4, 1.0e-3, 1.0e-2, 1.0e-1, 1.0, 1.0e1, 1.0e2, 1.0e3, 1.0e4, 1.0e5, 1.0e6, 1.0e7, 1.0e8, 1.0e9];
                        return arr[int_pow];
                    }
                }, {
                    key: 'imm_decimalToDouble',
                    value: function imm_decimalToDouble(val) {
                        var negate = false;
                        var res;
                        var mantis = val & 2047;
                        if (mantis == 0) return 0.0;
                        if (val > 32767) {
                            negate = true;
                            val = 65536 - val;
                        } else if (val < 0) {
                            negate = true;
                            val = -val;
                        }
                        var decexp = this.imm_decExp(val >> 11);
                        if (decexp >= 1.0) {
                            res = mantis * decexp;
                        } else {
                            res = mantis / Math.round(1 / decexp);
                        }

                        return negate ? -res : res;
                    }
                }, {
                    key: 'imm_doubleToDecimal',
                    value: function imm_doubleToDecimal(val) {
                        var negate = false;
                        var comp, mant;
                        var decpow;
                        var res;

                        if (val == 0.0) {
                            return 0;
                        }
                        if (val < 0) {
                            negate = true;
                            val = -val;
                        }
                        comp = val / 1999.0;
                        decpow = 0;
                        while (comp > this.imm_decExp(decpow) && decpow < 15) {
                            decpow++;
                        }
                        mant = val / this.imm_decExp(decpow);
                        if (decpow == 15 && mant > 2047.0) {
                            res = (15 << 11) + 2047;
                        } else {
                                res = (decpow << 11) + Math.round(mant);
                            }
                        return negate ? -res : res;
                    }
                }, {
                    key: 'imm_getCalibrationHandler',
                    value: function imm_getCalibrationHandler(calibType) {
                        return this._calibHandlers[calibType];
                    }
                }, {
                    key: 'imm_decodeWords',
                    value: function imm_decodeWords(data) {
                        var udata = [];
                        for (var i = 0; i < data.length;) {
                            var c = data[i];
                            if (c == '*') {
                                val = 0;
                                i++;
                            } else if (c == 'X') {
                                val = 0xffff;
                                i++;
                            } else if (c == 'Y') {
                                val = 0x7fff;
                                i++;
                            } else if (c >= 'a') {
                                var srcpos = udata.length - 1 - (data.charCodeAt(i++) - 97);
                                if (srcpos < 0) val = 0;else val = udata[srcpos];
                            } else {
                                if (i + 3 > data.length) return udata;
                                var val = data.charCodeAt(i++) - 48;
                                val += data.charCodeAt(i++) - 48 << 5;
                                var lastcode = data.charCodeAt(i++);
                                if (lastcode == 122) lastcode = 92;
                                val += lastcode - 48 << 10;
                            }
                            udata.push(val);
                        }
                        return udata;
                    }
                }, {
                    key: 'imm_decodeFloats',
                    value: function imm_decodeFloats(data) {
                        var idata = [];
                        var p = 0;
                        var datalen = data.length;
                        while (p < datalen) {
                            var val = 0;
                            var sign = 1;
                            var dec = 0;
                            var decInc = 0;
                            var c = data[p++];
                            while (c != '-' && (c < '0' || c > '9')) {
                                if (p >= datalen) {
                                    return idata;
                                }
                                c = data[p++];
                            }
                            if (c == '-') {
                                if (p >= datalen) {
                                    return idata;
                                }
                                sign = -sign;
                                c = data[p++];
                            }
                            while (c >= '0' && c <= '9' || c == '.') {
                                if (c == '.') {
                                    decInc = 1;
                                } else if (dec < 3) {
                                    val = val * 10 + (c.charCodeAt(0) - 48);
                                    dec += decInc;
                                }
                                if (p < datalen) {
                                    c = data[p++];
                                } else {
                                    c = '\0';
                                }
                            }
                            if (dec < 3) {
                                if (dec == 0) val *= 1000;else if (dec == 1) val *= 100;else val *= 10;
                            }
                            idata.push(sign * val);
                        }
                        return idata;
                    }
                }, {
                    key: 'imm_atoi',
                    value: function imm_atoi(str_data) {
                        var num = parseInt(str_data);
                        if (isNaN(num)) {
                            return 0;
                        }
                        return Math.floor(num);
                    }
                }, {
                    key: 'imm_bin2str',
                    value: function imm_bin2str(bin_data) {
                        var len = bin_data.length;

                        var res = '';
                        for (var i = 0; i < len; i += 20) {
                            var subdata = bin_data.subarray(i, Math.min(i + 20, len));
                            res += String.fromCharCode.apply(null, subdata);
                        }
                        return res;
                    }
                }, {
                    key: 'imm_str2bin',
                    value: function imm_str2bin(str_data) {
                        var len = str_data.length;

                        var res = new Uint8Array(len);
                        for (var i = 0; i < len; i++) {
                            res[i] = str_data.charCodeAt(i);
                        }
                        return res;
                    }
                }, {
                    key: 'imm_bin2hexstr',
                    value: function imm_bin2hexstr(bin_data) {
                        var len = bin_data.length;

                        var res = '';
                        for (var i = 0; i < len; i++) {
                            var n = bin_data[i].toString(16);
                            res += n.length < 2 ? '0' + n : n;
                        }
                        return res.toUpperCase();
                    }
                }, {
                    key: 'imm_hexstr2bin',
                    value: function imm_hexstr2bin(str_data) {
                        var len = str_data.length >> 1;

                        var res = new Uint8Array(len);
                        for (var i = 0; i < len; i++) {
                            res[i] = parseInt(str_data.substr(2 * i, 2), 16);
                        }
                        return res;
                    }
                }, {
                    key: 'imm_getDevice',
                    value: function imm_getDevice(str_device) {
                        var dev = null;
                        var serial;

                        if (str_device.substr(0, 7) == 'http://' || str_device.substr(0, 5) == 'ws://') {
                            serial = this._snByUrl[str_device];
                            if (serial != undefined) dev = this._devs[serial];
                        } else {
                            if (this._devs[str_device]) {
                                dev = this._devs[str_device];
                            } else {
                                serial = this._snByName[str_device];
                                if (serial) {
                                    dev = this._devs[serial];
                                }
                            }
                        }
                        return dev;
                    }
                }, {
                    key: '_UpdateValueCallbackList',
                    value: function _UpdateValueCallbackList(obj_func, bool_add) {
                        var index;
                        return _regeneratorRuntime.async(function _UpdateValueCallbackList$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    index = this._ValueCallbackList.indexOf(obj_func);

                                    if (!bool_add) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(obj_func.isOnline());

                                case 4:
                                    if (index < 0) {
                                        this._ValueCallbackList.push(obj_func);
                                    }
                                    context$2$0.next = 8;
                                    break;

                                case 7:
                                    if (index >= 0) {
                                        this._ValueCallbackList.splice(index, 1);
                                    }

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_UpdateTimedReportCallbackList',
                    value: function _UpdateTimedReportCallbackList(obj_func, bool_add) {
                        var index;
                        return _regeneratorRuntime.async(function _UpdateTimedReportCallbackList$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    index = this._TimedReportCallbackList.indexOf(obj_func);

                                    if (!bool_add) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(obj_func.isOnline());

                                case 4:
                                    if (index < 0) {
                                        this._TimedReportCallbackList.push(obj_func);
                                    }
                                    context$2$0.next = 8;
                                    break;

                                case 7:
                                    if (index >= 0) {
                                        this._TimedReportCallbackList.splice(index, 1);
                                    }

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'imm_functionClass',
                    value: function imm_functionClass(str_funcid) {
                        var dotpos = str_funcid.indexOf('.');
                        if (dotpos >= 0) str_funcid = str_funcid.substr(dotpos + 1);
                        var classlen = str_funcid.length;
                        while (str_funcid.substr(classlen - 1, 1) <= '9') classlen--;
                        var classname = str_funcid.substr(0, 1).toUpperCase() + str_funcid.substr(1, classlen - 1);
                        if (this._fnByType[classname] == undefined) this._fnByType[classname] = new YFunctionType(this, classname);

                        return classname;
                    }
                }, {
                    key: 'imm_reindexDevice',
                    value: function imm_reindexDevice(obj_dev) {
                        var rootUrl = obj_dev.imm_getRootUrl();
                        var serial = obj_dev.imm_getSerialNumber();
                        var lname = obj_dev.imm_getLogicalName();
                        this._devs[serial] = obj_dev;
                        this._snByUrl[rootUrl] = serial;
                        if (lname != '') this._snByName[lname] = serial;
                        this._fnByType['Module'].imm_reindexFunction(serial + '.module', lname, null, null);
                        var i,
                            count = obj_dev.imm_functionCount();
                        for (i = 0; i < count; i++) {
                            var funcid = obj_dev.imm_functionId(i);
                            var funcname = obj_dev.imm_functionName(i);
                            var classname = this.imm_functionClass(funcid);
                            this._fnByType[classname].imm_reindexFunction(serial + '.' + funcid, funcname, null, null);
                        }
                    }
                }, {
                    key: 'imm_forgetDevice',
                    value: function imm_forgetDevice(obj_dev) {
                        var rootUrl = obj_dev.imm_getRootUrl();
                        var serial = obj_dev.imm_getSerialNumber();
                        var lname = obj_dev.imm_getLogicalName();
                        delete this._devs[serial];
                        delete this._snByUrl[rootUrl];
                        if (this._snByName[lname] == serial) {
                            delete this._snByName[lname];
                        }
                        this._fnByType['Module'].imm_forgetFunction(serial + '.module');
                        var i,
                            count = obj_dev.imm_functionCount();
                        for (i = 0; i < count; i++) {
                            var funcid = obj_dev.imm_functionId(i);
                            var classname = this.imm_functionClass(funcid);
                            this._fnByType[classname].imm_forgetFunction(serial + '.' + funcid);
                        }
                    }
                }, {
                    key: 'imm_resolveFunction',
                    value: function imm_resolveFunction(str_className, str_func) {
                        if (Y_BASETYPES[str_className] == undefined) {
                            if (this._fnByType[str_className] == undefined) this._fnByType[str_className] = new YFunctionType(this, str_className);
                            return this._fnByType[str_className].imm_resolve(str_func);
                        }

                        var baseType = Y_BASETYPES[str_className];
                        var res;
                        for (str_className in this._fnByType) {
                            if (this._fnByType[str_className].imm_getBaseType() == baseType) {
                                res = this._fnByType[str_className].imm_resolve(str_func);
                                if (res.errorType == YAPI_SUCCESS) return res;
                            }
                        }
                        return { errorType: YAPI_DEVICE_NOT_FOUND,
                            errorMsg: 'No ' + str_className + ' [' + str_func + '] found (old firmware?)',
                            result: null };
                    }
                }, {
                    key: 'imm_getFriendlyNameFunction',
                    value: function imm_getFriendlyNameFunction(str_className, str_func) {
                        if (Y_BASETYPES[str_className] == undefined) {
                            if (this._fnByType[str_className] == undefined) this._fnByType[str_className] = new YFunctionType(this, str_className);
                            return this._fnByType[str_className].imm_getFriendlyName(str_func);
                        }

                        var baseType = Y_BASETYPES[str_className];
                        var res;
                        for (str_className in this._fnByType) {
                            if (this._fnByType[str_className].imm_getBaseType() == baseType) {
                                res = this._fnByType[str_className].imm_getFriendlyName(str_func);
                                if (res.errorType == YAPI_SUCCESS) return res;
                            }
                        }
                        return { errorType: YAPI_DEVICE_NOT_FOUND,
                            errorMsg: 'No ' + str_className + ' [' + str_func + '] found (old firmware?)',
                            result: null };
                    }
                }, {
                    key: 'imm_setFunction',
                    value: function imm_setFunction(str_className, str_func, obj_func) {
                        if (this._fnByType[str_className] == undefined) this._fnByType[str_className] = new YFunctionType(this, str_className);
                        return this._fnByType[str_className].imm_setFunction(str_func, obj_func);
                    }
                }, {
                    key: 'imm_getFunction',
                    value: function imm_getFunction(str_className, str_func) {
                        if (this._fnByType[str_className] == undefined) this._fnByType[str_className] = new YFunctionType(this, str_className);
                        return this._fnByType[str_className].imm_getFunction(str_func);
                    }
                }, {
                    key: 'imm_setFunctionValue',
                    value: function imm_setFunctionValue(str_hwid, str_pubval) {
                        var classname = this.imm_functionClass(str_hwid);
                        if (this._fnByType[classname].imm_setFunctionValue(str_hwid, str_pubval)) {
                            var receivers = this._ValueCallbackList;
                            for (var i = 0; i < receivers.length; i++) {
                                var fun = receivers[i];
                                if (!fun._hwId) continue;
                                if (fun._hwId == str_hwid) {
                                    this._data_events.push([fun, str_pubval]);
                                }
                            }
                        }
                    }
                }, {
                    key: 'imm_setTimedReport',
                    value: function imm_setTimedReport(str_hwid, float_timestamp, arr_report) {
                        var classname = this.imm_functionClass(str_hwid);
                        var receivers = this._TimedReportCallbackList;
                        for (var i = 0; i < receivers.length; i++) {
                            var fun = receivers[i];
                            if (!fun._hwId) continue;
                            if (fun._hwId == str_hwid) {
                                this._data_events.push([fun, float_timestamp, arr_report]);
                            }
                        }
                    }
                }, {
                    key: 'imm_getFunctionValue',
                    value: function imm_getFunctionValue(str_hwid) {
                        var classname = this.imm_functionClass(str_hwid);
                        return this._fnByType[classname].imm_getFunctionValue(str_hwid);
                    }
                }, {
                    key: 'imm_getFunctionBaseType',
                    value: function imm_getFunctionBaseType(str_hwid) {
                        var classname = this.imm_functionClass(str_hwid);
                        return this._fnByType[classname].imm_getBaseType();
                    }
                }, {
                    key: 'imm_getFirstHardwareId',
                    value: function imm_getFirstHardwareId(str_className) {
                        if (Y_BASETYPES[str_className] == undefined) {
                            if (this._fnByType[str_className] == undefined) this._fnByType[str_className] = new YFunctionType(this, str_className);
                            return this._fnByType[str_className].imm_getFirstHardwareId();
                        }

                        var baseType = Y_BASETYPES[str_className];
                        var res;
                        for (str_className in this._fnByType) {
                            if (this._fnByType[str_className].imm_getBaseType() == baseType) {
                                res = this._fnByType[str_className].imm_getFirstHardwareId();
                                if (res != undefined) return res;
                            }
                        }
                        return null;
                    }
                }, {
                    key: 'imm_getNextHardwareId',
                    value: function imm_getNextHardwareId(str_className, str_hwid) {
                        if (Y_BASETYPES[str_className] == undefined) {
                            return this._fnByType[str_className].imm_getNextHardwareId(str_hwid);
                        }

                        var baseType = Y_BASETYPES[str_className];
                        var prevclass = this.imm_functionClass(str_hwid);
                        var res = this._fnByType[prevclass].imm_getNextHardwareId(str_hwid);
                        if (res != undefined) return res;
                        for (str_className in this._fnByType) {
                            if (prevclass != '') {
                                if (str_className != prevclass) continue;
                                prevclass = '';
                                continue;
                            }
                            if (this._fnByType[str_className].imm_getBaseType() == baseType) {
                                res = this._fnByType[str_className].imm_getFirstHardwareId();
                                if (res != undefined) return res;
                            }
                        }
                        return null;
                    }
                }, {
                    key: 'devRequest',
                    value: function devRequest(str_device, str_request) {
                        var obj_body = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];
                        var lines, res, lockdev, baseUrl, serial, words, hub, method, devUrl, pos, delayedCode, newPromise;
                        return _regeneratorRuntime.async(function devRequest$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    lines = str_request.split('\n');
                                    res = new YHTTPRequest(null);
                                    lockdev = undefined;
                                    baseUrl = undefined;

                                    if (!(str_device.substr(0, 7) == 'http://' || str_device.substr(0, 5) == 'ws://')) {
                                        context$2$0.next = 10;
                                        break;
                                    }

                                    baseUrl = str_device;
                                    if (baseUrl.slice(-1) != '/') baseUrl = baseUrl + '/';
                                    if (lines[0].substr(0, 12) != 'GET /not.byn') {
                                        serial = this._snByUrl[baseUrl];

                                        if (serial) {
                                            lockdev = this._devs[serial];
                                        }
                                    }
                                    context$2$0.next = 20;
                                    break;

                                case 10:
                                    lockdev = this.imm_getDevice(str_device);

                                    if (lockdev) {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    res.errorType = YAPI_DEVICE_NOT_FOUND;
                                    res.errorMsg = 'Device [' + str_device + '] not online';
                                    return context$2$0.abrupt('return', res);

                                case 15:
                                    if (!(lines[0] == 'GET /api.json')) {
                                        context$2$0.next = 19;
                                        break;
                                    }

                                    context$2$0.next = 18;
                                    return _regeneratorRuntime.awrap(lockdev.requestAPI(this.defaultCacheValidity));

                                case 18:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 19:
                                    baseUrl = lockdev.imm_getRootUrl();

                                case 20:
                                    words = lines[0].split(' ');

                                    if (!(words.length < 2)) {
                                        context$2$0.next = 27;
                                        break;
                                    }

                                    res.errorType = YAPI_INVALID_ARGUMENT;
                                    res.errorMsg = 'Invalid request, not enough words; expected a method name and a URL';
                                    return context$2$0.abrupt('return', res);

                                case 27:
                                    if (!(words.length > 2)) {
                                        context$2$0.next = 31;
                                        break;
                                    }

                                    res.errorType = YAPI_INVALID_ARGUMENT;
                                    res.errorMsg = 'Invalid request, too many words; make sure the URL is URI-encoded';
                                    return context$2$0.abrupt('return', res);

                                case 31:
                                    hub = this.imm_getHub(baseUrl);
                                    method = words[0];
                                    devUrl = words[1];

                                    if (devUrl.substr(0, 1) == '/') devUrl = devUrl.substr(1);
                                    pos = baseUrl.indexOf('//');

                                    pos = baseUrl.indexOf('/', pos + 3);
                                    devUrl = baseUrl.slice(pos) + devUrl;
                                    baseUrl = baseUrl.slice(0, pos);
                                    if (!obj_body) obj_body = '';

                                    delayedCode = function delayedCode() {
                                        return hub.request(method, baseUrl, devUrl, obj_body);
                                    };

                                    if (!lockdev) {
                                        context$2$0.next = 49;
                                        break;
                                    }

                                    newPromise = lockdev._pendingQueries.then(delayedCode, delayedCode);

                                    lockdev._pendingQueries = newPromise;
                                    context$2$0.next = 46;
                                    return _regeneratorRuntime.awrap(newPromise);

                                case 46:
                                    res = context$2$0.sent;
                                    context$2$0.next = 52;
                                    break;

                                case 49:
                                    context$2$0.next = 51;
                                    return _regeneratorRuntime.awrap(delayedCode());

                                case 51:
                                    res = context$2$0.sent;

                                case 52:
                                    return context$2$0.abrupt('return', res);

                                case 53:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'imm_funcDev_internal',
                    value: function imm_funcDev_internal(str_className, str_func) {
                        var res = new YFuncRequest(null);
                        var resolve = this.imm_resolveFunction(str_className, str_func);
                        if (resolve.errorType != YAPI_SUCCESS) {
                            res.errorType = resolve.errorType;
                            res.errorMsg = resolve.errorMsg;
                        } else {
                            str_func = resolve.result;
                            var dotpos = str_func.indexOf('.');
                            var devid = str_func.substr(0, dotpos);
                            var funcid = str_func.substr(dotpos + 1);
                            var dev = this.imm_getDevice(devid);
                            if (dev == null) {
                                res.errorType = YAPI_DEVICE_NOT_FOUND;
                                res.errorMsg = 'Device [' + devid + '] not found';
                            } else {
                                res.obj_result = { device: dev, deviceid: devid, functionid: funcid, hwid: str_func };
                            }
                        }
                        return res;
                    }
                }, {
                    key: '_funcDev',
                    value: function _funcDev(str_className, str_func) {
                        var resolve, updRes;
                        return _regeneratorRuntime.async(function _funcDev$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    resolve = this.imm_funcDev_internal(str_className, str_func);

                                    if (!(resolve.errorType == YAPI_SUCCESS)) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', resolve);

                                case 5:
                                    if (!(resolve.errorType == YAPI_DEVICE_NOT_FOUND && this._hubs.length == 0)) {
                                        context$2$0.next = 8;
                                        break;
                                    }

                                    resolve.errorMsg = 'Impossible to contact any device because no hub has been registered';
                                    return context$2$0.abrupt('return', resolve);

                                case 8:
                                    context$2$0.next = 10;
                                    return _regeneratorRuntime.awrap(this._updateDeviceList_internal(true, false));

                                case 10:
                                    updRes = context$2$0.sent;

                                    if (!(updRes.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    resolve.errorType = updRes.errorType;
                                    resolve.errorMsg = updRes.errorMsg;
                                    return context$2$0.abrupt('return', resolve);

                                case 15:
                                    return context$2$0.abrupt('return', this.imm_funcDev_internal(str_className, str_func));

                                case 16:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'funcRequest',
                    value: function funcRequest(str_className, str_func, str_extra) {
                        var int_msValidity = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
                        var funcreq, devreq, loadval, yreq, jsonData, httpreq, key;
                        return _regeneratorRuntime.async(function funcRequest$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._funcDev(str_className, str_func));

                                case 2:
                                    funcreq = context$2$0.sent;

                                    if (!(funcreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', funcreq);

                                case 5:
                                    devreq = funcreq.obj_result;
                                    loadval = null;
                                    yreq = undefined;

                                    if (!(str_extra == '')) {
                                        context$2$0.next = 18;
                                        break;
                                    }

                                    context$2$0.next = 11;
                                    return _regeneratorRuntime.awrap(devreq.device.requestAPI(int_msValidity));

                                case 11:
                                    yreq = context$2$0.sent;

                                    if (!(yreq != null)) {
                                        context$2$0.next = 16;
                                        break;
                                    }

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 15;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', yreq);

                                case 15:
                                    try {
                                        jsonData = JSON.parse(this.imm_bin2str(yreq.bin_result));

                                        loadval = jsonData[devreq.functionid];
                                    } catch (err) {}

                                case 16:
                                    context$2$0.next = 19;
                                    break;

                                case 18:
                                    devreq.device.imm_dropCache();

                                case 19:
                                    if (loadval) {
                                        context$2$0.next = 31;
                                        break;
                                    }

                                    if (str_extra == '') str_extra = '.json';
                                    httpreq = 'GET /api/' + devreq.functionid + str_extra;
                                    context$2$0.next = 24;
                                    return _regeneratorRuntime.awrap(this.devRequest(devreq.deviceid, httpreq));

                                case 24:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 27;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', yreq);

                                case 27:
                                    if (!(yreq.bin_result.length == 0 && httpreq.indexOf('?') >= 0)) {
                                        context$2$0.next = 30;
                                        break;
                                    }

                                    funcreq.obj_result = yreq.bin_result;
                                    return context$2$0.abrupt('return', funcreq);

                                case 30:
                                    try {
                                        loadval = JSON.parse(this.imm_bin2str(yreq.bin_result));
                                    } catch (err) {}

                                case 31:
                                    if (!loadval) {
                                        funcreq.errorType = YAPI_IO_ERROR;
                                        funcreq.errorMsg = 'Request failed, could not parse API value for function ' + devreq.hwid;
                                    } else {
                                        for (key in devreq) {
                                            loadval[key] = devreq[key];
                                        }
                                        funcreq.obj_result = loadval;
                                    }
                                    return context$2$0.abrupt('return', funcreq);

                                case 33:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'HTTPRequest',
                    value: function HTTPRequest(str_device, str_request) {
                        var yreq;
                        return _regeneratorRuntime.async(function HTTPRequest$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.devRequest(str_device, str_request));

                                case 2:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 5;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(yreq.errorType, yreq.errorMsg, null));

                                case 5:
                                    return context$2$0.abrupt('return', yreq.bin_result);

                                case 6:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'GetAPIVersion',
                    value: function GetAPIVersion() {
                        return _regeneratorRuntime.async(function GetAPIVersion$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', '1.10.22592-dev.38');

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'InitAPI',
                    value: function InitAPI(mode, errmsg) {
                        return _regeneratorRuntime.async(function InitAPI$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'FreeAPI',
                    value: function FreeAPI() {
                        var i;
                        return _regeneratorRuntime.async(function FreeAPI$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    for (i = 0; i < this._hubs.length; i++) {
                                        this._hubs[i].disconnect();
                                    }

                                    this.imm_init();

                                case 2:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'DisableExceptions',
                    value: function DisableExceptions() {
                        return _regeneratorRuntime.async(function DisableExceptions$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this.exceptionsDisabled = true;

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'EnableExceptions',
                    value: function EnableExceptions() {
                        return _regeneratorRuntime.async(function EnableExceptions$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this.exceptionsDisabled = false;

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'LogUnhandledPromiseRejections',
                    value: function LogUnhandledPromiseRejections() {
                        return _regeneratorRuntime.async(function LogUnhandledPromiseRejections$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (this._isNodeJS) {
                                        process.on('unhandledRejection', function (reason, p) {
                                            console.log("Unhandled Rejection at: Promise ", p, " reason: ", reason);
                                        });
                                    } else {
                                        window.addEventListener('onunhandledrejection', function (event) {
                                            console.error('Unhandled rejection (promise: ', event.promise, ', reason: ', event.reason, ').');
                                        });
                                    }

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'imm_parseRegisteredUrl',
                    value: function imm_parseRegisteredUrl(str_url) {
                        var user = '';
                        var pass = '';
                        var port = '4444';
                        var host;
                        var url = 'http://';

                        if (str_url.slice(0, 7) == 'http://') {
                            str_url = str_url.slice(7);
                        } else if (str_url.slice(0, 5) == 'ws://') {
                            url = 'ws://';
                            str_url = str_url.slice(5);
                        }
                        var pos = str_url.indexOf('/');
                        if (pos > 0) {
                            str_url = str_url.slice(0, pos);
                        }
                        var authpos = str_url.indexOf('@');
                        if (authpos >= 0) {
                            var auth = str_url.slice(0, authpos);
                            var passpos = auth.indexOf(':');
                            if (passpos >= 0) {
                                user = auth.slice(0, passpos);
                                pass = auth.slice(passpos + 1);
                                url += user + ':' + pass + '@';
                            } else {
                                user = auth;
                                url += user + '@';
                            }
                            str_url = str_url.slice(authpos + 1);
                        }
                        pos = str_url.indexOf(':');
                        if (pos < 0) {
                            host = str_url;
                        } else {
                            host = str_url.slice(0, pos);
                            port = str_url.slice(pos + 1);
                        }
                        if (host == 'callback') {
                            if (url.slice(0, 3) == 'ws:') {
                                url = 'ws://callback:4444/';
                            } else {
                                url = 'http://callback:4444/';
                            }
                        } else {
                            url += host + ':' + port + '/';
                        }
                        var res = { 'user': user, 'pass': pass, 'host': host, 'port': port, 'url': url };
                        return res;
                    }
                }, {
                    key: 'imm_registerHub_internal',
                    value: function imm_registerHub_internal(urlInfo) {
                        var newhub = undefined;
                        if (urlInfo.url.slice(0, 3) == 'ws:') {
                            if (this._isNodeJS) {
                                newhub = new YWebSocketNodeHub(this, urlInfo);
                            } else {
                                newhub = new YWebSocketHub(this, urlInfo);
                            }
                        } else {
                            if (this._isNodeJS) {
                                newhub = new YHttpNodeHub(this, urlInfo);
                            } else {
                                newhub = new YHttpHub(this, urlInfo);
                            }
                        }
                        return newhub;
                    }
                }, {
                    key: 'RegisterHub',
                    value: function RegisterHub(url, errmsg) {
                        var urlInfo, newhub, retcode, yreq;
                        return _regeneratorRuntime.async(function RegisterHub$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    urlInfo = this.imm_parseRegisteredUrl(url);
                                    newhub = this.imm_getHub(urlInfo.url);

                                    if (!newhub) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 4:
                                    newhub = this.imm_registerHub_internal(urlInfo);
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(newhub.testHub(errmsg));

                                case 7:
                                    retcode = context$2$0.sent;

                                    if (!(retcode != YAPI_SUCCESS)) {
                                        context$2$0.next = 10;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(retcode, errmsg.msg, retcode));

                                case 10:
                                    context$2$0.next = 12;
                                    return _regeneratorRuntime.awrap(this._addHub(newhub));

                                case 12:
                                    context$2$0.next = 14;
                                    return _regeneratorRuntime.awrap(this._updateDeviceList_internal(true, false));

                                case 14:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 18;
                                        break;
                                    }

                                    if (errmsg != undefined) {
                                        errmsg.msg = yreq.errorMsg;
                                        this._serverResponse.write('\n!YoctoAPI:' + errmsg.msg + '\n');
                                    }
                                    return context$2$0.abrupt('return', this._throw(yreq.errorType, yreq.errorMsg, yreq.errorType));

                                case 18:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 19:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'PreregisterHub',
                    value: function PreregisterHub(url, errmsg) {
                        var urlInfo, newhub;
                        return _regeneratorRuntime.async(function PreregisterHub$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    urlInfo = this.imm_parseRegisteredUrl(url);
                                    newhub = this.imm_getHub(urlInfo.url);

                                    if (!newhub) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 4:
                                    newhub = this.imm_registerHub_internal(urlInfo);
                                    this._addHub(newhub);

                                    newhub.testHub(errmsg);

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'RegisterHubHttpCallback',
                    value: function RegisterHubHttpCallback(incomingMessage, serverResponse, errmsg) {
                        var urlInfo, newhub, retcode, yreq;
                        return _regeneratorRuntime.async(function RegisterHubHttpCallback$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    urlInfo = this.imm_parseRegisteredUrl('http://callback:4444');
                                    newhub = this.imm_getHub(urlInfo.url);

                                    if (!newhub) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 4:
                                    newhub = new YHttpCallbackHub(this, urlInfo, incomingMessage, serverResponse);
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(newhub.httpCallbackPromise);

                                case 7:
                                    context$2$0.next = 9;
                                    return _regeneratorRuntime.awrap(newhub.testHub(errmsg));

                                case 9:
                                    retcode = context$2$0.sent;

                                    if (!(retcode != YAPI_SUCCESS)) {
                                        context$2$0.next = 13;
                                        break;
                                    }

                                    this._serverResponse.write('\n!YoctoAPI:' + errmsg.msg + '\n');
                                    return context$2$0.abrupt('return', this._throw(retcode, errmsg.msg, retcode));

                                case 13:
                                    context$2$0.next = 15;
                                    return _regeneratorRuntime.awrap(this._addHub(newhub));

                                case 15:
                                    context$2$0.next = 17;
                                    return _regeneratorRuntime.awrap(this._updateDeviceList_internal(true, false));

                                case 17:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 21;
                                        break;
                                    }

                                    if (errmsg != undefined) {
                                        errmsg.msg = yreq.errorMsg;
                                        this._serverResponse.write('\n!YoctoAPI:' + errmsg.msg + '\n');
                                    }
                                    return context$2$0.abrupt('return', this._throw(yreq.errorType, yreq.errorMsg, yreq.errorType));

                                case 21:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 22:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'RegisterHubWebSocketCallback',
                    value: function RegisterHubWebSocketCallback(ws, errmsg) {
                        var urlInfo, newhub, retcode, yreq;
                        return _regeneratorRuntime.async(function RegisterHubWebSocketCallback$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    urlInfo = this.imm_parseRegisteredUrl('http://callback:4444');
                                    newhub = this.imm_getHub(urlInfo.url);

                                    if (!newhub) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 4:
                                    newhub = new YWebSocketCallbackHub(this, urlInfo, ws);
                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(newhub.testHub(errmsg));

                                case 7:
                                    retcode = context$2$0.sent;

                                    if (!(retcode != YAPI_SUCCESS)) {
                                        context$2$0.next = 10;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', this._throw(retcode, errmsg.msg, retcode));

                                case 10:
                                    context$2$0.next = 12;
                                    return _regeneratorRuntime.awrap(this._addHub(newhub));

                                case 12:
                                    context$2$0.next = 14;
                                    return _regeneratorRuntime.awrap(this._updateDeviceList_internal(true, false));

                                case 14:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 18;
                                        break;
                                    }

                                    if (errmsg != undefined) {
                                        errmsg.msg = yreq.errorMsg;
                                    }
                                    return context$2$0.abrupt('return', this._throw(yreq.errorType, yreq.errorMsg, yreq.errorType));

                                case 18:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 19:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'UnregisterHub',
                    value: function UnregisterHub(url) {
                        var urlInfo, i, j, serial, before, after;
                        return _regeneratorRuntime.async(function UnregisterHub$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    urlInfo = this.imm_parseRegisteredUrl(url);
                                    i = 0;

                                case 2:
                                    if (!(i < this._hubs.length)) {
                                        context$2$0.next = 13;
                                        break;
                                    }

                                    if (!(this._hubs[i].urlInfo.url == urlInfo.url)) {
                                        context$2$0.next = 10;
                                        break;
                                    }

                                    this._hubs[i].disconnect();
                                    for (j = 0; j < this._hubs[i].serialByYdx.length; j++) {
                                        serial = this._hubs[i].serialByYdx[j];

                                        this.imm_forgetDevice(this._devs[serial]);
                                    }
                                    before = this._hubs.slice(0, i);

                                    if (i + 1 < this._hubs.length) {
                                        after = this._hubs.slice(i + 1);

                                        this._hubs = before.concat(after);
                                    }
                                    this._hubs = before;
                                    return context$2$0.abrupt('return');

                                case 10:
                                    i++;
                                    context$2$0.next = 2;
                                    break;

                                case 13:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'UpdateDeviceList',
                    value: function UpdateDeviceList(errmsg) {
                        var yreq;
                        return _regeneratorRuntime.async(function UpdateDeviceList$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this._updateDeviceList_internal(false, true));

                                case 2:
                                    yreq = context$2$0.sent;

                                    if (!(yreq.errorType != YAPI_SUCCESS)) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    if (errmsg != undefined) errmsg.msg = yreq.errorMsg;
                                    return context$2$0.abrupt('return', this._throw(yreq.errorType, yreq.errorMsg, yreq.errorType));

                                case 6:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'HandleEvents',
                    value: function HandleEvents(errmsg) {
                        var nEvents, i, evt, dev, report;
                        return _regeneratorRuntime.async(function HandleEvents$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    nEvents = this._data_events.length;
                                    i = 0;

                                case 2:
                                    if (!(i < nEvents)) {
                                        context$2$0.next = 19;
                                        break;
                                    }

                                    evt = this._data_events[i];

                                    if (!(typeof evt[1] == 'string')) {
                                        context$2$0.next = 9;
                                        break;
                                    }

                                    context$2$0.next = 7;
                                    return _regeneratorRuntime.awrap(evt[0]._invokeValueCallback(evt[1]));

                                case 7:
                                    context$2$0.next = 16;
                                    break;

                                case 9:
                                    dev = this.imm_getDevice(evt[0]._serial);

                                    if (!dev) {
                                        context$2$0.next = 16;
                                        break;
                                    }

                                    context$2$0.next = 13;
                                    return _regeneratorRuntime.awrap(evt[0]._decodeTimedReport(evt[1], evt[2]));

                                case 13:
                                    report = context$2$0.sent;
                                    context$2$0.next = 16;
                                    return _regeneratorRuntime.awrap(evt[0]._invokeTimedReportCallback(report));

                                case 16:
                                    i++;
                                    context$2$0.next = 2;
                                    break;

                                case 19:
                                    this._data_events = this._data_events.slice(nEvents);

                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 21:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'Sleep',
                    value: function Sleep(ms_duration, errmsg) {
                        var end;
                        return _regeneratorRuntime.async(function Sleep$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    end = this.GetTickCount() + ms_duration;
                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.HandleEvents(errmsg));

                                case 3:
                                    if (!(this.GetTickCount() < end)) {
                                        context$2$0.next = 10;
                                        break;
                                    }

                                    context$2$0.next = 6;
                                    return _regeneratorRuntime.awrap(this._microSleep_internal());

                                case 6:
                                    context$2$0.next = 8;
                                    return _regeneratorRuntime.awrap(this.HandleEvents(errmsg));

                                case 8:
                                    context$2$0.next = 3;
                                    break;

                                case 10:
                                    return context$2$0.abrupt('return', YAPI_SUCCESS);

                                case 11:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: '_microSleep_internal',
                    value: function _microSleep_internal() {
                        return new _Promise(function (resolve, reject) {
                            setTimeout(resolve, 3);
                        });
                    }
                }, {
                    key: 'GetTickCount',
                    value: function GetTickCount() {
                        return +new Date();
                    }
                }, {
                    key: 'CheckLogicalName',
                    value: function CheckLogicalName(name) {
                        return _regeneratorRuntime.async(function CheckLogicalName$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(name == '')) {
                                        context$2$0.next = 2;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', true);

                                case 2:
                                    if (name) {
                                        context$2$0.next = 4;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', false);

                                case 4:
                                    if (!(name.length > 19)) {
                                        context$2$0.next = 6;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', false);

                                case 6:
                                    return context$2$0.abrupt('return', /^[A-Za-z0-9_\-]*$/.test(name));

                                case 7:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'RegisterDeviceArrivalCallback',
                    value: function RegisterDeviceArrivalCallback(arrivalCallback) {
                        return _regeneratorRuntime.async(function RegisterDeviceArrivalCallback$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._arrivalCallback = arrivalCallback;

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'RegisterDeviceChangeCallback',
                    value: function RegisterDeviceChangeCallback(changeCallback) {
                        return _regeneratorRuntime.async(function RegisterDeviceChangeCallback$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._namechgCallback = changeCallback;

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'RegisterDeviceRemovalCallback',
                    value: function RegisterDeviceRemovalCallback(removalCallback) {
                        return _regeneratorRuntime.async(function RegisterDeviceRemovalCallback$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._removalCallback = removalCallback;

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'RegisterCalibrationHandler',
                    value: function RegisterCalibrationHandler(calibrationType, calibrationHandler) {
                        return _regeneratorRuntime.async(function RegisterCalibrationHandler$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    this._calibHandlers[calibrationType.toString()] = calibrationHandler;

                                case 1:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'LinearCalibrationHandler',
                    value: function LinearCalibrationHandler(float_rawValue, int_calibType, arr_calibParams, arr_calibRawValues, arr_calibRefValues) {
                        var npt;
                        var x = arr_calibRawValues[0];
                        var adj = arr_calibRefValues[0] - x;
                        var i = 0;

                        if (int_calibType < YOCTO_CALIB_TYPE_OFS) {
                            npt = Math.min(int_calibType % 10, arr_calibRawValues.length, arr_calibRefValues.length);
                        } else {
                            npt = arr_calibRefValues.length;
                        }
                        while (float_rawValue > arr_calibRawValues[i] && ++i < npt) {
                            var x2 = x;
                            var adj2 = adj;

                            x = arr_calibRawValues[i];
                            adj = arr_calibRefValues[i] - x;

                            if (float_rawValue < x && x > x2) {
                                adj = adj2 + (adj - adj2) * (float_rawValue - x2) / (x - x2);
                            }
                        }
                        return float_rawValue + adj;
                    }
                }, {
                    key: 'imm_initshaw',
                    value: function imm_initshaw(str_s, int_pad, int_xinit, _shaw) {
                        var i,
                            j = -1,
                            k = 0;
                        var n = str_s.length;

                        for (i = 0; i < 64; i++) {
                            var c = 0;
                            if (i < n) {
                                c = str_s.charCodeAt(i);
                            } else if (int_pad != 0) {
                                if (i == n + 3) c = int_pad;else if (i == n + 4) c = 0x80;
                            }
                            if (k == 0) {
                                j++;
                                _shaw[j] = 0;
                                k = 32;
                            }
                            k -= 8;
                            _shaw[j] |= c << k;
                        }
                        if (int_pad != 0) {
                            _shaw[15] = 8 * (64 + n + 4);
                        }
                        if (int_xinit != 0) {
                            var xdw = int_xinit << 16 | int_xinit;
                            for (j = 0; j < 16; j++) {
                                _shaw[j] ^= xdw;
                            }
                        }
                    }
                }, {
                    key: 'imm_itershaw',
                    value: function imm_itershaw(s, _shaw) {
                        var a, b, c, d, e, t, k;

                        a = s[0];
                        b = s[1];
                        c = s[2];
                        d = s[3];
                        e = s[4];
                        for (k = 16; k < 80; k++) {
                            t = _shaw[k - 3] ^ _shaw[k - 8] ^ _shaw[k - 14] ^ _shaw[k - 16];
                            _shaw[k] = t << 1 | t >>> 31;
                        }
                        for (k = 0; k < 20; k++) {
                            t = (a << 5 | a >>> 27) + e + _shaw[k] + 0x5A827999 + (b & c | ~b & d);
                            e = d;
                            d = c;
                            c = b << 30 | b >>> 2;
                            b = a;
                            a = t & 0xffffffff;
                        }
                        for (k = 20; k < 40; k++) {
                            t = (a << 5 | a >>> 27) + e + _shaw[k] + 0x6ED9EBA1 + (b ^ c ^ d);
                            e = d;
                            d = c;
                            c = b << 30 | b >>> 2;
                            b = a;
                            a = t & 0xffffffff;
                        }
                        for (k = 40; k < 60; k++) {
                            t = (a << 5 | a >>> 27) + e + _shaw[k] + 0x8F1BBCDC + (b & c | b & d | c & d);
                            e = d;
                            d = c;
                            c = b << 30 | b >>> 2;
                            b = a;
                            a = t & 0xffffffff;
                        }
                        for (k = 60; k < 80; k++) {
                            t = (a << 5 | a >>> 27) + e + _shaw[k] + 0xCA62C1D6 + (b ^ c ^ d);
                            e = d;
                            d = c;
                            c = b << 30 | b >>> 2;
                            b = a;
                            a = t & 0xffffffff;
                        }
                        _shaw[0] = s[0] + a & 0xffffffff;
                        _shaw[1] = s[1] + b & 0xffffffff;
                        _shaw[2] = s[2] + c & 0xffffffff;
                        _shaw[3] = s[3] + d & 0xffffffff;
                        _shaw[4] = s[4] + e & 0xffffffff;
                    }
                }, {
                    key: 'ComputePSK',
                    value: function ComputePSK(ssid, pass) {
                        var sha1_init, inner, outer, shau, res, iter, pos, k, _shaw, hex;

                        return _regeneratorRuntime.async(function ComputePSK$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    sha1_init = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];
                                    inner = [], outer = [], shau = [], res = [];

                                    _shaw = new Array(80);
                                    this.imm_initshaw(pass, 0, 0x3636, _shaw);
                                    this.imm_itershaw(sha1_init, _shaw);
                                    for (k = 0; k < 5; k++) inner[k] = _shaw[k];
                                    _shaw = new Array(80);
                                    this.imm_initshaw(pass, 0, 0x5c5c, _shaw);
                                    this.imm_itershaw(sha1_init, _shaw);
                                    for (k = 0; k < 5; k++) outer[k] = _shaw[k];

                                    pos = 0;
                                    for (k = 0; k < 5; k++) shau[k] = 0;
                                    _shaw = new Array(80);
                                    this.imm_initshaw(ssid, 1, 0, _shaw);

                                    for (iter = 0; iter < 8192;) {
                                        this.imm_itershaw(inner, _shaw);
                                        _shaw[5] = 0x80000000;
                                        for (k = 6; k < 15; k++) {
                                            _shaw[k] = 0;
                                        }
                                        _shaw[15] = 8 * (64 + 20);
                                        this.imm_itershaw(outer, _shaw);
                                        shau[0] ^= _shaw[0];
                                        shau[1] ^= _shaw[1];
                                        shau[2] ^= _shaw[2];
                                        shau[3] ^= _shaw[3];
                                        shau[4] ^= _shaw[4];
                                        iter++;

                                        if ((iter & 4095) == 0) {
                                            for (k = 0; k < 5 && pos < 32; k++) {
                                                res[pos++] = shau[k] >>> 24 & 0xff;
                                                res[pos++] = shau[k] >>> 16 & 0xff;
                                                res[pos++] = shau[k] >>> 8 & 0xff;
                                                res[pos++] = shau[k] & 0xff;
                                            }
                                            if (iter == 4096) {
                                                for (k = 0; k < 5; k++) shau[k] = 0;
                                                _shaw = new Array(80);
                                                this.imm_initshaw(ssid, 2, 0, _shaw);
                                            }
                                        }
                                    }
                                    hex = '';

                                    for (k = 0; k < 32; k++) {
                                        hex += ('0' + Number(res[k]).toString(16)).slice(-2);
                                    }
                                    return context$2$0.abrupt('return', hex);

                                case 18:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }]);

                return YAPIContext;
            })();

            _export('YAPIContext', YAPIContext);

            YAPI = new YAPIContext();

            _export('YAPI', YAPI);

            yLinearCalibrationHandler = YAPI.LinearCalibrationHandler;

            _export('yLinearCalibrationHandler', yLinearCalibrationHandler);
        }
    };
});
System.register('yoctolib-es/yocto_wireless.js', ['npm:babel-runtime@5.8.34/helpers/create-class', 'npm:babel-runtime@5.8.34/helpers/class-call-check', 'npm:babel-runtime@5.8.34/helpers/get', 'npm:babel-runtime@5.8.34/helpers/inherits', 'npm:babel-runtime@5.8.34/regenerator', 'yoctolib-es/yocto_api.js'], function (_export) {
    var _createClass, _classCallCheck, _get, _inherits, _regeneratorRuntime, YAPI, YAPI_SUCCESS, YFunction, YModule, YSensor, Y_SECURITY_UNKNOWN, Y_SECURITY_OPEN, Y_SECURITY_WEP, Y_SECURITY_WPA, Y_SECURITY_WPA2, Y_SECURITY_INVALID, Y_LINKQUALITY_INVALID, Y_SSID_INVALID, Y_CHANNEL_INVALID, Y_MESSAGE_INVALID, Y_WLANCONFIG_INVALID, YWlanRecord, YWireless;

    function yFindWireless(func) {
        return YWireless.FindWireless(func);
    }

    function yFirstWireless() {
        return YWireless.FirstWireless();
    }

    return {
        setters: [function (_npmBabelRuntime5834HelpersCreateClass) {
            _createClass = _npmBabelRuntime5834HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5834HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5834HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5834HelpersGet) {
            _get = _npmBabelRuntime5834HelpersGet['default'];
        }, function (_npmBabelRuntime5834HelpersInherits) {
            _inherits = _npmBabelRuntime5834HelpersInherits['default'];
        }, function (_npmBabelRuntime5834Regenerator) {
            _regeneratorRuntime = _npmBabelRuntime5834Regenerator['default'];
        }, function (_yoctolibEsYocto_apiJs) {
            YAPI = _yoctolibEsYocto_apiJs.YAPI;
            YAPI_SUCCESS = _yoctolibEsYocto_apiJs.YAPI_SUCCESS;
            YFunction = _yoctolibEsYocto_apiJs.YFunction;
            YModule = _yoctolibEsYocto_apiJs.YModule;
            YSensor = _yoctolibEsYocto_apiJs.YSensor;
        }],
        execute: function () {
            'use strict';

            _export('yFindWireless', yFindWireless);

            _export('yFirstWireless', yFirstWireless);

            Y_SECURITY_UNKNOWN = 0;

            _export('Y_SECURITY_UNKNOWN', Y_SECURITY_UNKNOWN);

            Y_SECURITY_OPEN = 1;

            _export('Y_SECURITY_OPEN', Y_SECURITY_OPEN);

            Y_SECURITY_WEP = 2;

            _export('Y_SECURITY_WEP', Y_SECURITY_WEP);

            Y_SECURITY_WPA = 3;

            _export('Y_SECURITY_WPA', Y_SECURITY_WPA);

            Y_SECURITY_WPA2 = 4;

            _export('Y_SECURITY_WPA2', Y_SECURITY_WPA2);

            Y_SECURITY_INVALID = -1;

            _export('Y_SECURITY_INVALID', Y_SECURITY_INVALID);

            Y_LINKQUALITY_INVALID = YAPI.INVALID_UINT;

            _export('Y_LINKQUALITY_INVALID', Y_LINKQUALITY_INVALID);

            Y_SSID_INVALID = YAPI.INVALID_STRING;

            _export('Y_SSID_INVALID', Y_SSID_INVALID);

            Y_CHANNEL_INVALID = YAPI.INVALID_UINT;

            _export('Y_CHANNEL_INVALID', Y_CHANNEL_INVALID);

            Y_MESSAGE_INVALID = YAPI.INVALID_STRING;

            _export('Y_MESSAGE_INVALID', Y_MESSAGE_INVALID);

            Y_WLANCONFIG_INVALID = YAPI.INVALID_STRING;

            _export('Y_WLANCONFIG_INVALID', Y_WLANCONFIG_INVALID);

            YWlanRecord = (function () {
                function YWlanRecord(str_json) {
                    _classCallCheck(this, YWlanRecord);

                    this._ssid = '';

                    this._channel = 0;

                    this._sec = '';

                    this._rssi = 0;

                    var loadval = JSON.parse(str_json);
                    this._ssid = loadval.ssid;
                    this._channel = loadval.channel;
                    this._sec = loadval.sec;
                    this._rssi = loadval.rssi;
                }

                _createClass(YWlanRecord, [{
                    key: 'get_ssid',
                    value: function get_ssid() {
                        return this._ssid;
                    }
                }, {
                    key: 'get_channel',
                    value: function get_channel() {
                        return this._channel;
                    }
                }, {
                    key: 'get_security',
                    value: function get_security() {
                        return this._sec;
                    }
                }, {
                    key: 'get_linkQuality',
                    value: function get_linkQuality() {
                        return this._rssi;
                    }
                }]);

                return YWlanRecord;
            })();

            YWireless = (function (_YFunction) {
                _inherits(YWireless, _YFunction);

                function YWireless(str_func) {
                    _classCallCheck(this, YWireless);

                    _get(Object.getPrototypeOf(YWireless.prototype), 'constructor', this).call(this, obj_yapi, str_func);

                    this._className = 'Wireless';

                    this._linkQuality = Y_LINKQUALITY_INVALID;

                    this._ssid = Y_SSID_INVALID;

                    this._channel = Y_CHANNEL_INVALID;

                    this._security = Y_SECURITY_INVALID;

                    this._message = Y_MESSAGE_INVALID;

                    this._wlanConfig = Y_WLANCONFIG_INVALID;
                    this.imm_setConst({
                        LINKQUALITY_INVALID: YAPI.INVALID_UINT,
                        SSID_INVALID: YAPI.INVALID_STRING,
                        CHANNEL_INVALID: YAPI.INVALID_UINT,
                        SECURITY_UNKNOWN: 0,
                        SECURITY_OPEN: 1,
                        SECURITY_WEP: 2,
                        SECURITY_WPA: 3,
                        SECURITY_WPA2: 4,
                        SECURITY_INVALID: -1,
                        MESSAGE_INVALID: YAPI.INVALID_STRING,
                        WLANCONFIG_INVALID: YAPI.INVALID_STRING
                    });
                }

                _createClass(YWireless, [{
                    key: 'imm_parseAttr',
                    value: function imm_parseAttr(name, val) {
                        switch (name) {
                            case 'linkQuality':
                                this._linkQuality = parseInt(val);
                                return 1;
                            case 'ssid':
                                this._ssid = val;
                                return 1;
                            case 'channel':
                                this._channel = parseInt(val);
                                return 1;
                            case 'security':
                                this._security = parseInt(val);
                                return 1;
                            case 'message':
                                this._message = val;
                                return 1;
                            case 'wlanConfig':
                                this._wlanConfig = val;
                                return 1;
                        }
                        return _get(Object.getPrototypeOf(YWireless.prototype), 'imm_parseAttr', this).call(this, name, val);
                    }
                }, {
                    key: 'get_linkQuality',
                    value: function get_linkQuality() {
                        return _regeneratorRuntime.async(function get_linkQuality$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_LINKQUALITY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._linkQuality);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_ssid',
                    value: function get_ssid() {
                        return _regeneratorRuntime.async(function get_ssid$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SSID_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._ssid);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_channel',
                    value: function get_channel() {
                        return _regeneratorRuntime.async(function get_channel$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_CHANNEL_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._channel);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_security',
                    value: function get_security() {
                        return _regeneratorRuntime.async(function get_security$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_SECURITY_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._security);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_message',
                    value: function get_message() {
                        return _regeneratorRuntime.async(function get_message$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_MESSAGE_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._message);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_wlanConfig',
                    value: function get_wlanConfig() {
                        return _regeneratorRuntime.async(function get_wlanConfig$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    if (!(this._cacheExpiration <= this._yapi.GetTickCount())) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    context$2$0.next = 3;
                                    return _regeneratorRuntime.awrap(this.load(this._yapi.defaultCacheValidity));

                                case 3:
                                    context$2$0.t0 = context$2$0.sent;
                                    context$2$0.t1 = YAPI_SUCCESS;

                                    if (!(context$2$0.t0 != context$2$0.t1)) {
                                        context$2$0.next = 7;
                                        break;
                                    }

                                    return context$2$0.abrupt('return', Y_WLANCONFIG_INVALID);

                                case 7:
                                    return context$2$0.abrupt('return', this._wlanConfig);

                                case 8:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'set_wlanConfig',
                    value: function set_wlanConfig(newval) {
                        var rest_val;
                        return _regeneratorRuntime.async(function set_wlanConfig$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    rest_val = undefined;

                                    rest_val = newval;
                                    context$2$0.next = 4;
                                    return _regeneratorRuntime.awrap(this._setAttr('wlanConfig', rest_val));

                                case 4:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 5:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'joinNetwork',
                    value: function joinNetwork(ssid, securityKey) {
                        return _regeneratorRuntime.async(function joinNetwork$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_wlanConfig('INFRA:' + ssid + '\\' + securityKey));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'adhocNetwork',
                    value: function adhocNetwork(ssid, securityKey) {
                        return _regeneratorRuntime.async(function adhocNetwork$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_wlanConfig('ADHOC:' + ssid + '\\' + securityKey));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'softAPNetwork',
                    value: function softAPNetwork(ssid, securityKey) {
                        return _regeneratorRuntime.async(function softAPNetwork$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    context$2$0.next = 2;
                                    return _regeneratorRuntime.awrap(this.set_wlanConfig('SOFTAP:' + ssid + '\\' + securityKey));

                                case 2:
                                    return context$2$0.abrupt('return', context$2$0.sent);

                                case 3:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'get_detectedWlans',
                    value: function get_detectedWlans() {
                        var json, wlanlist, res, ii;
                        return _regeneratorRuntime.async(function get_detectedWlans$(context$2$0) {
                            while (1) switch (context$2$0.prev = context$2$0.next) {
                                case 0:
                                    json = undefined;
                                    wlanlist = [];
                                    res = [];
                                    context$2$0.next = 5;
                                    return _regeneratorRuntime.awrap(this._download('wlan.json?by=name'));

                                case 5:
                                    json = context$2$0.sent;

                                    wlanlist = this.imm_json_get_array(json);
                                    res.length = 0;
                                    for (ii in wlanlist) {
                                        res.push(new YWlanRecord(wlanlist[ii]));
                                    }
                                    return context$2$0.abrupt('return', res);

                                case 10:
                                case 'end':
                                    return context$2$0.stop();
                            }
                        }, null, this);
                    }
                }, {
                    key: 'nextWireless',
                    value: function nextWireless() {
                        var resolve = this._yapi.imm_resolveFunction(this._className, this._func);
                        if (resolve.errorType != YAPI_SUCCESS) return null;

                        var next_hwid = this._yapi.imm_getNextHardwareId(this._className, resolve.result);
                        if (next_hwid == null) return null;
                        return YWireless.FindWirelessInContext(this._yapi, next_hwid);
                    }
                }], [{
                    key: 'FindWireless',
                    value: function FindWireless(func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCache('Wireless', func);
                        if (obj == null) {
                            obj = new YWireless(YAPI, func);
                            YFunction._AddToCache('Wireless', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FindWirelessInContext',
                    value: function FindWirelessInContext(yctx, func) {
                        var obj = undefined;
                        obj = YFunction._FindFromCacheInContext(yctx, 'Wireless', func);
                        if (obj == null) {
                            obj = new YWireless(yctx, func);
                            YFunction._AddToCache('Wireless', func, obj);
                        }
                        return obj;
                    }
                }, {
                    key: 'FirstWireless',
                    value: function FirstWireless() {
                        var next_hwid = YAPI.imm_getFirstHardwareId('Wireless');
                        if (next_hwid == null) return null;
                        return YWireless.FindWireless(next_hwid);
                    }
                }, {
                    key: 'FirstWirelessInContext',
                    value: function FirstWirelessInContext(yctx) {
                        var next_hwid = yctx.imm_getFirstHardwareId('Wireless');
                        if (next_hwid == null) return null;
                        return YWireless.FindWirelessInContext(yctx, next_hwid);
                    }
                }]);

                return YWireless;
            })(YFunction);

            _export('YWireless', YWireless);
        }
    };
});
System.register('yoctolib-es.js', ['yoctolib-es/yocto_api.js', 'yoctolib-es/yocto_accelerometer.js', 'yoctolib-es/yocto_altitude.js', 'yoctolib-es/yocto_anbutton.js', 'yoctolib-es/yocto_audioin.js', 'yoctolib-es/yocto_audioout.js', 'yoctolib-es/yocto_bluetoothlink.js', 'yoctolib-es/yocto_buzzer.js', 'yoctolib-es/yocto_carbondioxide.js', 'yoctolib-es/yocto_cellular.js', 'yoctolib-es/yocto_colorled.js', 'yoctolib-es/yocto_compass.js', 'yoctolib-es/yocto_current.js', 'yoctolib-es/yocto_currentloopoutput.js', 'yoctolib-es/yocto_datalogger.js', 'yoctolib-es/yocto_digitalio.js', 'yoctolib-es/yocto_display.js', 'yoctolib-es/yocto_dualpower.js', 'yoctolib-es/yocto_files.js', 'yoctolib-es/yocto_genericsensor.js', 'yoctolib-es/yocto_gps.js', 'yoctolib-es/yocto_groundspeed.js', 'yoctolib-es/yocto_gyro.js', 'yoctolib-es/yocto_hubport.js', 'yoctolib-es/yocto_humidity.js', 'yoctolib-es/yocto_latitude.js', 'yoctolib-es/yocto_led.js', 'yoctolib-es/yocto_lightsensor.js', 'yoctolib-es/yocto_longitude.js', 'yoctolib-es/yocto_magnetometer.js', 'yoctolib-es/yocto_motor.js', 'yoctolib-es/yocto_network.js', 'yoctolib-es/yocto_oscontrol.js', 'yoctolib-es/yocto_power.js', 'yoctolib-es/yocto_poweroutput.js', 'yoctolib-es/yocto_pressure.js', 'yoctolib-es/yocto_pwminput.js', 'yoctolib-es/yocto_pwmoutput.js', 'yoctolib-es/yocto_pwmpowersource.js', 'yoctolib-es/yocto_quadraturedecoder.js', 'yoctolib-es/yocto_realtimeclock.js', 'yoctolib-es/yocto_refframe.js', 'yoctolib-es/yocto_relay.js', 'yoctolib-es/yocto_segmenteddisplay.js', 'yoctolib-es/yocto_serialport.js', 'yoctolib-es/yocto_servo.js', 'yoctolib-es/yocto_temperature.js', 'yoctolib-es/yocto_tilt.js', 'yoctolib-es/yocto_voc.js', 'yoctolib-es/yocto_voltage.js', 'yoctolib-es/yocto_wakeupmonitor.js', 'yoctolib-es/yocto_wakeupschedule.js', 'yoctolib-es/yocto_watchdog.js', 'yoctolib-es/yocto_wireless.js'], function (_export) {
  'use strict';

  return {
    setters: [function (_yoctolibEsYocto_apiJs) {
      var _exportObj = {};

      for (var _key in _yoctolibEsYocto_apiJs) {
        if (_key !== 'default') _exportObj[_key] = _yoctolibEsYocto_apiJs[_key];
      }

      for (var _key5 in _yoctolibEsYocto_apiJs) {
        if (_key5 !== 'default') _exportObj[_key5] = _yoctolibEsYocto_apiJs[_key5];
      }

      _export(_exportObj);
    }, function (_yoctolibEsYocto_accelerometerJs) {
      var _exportObj2 = {};

      for (var _key2 in _yoctolibEsYocto_accelerometerJs) {
        if (_key2 !== 'default') _exportObj2[_key2] = _yoctolibEsYocto_accelerometerJs[_key2];
      }

      _export(_exportObj2);
    }, function (_yoctolibEsYocto_altitudeJs) {
      var _exportObj3 = {};

      for (var _key3 in _yoctolibEsYocto_altitudeJs) {
        if (_key3 !== 'default') _exportObj3[_key3] = _yoctolibEsYocto_altitudeJs[_key3];
      }

      _export(_exportObj3);
    }, function (_yoctolibEsYocto_anbuttonJs) {
      var _exportObj4 = {};

      for (var _key4 in _yoctolibEsYocto_anbuttonJs) {
        if (_key4 !== 'default') _exportObj4[_key4] = _yoctolibEsYocto_anbuttonJs[_key4];
      }

      _export(_exportObj4);
    }, function (_yoctolibEsYocto_audioinJs) {
      var _exportObj5 = {};

      for (var _key6 in _yoctolibEsYocto_audioinJs) {
        if (_key6 !== 'default') _exportObj5[_key6] = _yoctolibEsYocto_audioinJs[_key6];
      }

      _export(_exportObj5);
    }, function (_yoctolibEsYocto_audiooutJs) {
      var _exportObj6 = {};

      for (var _key7 in _yoctolibEsYocto_audiooutJs) {
        if (_key7 !== 'default') _exportObj6[_key7] = _yoctolibEsYocto_audiooutJs[_key7];
      }

      _export(_exportObj6);
    }, function (_yoctolibEsYocto_bluetoothlinkJs) {
      var _exportObj7 = {};

      for (var _key8 in _yoctolibEsYocto_bluetoothlinkJs) {
        if (_key8 !== 'default') _exportObj7[_key8] = _yoctolibEsYocto_bluetoothlinkJs[_key8];
      }

      _export(_exportObj7);
    }, function (_yoctolibEsYocto_buzzerJs) {
      var _exportObj8 = {};

      for (var _key9 in _yoctolibEsYocto_buzzerJs) {
        if (_key9 !== 'default') _exportObj8[_key9] = _yoctolibEsYocto_buzzerJs[_key9];
      }

      _export(_exportObj8);
    }, function (_yoctolibEsYocto_carbondioxideJs) {
      var _exportObj9 = {};

      for (var _key10 in _yoctolibEsYocto_carbondioxideJs) {
        if (_key10 !== 'default') _exportObj9[_key10] = _yoctolibEsYocto_carbondioxideJs[_key10];
      }

      _export(_exportObj9);
    }, function (_yoctolibEsYocto_cellularJs) {
      var _exportObj10 = {};

      for (var _key11 in _yoctolibEsYocto_cellularJs) {
        if (_key11 !== 'default') _exportObj10[_key11] = _yoctolibEsYocto_cellularJs[_key11];
      }

      _export(_exportObj10);
    }, function (_yoctolibEsYocto_colorledJs) {
      var _exportObj11 = {};

      for (var _key12 in _yoctolibEsYocto_colorledJs) {
        if (_key12 !== 'default') _exportObj11[_key12] = _yoctolibEsYocto_colorledJs[_key12];
      }

      _export(_exportObj11);
    }, function (_yoctolibEsYocto_compassJs) {
      var _exportObj12 = {};

      for (var _key13 in _yoctolibEsYocto_compassJs) {
        if (_key13 !== 'default') _exportObj12[_key13] = _yoctolibEsYocto_compassJs[_key13];
      }

      _export(_exportObj12);
    }, function (_yoctolibEsYocto_currentJs) {
      var _exportObj13 = {};

      for (var _key14 in _yoctolibEsYocto_currentJs) {
        if (_key14 !== 'default') _exportObj13[_key14] = _yoctolibEsYocto_currentJs[_key14];
      }

      _export(_exportObj13);
    }, function (_yoctolibEsYocto_currentloopoutputJs) {
      var _exportObj14 = {};

      for (var _key15 in _yoctolibEsYocto_currentloopoutputJs) {
        if (_key15 !== 'default') _exportObj14[_key15] = _yoctolibEsYocto_currentloopoutputJs[_key15];
      }

      _export(_exportObj14);
    }, function (_yoctolibEsYocto_dataloggerJs) {
      var _exportObj15 = {};

      for (var _key16 in _yoctolibEsYocto_dataloggerJs) {
        if (_key16 !== 'default') _exportObj15[_key16] = _yoctolibEsYocto_dataloggerJs[_key16];
      }

      _export(_exportObj15);
    }, function (_yoctolibEsYocto_digitalioJs) {
      var _exportObj16 = {};

      for (var _key17 in _yoctolibEsYocto_digitalioJs) {
        if (_key17 !== 'default') _exportObj16[_key17] = _yoctolibEsYocto_digitalioJs[_key17];
      }

      _export(_exportObj16);
    }, function (_yoctolibEsYocto_displayJs) {
      var _exportObj17 = {};

      for (var _key18 in _yoctolibEsYocto_displayJs) {
        if (_key18 !== 'default') _exportObj17[_key18] = _yoctolibEsYocto_displayJs[_key18];
      }

      _export(_exportObj17);
    }, function (_yoctolibEsYocto_dualpowerJs) {
      var _exportObj18 = {};

      for (var _key19 in _yoctolibEsYocto_dualpowerJs) {
        if (_key19 !== 'default') _exportObj18[_key19] = _yoctolibEsYocto_dualpowerJs[_key19];
      }

      _export(_exportObj18);
    }, function (_yoctolibEsYocto_filesJs) {
      var _exportObj19 = {};

      for (var _key20 in _yoctolibEsYocto_filesJs) {
        if (_key20 !== 'default') _exportObj19[_key20] = _yoctolibEsYocto_filesJs[_key20];
      }

      _export(_exportObj19);
    }, function (_yoctolibEsYocto_genericsensorJs) {
      var _exportObj20 = {};

      for (var _key21 in _yoctolibEsYocto_genericsensorJs) {
        if (_key21 !== 'default') _exportObj20[_key21] = _yoctolibEsYocto_genericsensorJs[_key21];
      }

      _export(_exportObj20);
    }, function (_yoctolibEsYocto_gpsJs) {
      var _exportObj21 = {};

      for (var _key22 in _yoctolibEsYocto_gpsJs) {
        if (_key22 !== 'default') _exportObj21[_key22] = _yoctolibEsYocto_gpsJs[_key22];
      }

      _export(_exportObj21);
    }, function (_yoctolibEsYocto_groundspeedJs) {
      var _exportObj22 = {};

      for (var _key23 in _yoctolibEsYocto_groundspeedJs) {
        if (_key23 !== 'default') _exportObj22[_key23] = _yoctolibEsYocto_groundspeedJs[_key23];
      }

      _export(_exportObj22);
    }, function (_yoctolibEsYocto_gyroJs) {
      var _exportObj23 = {};

      for (var _key24 in _yoctolibEsYocto_gyroJs) {
        if (_key24 !== 'default') _exportObj23[_key24] = _yoctolibEsYocto_gyroJs[_key24];
      }

      _export(_exportObj23);
    }, function (_yoctolibEsYocto_hubportJs) {
      var _exportObj24 = {};

      for (var _key25 in _yoctolibEsYocto_hubportJs) {
        if (_key25 !== 'default') _exportObj24[_key25] = _yoctolibEsYocto_hubportJs[_key25];
      }

      _export(_exportObj24);
    }, function (_yoctolibEsYocto_humidityJs) {
      var _exportObj25 = {};

      for (var _key26 in _yoctolibEsYocto_humidityJs) {
        if (_key26 !== 'default') _exportObj25[_key26] = _yoctolibEsYocto_humidityJs[_key26];
      }

      _export(_exportObj25);
    }, function (_yoctolibEsYocto_latitudeJs) {
      var _exportObj26 = {};

      for (var _key27 in _yoctolibEsYocto_latitudeJs) {
        if (_key27 !== 'default') _exportObj26[_key27] = _yoctolibEsYocto_latitudeJs[_key27];
      }

      _export(_exportObj26);
    }, function (_yoctolibEsYocto_ledJs) {
      var _exportObj27 = {};

      for (var _key28 in _yoctolibEsYocto_ledJs) {
        if (_key28 !== 'default') _exportObj27[_key28] = _yoctolibEsYocto_ledJs[_key28];
      }

      _export(_exportObj27);
    }, function (_yoctolibEsYocto_lightsensorJs) {
      var _exportObj28 = {};

      for (var _key29 in _yoctolibEsYocto_lightsensorJs) {
        if (_key29 !== 'default') _exportObj28[_key29] = _yoctolibEsYocto_lightsensorJs[_key29];
      }

      _export(_exportObj28);
    }, function (_yoctolibEsYocto_longitudeJs) {
      var _exportObj29 = {};

      for (var _key30 in _yoctolibEsYocto_longitudeJs) {
        if (_key30 !== 'default') _exportObj29[_key30] = _yoctolibEsYocto_longitudeJs[_key30];
      }

      _export(_exportObj29);
    }, function (_yoctolibEsYocto_magnetometerJs) {
      var _exportObj30 = {};

      for (var _key31 in _yoctolibEsYocto_magnetometerJs) {
        if (_key31 !== 'default') _exportObj30[_key31] = _yoctolibEsYocto_magnetometerJs[_key31];
      }

      _export(_exportObj30);
    }, function (_yoctolibEsYocto_motorJs) {
      var _exportObj31 = {};

      for (var _key32 in _yoctolibEsYocto_motorJs) {
        if (_key32 !== 'default') _exportObj31[_key32] = _yoctolibEsYocto_motorJs[_key32];
      }

      _export(_exportObj31);
    }, function (_yoctolibEsYocto_networkJs) {
      var _exportObj32 = {};

      for (var _key33 in _yoctolibEsYocto_networkJs) {
        if (_key33 !== 'default') _exportObj32[_key33] = _yoctolibEsYocto_networkJs[_key33];
      }

      _export(_exportObj32);
    }, function (_yoctolibEsYocto_oscontrolJs) {
      var _exportObj33 = {};

      for (var _key34 in _yoctolibEsYocto_oscontrolJs) {
        if (_key34 !== 'default') _exportObj33[_key34] = _yoctolibEsYocto_oscontrolJs[_key34];
      }

      _export(_exportObj33);
    }, function (_yoctolibEsYocto_powerJs) {
      var _exportObj34 = {};

      for (var _key35 in _yoctolibEsYocto_powerJs) {
        if (_key35 !== 'default') _exportObj34[_key35] = _yoctolibEsYocto_powerJs[_key35];
      }

      _export(_exportObj34);
    }, function (_yoctolibEsYocto_poweroutputJs) {
      var _exportObj35 = {};

      for (var _key36 in _yoctolibEsYocto_poweroutputJs) {
        if (_key36 !== 'default') _exportObj35[_key36] = _yoctolibEsYocto_poweroutputJs[_key36];
      }

      _export(_exportObj35);
    }, function (_yoctolibEsYocto_pressureJs) {
      var _exportObj36 = {};

      for (var _key37 in _yoctolibEsYocto_pressureJs) {
        if (_key37 !== 'default') _exportObj36[_key37] = _yoctolibEsYocto_pressureJs[_key37];
      }

      _export(_exportObj36);
    }, function (_yoctolibEsYocto_pwminputJs) {
      var _exportObj37 = {};

      for (var _key38 in _yoctolibEsYocto_pwminputJs) {
        if (_key38 !== 'default') _exportObj37[_key38] = _yoctolibEsYocto_pwminputJs[_key38];
      }

      _export(_exportObj37);
    }, function (_yoctolibEsYocto_pwmoutputJs) {
      var _exportObj38 = {};

      for (var _key39 in _yoctolibEsYocto_pwmoutputJs) {
        if (_key39 !== 'default') _exportObj38[_key39] = _yoctolibEsYocto_pwmoutputJs[_key39];
      }

      _export(_exportObj38);
    }, function (_yoctolibEsYocto_pwmpowersourceJs) {
      var _exportObj39 = {};

      for (var _key40 in _yoctolibEsYocto_pwmpowersourceJs) {
        if (_key40 !== 'default') _exportObj39[_key40] = _yoctolibEsYocto_pwmpowersourceJs[_key40];
      }

      _export(_exportObj39);
    }, function (_yoctolibEsYocto_quadraturedecoderJs) {
      var _exportObj40 = {};

      for (var _key41 in _yoctolibEsYocto_quadraturedecoderJs) {
        if (_key41 !== 'default') _exportObj40[_key41] = _yoctolibEsYocto_quadraturedecoderJs[_key41];
      }

      _export(_exportObj40);
    }, function (_yoctolibEsYocto_realtimeclockJs) {
      var _exportObj41 = {};

      for (var _key42 in _yoctolibEsYocto_realtimeclockJs) {
        if (_key42 !== 'default') _exportObj41[_key42] = _yoctolibEsYocto_realtimeclockJs[_key42];
      }

      _export(_exportObj41);
    }, function (_yoctolibEsYocto_refframeJs) {
      var _exportObj42 = {};

      for (var _key43 in _yoctolibEsYocto_refframeJs) {
        if (_key43 !== 'default') _exportObj42[_key43] = _yoctolibEsYocto_refframeJs[_key43];
      }

      _export(_exportObj42);
    }, function (_yoctolibEsYocto_relayJs) {
      var _exportObj43 = {};

      for (var _key44 in _yoctolibEsYocto_relayJs) {
        if (_key44 !== 'default') _exportObj43[_key44] = _yoctolibEsYocto_relayJs[_key44];
      }

      _export(_exportObj43);
    }, function (_yoctolibEsYocto_segmenteddisplayJs) {
      var _exportObj44 = {};

      for (var _key45 in _yoctolibEsYocto_segmenteddisplayJs) {
        if (_key45 !== 'default') _exportObj44[_key45] = _yoctolibEsYocto_segmenteddisplayJs[_key45];
      }

      _export(_exportObj44);
    }, function (_yoctolibEsYocto_serialportJs) {
      var _exportObj45 = {};

      for (var _key46 in _yoctolibEsYocto_serialportJs) {
        if (_key46 !== 'default') _exportObj45[_key46] = _yoctolibEsYocto_serialportJs[_key46];
      }

      _export(_exportObj45);
    }, function (_yoctolibEsYocto_servoJs) {
      var _exportObj46 = {};

      for (var _key47 in _yoctolibEsYocto_servoJs) {
        if (_key47 !== 'default') _exportObj46[_key47] = _yoctolibEsYocto_servoJs[_key47];
      }

      _export(_exportObj46);
    }, function (_yoctolibEsYocto_temperatureJs) {
      var _exportObj47 = {};

      for (var _key48 in _yoctolibEsYocto_temperatureJs) {
        if (_key48 !== 'default') _exportObj47[_key48] = _yoctolibEsYocto_temperatureJs[_key48];
      }

      _export(_exportObj47);
    }, function (_yoctolibEsYocto_tiltJs) {
      var _exportObj48 = {};

      for (var _key49 in _yoctolibEsYocto_tiltJs) {
        if (_key49 !== 'default') _exportObj48[_key49] = _yoctolibEsYocto_tiltJs[_key49];
      }

      _export(_exportObj48);
    }, function (_yoctolibEsYocto_vocJs) {
      var _exportObj49 = {};

      for (var _key50 in _yoctolibEsYocto_vocJs) {
        if (_key50 !== 'default') _exportObj49[_key50] = _yoctolibEsYocto_vocJs[_key50];
      }

      _export(_exportObj49);
    }, function (_yoctolibEsYocto_voltageJs) {
      var _exportObj50 = {};

      for (var _key51 in _yoctolibEsYocto_voltageJs) {
        if (_key51 !== 'default') _exportObj50[_key51] = _yoctolibEsYocto_voltageJs[_key51];
      }

      _export(_exportObj50);
    }, function (_yoctolibEsYocto_wakeupmonitorJs) {
      var _exportObj51 = {};

      for (var _key52 in _yoctolibEsYocto_wakeupmonitorJs) {
        if (_key52 !== 'default') _exportObj51[_key52] = _yoctolibEsYocto_wakeupmonitorJs[_key52];
      }

      _export(_exportObj51);
    }, function (_yoctolibEsYocto_wakeupscheduleJs) {
      var _exportObj52 = {};

      for (var _key53 in _yoctolibEsYocto_wakeupscheduleJs) {
        if (_key53 !== 'default') _exportObj52[_key53] = _yoctolibEsYocto_wakeupscheduleJs[_key53];
      }

      _export(_exportObj52);
    }, function (_yoctolibEsYocto_watchdogJs) {
      var _exportObj53 = {};

      for (var _key54 in _yoctolibEsYocto_watchdogJs) {
        if (_key54 !== 'default') _exportObj53[_key54] = _yoctolibEsYocto_watchdogJs[_key54];
      }

      _export(_exportObj53);
    }, function (_yoctolibEsYocto_wirelessJs) {
      var _exportObj54 = {};

      for (var _key55 in _yoctolibEsYocto_wirelessJs) {
        if (_key55 !== 'default') _exportObj54[_key55] = _yoctolibEsYocto_wirelessJs[_key55];
      }

      _export(_exportObj54);
    }],
    execute: function () {}
  };
});
//# sourceMappingURL=yoctolib-es.js.map